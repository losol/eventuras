// <auto-generated />
using System;
using Eventuras.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Eventuras.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211026191751_AddSmsEmailNotificationEntities")]
    partial class AddSmsEmailNotificationEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Eventuras.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SignatureImageBase64")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Eventuras.Domain.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Guid>("Auth")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CertificateGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EvidenceDescription")
                        .HasColumnType("text");

                    b.Property<string>("IssuedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IssuedInCity")
                        .HasColumnType("text");

                    b.Property<int?>("IssuingOrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("IssuingOrganizationName")
                        .HasColumnType("text");

                    b.Property<string>("IssuingUserId")
                        .HasColumnType("text");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("text");

                    b.Property<string>("RecipientName")
                        .HasColumnType("text");

                    b.Property<string>("RecipientUserId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusComment")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CertificateId");

                    b.HasIndex("IssuingOrganizationId");

                    b.HasIndex("IssuingUserId");

                    b.HasIndex("RecipientUserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Eventuras.Domain.EventCollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean");

                    b.Property<string>("FeaturedImageCaption")
                        .HasColumnType("text");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("CollectionId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("EventCollections");
                });

            modelBuilder.Entity("Eventuras.Domain.EventCollectionMapping", b =>
                {
                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.HasKey("CollectionId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventCollectionMappings");
                });

            modelBuilder.Entity("Eventuras.Domain.EventInfo", b =>
                {
                    b.Property<int>("EventInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("CertificateDescription")
                        .HasColumnType("text");

                    b.Property<string>("CertificateTitle")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("ExternalInfoPageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ExternalRegistrationsUrl")
                        .HasColumnType("text");

                    b.Property<bool>("Featured")
                        .HasColumnType("boolean");

                    b.Property<string>("FeaturedImageCaption")
                        .HasColumnType("text");

                    b.Property<string>("FeaturedImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Headline")
                        .HasColumnType("text");

                    b.Property<string>("InformationRequest")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastCancellationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastRegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<bool>("ManageRegistrations")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("text");

                    b.Property<bool>("OnDemand")
                        .HasColumnType("boolean");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizerUserId")
                        .HasColumnType("text");

                    b.Property<string>("PracticalInformation")
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WelcomeLetter")
                        .HasColumnType("text");

                    b.HasKey("EventInfoId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizerUserId");

                    b.ToTable("EventInfos");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalAccount", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LocalId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("UserId");

                    b.HasIndex("ExternalServiceName", "ExternalAccountId")
                        .IsUnique();

                    b.ToTable("ExternalAccounts");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalEvent", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalEventId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocalId");

                    b.HasIndex("EventInfoId", "ExternalServiceName", "ExternalEventId")
                        .IsUnique();

                    b.ToTable("ExternalEvents");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalRegistration", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExternalAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalEventId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalRegistrationId")
                        .HasColumnType("text");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("integer");

                    b.HasKey("LocalId");

                    b.HasIndex("ExternalEventId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("ExternalAccountId", "ExternalEventId")
                        .IsUnique();

                    b.ToTable("ExternalRegistrations");
                });

            modelBuilder.Entity("Eventuras.Domain.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExternalInvoiceId")
                        .HasColumnType("text");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Eventuras.Domain.MessageLog", b =>
                {
                    b.Property<int>("MessageLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageContent")
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<string>("Recipients")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MessageLogId");

                    b.HasIndex("EventInfoId");

                    b.ToTable("MessageLogs");
                });

            modelBuilder.Entity("Eventuras.Domain.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EventInfoId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");
                });

            modelBuilder.Entity("Eventuras.Domain.NotificationRecipient", b =>
                {
                    b.Property<int>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientIdentifier")
                        .HasColumnType("text");

                    b.Property<string>("RecipientName")
                        .HasColumnType("text");

                    b.Property<string>("RecipientUserId")
                        .HasColumnType("text");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RecipientId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RecipientUserId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("NotificationRecipients");
                });

            modelBuilder.Entity("Eventuras.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerInvoiceReference")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerVatNumber")
                        .HasColumnType("text");

                    b.Property<string>("ExternalInvoiceId")
                        .HasColumnType("text");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Eventuras.Domain.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("ProductVariantDescription")
                        .HasColumnType("text");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductVariantName")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("RefundOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefundOrderLineId")
                        .HasColumnType("integer");

                    b.Property<decimal>("VatPercent")
                        .HasColumnType("numeric");

                    b.HasKey("OrderLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("RefundOrderId");

                    b.HasIndex("RefundOrderLineId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Eventuras.Domain.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("IsRoot")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoBase64")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Url")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("VatId")
                        .HasColumnType("text");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationHostname", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Hostname")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.HasKey("OrganizationId", "Hostname");

                    b.HasIndex("Hostname")
                        .IsUnique()
                        .HasFilter("\"Active\" = true");

                    b.ToTable("OrganizationHostnames");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("OrganizationId", "UserId")
                        .IsUnique();

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationMemberRole", b =>
                {
                    b.Property<int>("OrganizationMemberId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("OrganizationMemberId", "Role");

                    b.ToTable("OrganizationMemberRoles");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationSetting", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("OrganizationId", "Name");

                    b.ToTable("OrganizationSettings");
                });

            modelBuilder.Entity("Eventuras.Domain.PaymentMethod", b =>
                {
                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("AdminOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Provider");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Eventuras.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("EnableQuantity")
                        .HasColumnType("boolean");

                    b.Property<int>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<int>("VatPercent")
                        .HasColumnType("integer");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("EventInfoId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Eventuras.Domain.ProductVariant", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AdminOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("Inventory")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<int>("VatPercent")
                        .HasColumnType("integer");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("Eventuras.Domain.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CertificateComment")
                        .HasColumnType("text");

                    b.Property<int?>("CertificateId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("text");

                    b.Property<string>("CustomerCountry")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("CustomerInvoiceReference")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerVatNumber")
                        .HasColumnType("text");

                    b.Property<string>("CustomerZip")
                        .HasColumnType("text");

                    b.Property<bool>("Diploma")
                        .HasColumnType("boolean");

                    b.Property<int>("EventInfoId")
                        .HasColumnType("integer");

                    b.Property<bool>("FreeRegistration")
                        .HasColumnType("boolean");

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ParticipantCity")
                        .HasColumnType("text");

                    b.Property<string>("ParticipantEmployer")
                        .HasColumnType("text");

                    b.Property<string>("ParticipantJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("ParticipantName")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("RegistrationId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("EventInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Eventuras.Domain.EmailNotification", b =>
                {
                    b.HasBaseType("Eventuras.Domain.Notification");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("EmailNotification");
                });

            modelBuilder.Entity("Eventuras.Domain.SmsNotification", b =>
                {
                    b.HasBaseType("Eventuras.Domain.Notification");

                    b.HasDiscriminator().HasValue("SmsNotification");
                });

            modelBuilder.Entity("Eventuras.Domain.Certificate", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "IssuingOrganization")
                        .WithMany()
                        .HasForeignKey("IssuingOrganizationId");

                    b.HasOne("Eventuras.Domain.ApplicationUser", "IssuingUser")
                        .WithMany()
                        .HasForeignKey("IssuingUserId");

                    b.HasOne("Eventuras.Domain.ApplicationUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId");

                    b.Navigation("IssuingOrganization");

                    b.Navigation("IssuingUser");

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("Eventuras.Domain.EventCollection", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Eventuras.Domain.EventCollectionMapping", b =>
                {
                    b.HasOne("Eventuras.Domain.EventCollection", "Collection")
                        .WithMany("EventMappings")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.EventInfo", "Event")
                        .WithMany("CollectionMappings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eventuras.Domain.EventInfo", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", "OrganizerUser")
                        .WithMany()
                        .HasForeignKey("OrganizerUserId");

                    b.Navigation("Organization");

                    b.Navigation("OrganizerUser");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalAccount", b =>
                {
                    b.HasOne("Eventuras.Domain.Registration", "Registration")
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("Eventuras.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Registration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalEvent", b =>
                {
                    b.HasOne("Eventuras.Domain.EventInfo", "EventInfo")
                        .WithMany("ExternalEvents")
                        .HasForeignKey("EventInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInfo");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalRegistration", b =>
                {
                    b.HasOne("Eventuras.Domain.ExternalAccount", "ExternalAccount")
                        .WithMany("ExternalRegistrations")
                        .HasForeignKey("ExternalAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ExternalEvent", "ExternalEvent")
                        .WithMany("Registrations")
                        .HasForeignKey("ExternalEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.Registration", "Registration")
                        .WithMany("ExternalRegistrations")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExternalAccount");

                    b.Navigation("ExternalEvent");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Eventuras.Domain.MessageLog", b =>
                {
                    b.HasOne("Eventuras.Domain.EventInfo", "EventInfo")
                        .WithMany()
                        .HasForeignKey("EventInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventInfo");
                });

            modelBuilder.Entity("Eventuras.Domain.Notification", b =>
                {
                    b.HasOne("Eventuras.Domain.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.EventInfo", "EventInfo")
                        .WithMany()
                        .HasForeignKey("EventInfoId");

                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Eventuras.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EventInfo");

                    b.Navigation("Organization");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eventuras.Domain.NotificationRecipient", b =>
                {
                    b.HasOne("Eventuras.Domain.Notification", "Notification")
                        .WithMany("Recipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", "RecipientUser")
                        .WithMany()
                        .HasForeignKey("RecipientUserId");

                    b.HasOne("Eventuras.Domain.Registration", "Registration")
                        .WithMany()
                        .HasForeignKey("RegistrationId");

                    b.Navigation("Notification");

                    b.Navigation("RecipientUser");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Eventuras.Domain.Order", b =>
                {
                    b.HasOne("Eventuras.Domain.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Eventuras.Domain.Registration", "Registration")
                        .WithMany("Orders")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Invoice");

                    b.Navigation("Registration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventuras.Domain.OrderLine", b =>
                {
                    b.HasOne("Eventuras.Domain.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductId");

                    b.HasOne("Eventuras.Domain.ProductVariant", "ProductVariant")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductVariantId");

                    b.HasOne("Eventuras.Domain.Order", "RefundOrder")
                        .WithMany()
                        .HasForeignKey("RefundOrderId");

                    b.HasOne("Eventuras.Domain.OrderLine", "RefundOrderLine")
                        .WithMany()
                        .HasForeignKey("RefundOrderLineId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");

                    b.Navigation("RefundOrder");

                    b.Navigation("RefundOrderLine");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationHostname", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany("Hostnames")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationMember", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", "User")
                        .WithMany("OrganizationMembership")
                        .HasForeignKey("UserId");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationMemberRole", b =>
                {
                    b.HasOne("Eventuras.Domain.OrganizationMember", "OrganizationMember")
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationMember");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationSetting", b =>
                {
                    b.HasOne("Eventuras.Domain.Organization", "Organization")
                        .WithMany("Settings")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Eventuras.Domain.Product", b =>
                {
                    b.HasOne("Eventuras.Domain.EventInfo", "Eventinfo")
                        .WithMany("Products")
                        .HasForeignKey("EventInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eventinfo");
                });

            modelBuilder.Entity("Eventuras.Domain.ProductVariant", b =>
                {
                    b.HasOne("Eventuras.Domain.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Eventuras.Domain.Registration", b =>
                {
                    b.HasOne("Eventuras.Domain.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId");

                    b.HasOne("Eventuras.Domain.EventInfo", "EventInfo")
                        .WithMany("Registrations")
                        .HasForeignKey("EventInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId");

                    b.Navigation("Certificate");

                    b.Navigation("EventInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Eventuras.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Eventuras.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eventuras.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Eventuras.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eventuras.Domain.ApplicationUser", b =>
                {
                    b.Navigation("OrganizationMembership");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Eventuras.Domain.EventCollection", b =>
                {
                    b.Navigation("EventMappings");
                });

            modelBuilder.Entity("Eventuras.Domain.EventInfo", b =>
                {
                    b.Navigation("CollectionMappings");

                    b.Navigation("ExternalEvents");

                    b.Navigation("Products");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalAccount", b =>
                {
                    b.Navigation("ExternalRegistrations");
                });

            modelBuilder.Entity("Eventuras.Domain.ExternalEvent", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Eventuras.Domain.Invoice", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Eventuras.Domain.Notification", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("Eventuras.Domain.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Eventuras.Domain.Organization", b =>
                {
                    b.Navigation("Hostnames");

                    b.Navigation("Members");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Eventuras.Domain.OrganizationMember", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Eventuras.Domain.Product", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Eventuras.Domain.ProductVariant", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("Eventuras.Domain.Registration", b =>
                {
                    b.Navigation("ExternalAccounts");

                    b.Navigation("ExternalRegistrations");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

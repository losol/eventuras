// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetV3CertificatesByIdData, GetV3CertificatesByIdResponse, GetV3EventByIdCertificatesData, GetV3EventByIdCertificatesResponse, GetV3EventByIdCertificatesPreviewData, GetV3EventByIdCertificatesPreviewResponse, PostV3EventByIdCertificatesIssueData, PostV3EventByIdCertificatesIssueResponse, PostV3EventByIdCertificatesUpdateData, PostV3EventByIdCertificatesUpdateResponse, GetV3EventcollectionsData, GetV3EventcollectionsResponse, PostV3EventcollectionsData, PostV3EventcollectionsResponse, GetV3EventcollectionsByIdData, GetV3EventcollectionsByIdResponse, PutV3EventcollectionsByIdData, PutV3EventcollectionsByIdResponse, DeleteV3EventcollectionsByIdData, DeleteV3EventcollectionsByIdResponse, PutV3EventsByEventIdCollectionsByCollectionIdData, PutV3EventsByEventIdCollectionsByCollectionIdResponse, DeleteV3EventsByEventIdCollectionsByCollectionIdData, DeleteV3EventsByEventIdCollectionsByCollectionIdResponse, GetV3EventsByEventIdProductsData, GetV3EventsByEventIdProductsResponse, PostV3EventsByEventIdProductsData, PostV3EventsByEventIdProductsResponse, PutV3EventsByEventIdProductsByProductIdData, PutV3EventsByEventIdProductsByProductIdResponse, DeleteV3EventsByEventIdProductsByProductIdData, DeleteV3EventsByEventIdProductsByProductIdResponse, GetV3EventsByEventIdProductsByProductIdVariantsData, GetV3EventsByEventIdProductsByProductIdVariantsResponse, PostV3EventsByEventIdProductsByProductIdVariantsData, PostV3EventsByEventIdProductsByProductIdVariantsResponse, DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData, DeleteV3EventsByEventIdProductsByProductIdVariantsByIdResponse, GetV3EventsData, GetV3EventsResponse, PostV3EventsData, PostV3EventsResponse, GetV3EventsByIdData, GetV3EventsByIdResponse, PutV3EventsByIdData, PutV3EventsByIdResponse, PatchV3EventsByIdData, PatchV3EventsByIdResponse, DeleteV3EventsByIdData, DeleteV3EventsByIdResponse, GetV3EventsByEventIdStatisticsData, GetV3EventsByEventIdStatisticsResponse, GetV3InvoicesByIdData, GetV3InvoicesByIdResponse, PostV3InvoicesData, PostV3InvoicesResponse, GetV3NotificationsByIdRecipientsData, GetV3NotificationsByIdRecipientsResponse, GetV3NotificationsByIdData, GetV3NotificationsByIdResponse, GetV3NotificationsData, GetV3NotificationsResponse, PostV3NotificationsEmailData, PostV3NotificationsEmailResponse, PostV3NotificationsSmsData, PostV3NotificationsSmsResponse, GetV3OnlinecoursesData, GetV3OnlinecoursesResponse, GetV3OnlinecoursesByIdData, GetV3OnlinecoursesByIdResponse, GetV3OrdersByIdData, GetV3OrdersByIdResponse, PatchV3OrdersByIdData, PatchV3OrdersByIdResponse, PutV3OrdersByIdData, PutV3OrdersByIdResponse, DeleteV3OrdersByIdData, DeleteV3OrdersByIdResponse, GetV3OrdersData, GetV3OrdersResponse, PostV3OrdersData, PostV3OrdersResponse, GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData, GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData, PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData, DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, PutV3OrganizationsByOrganizationIdMembersByUserIdData, PutV3OrganizationsByOrganizationIdMembersByUserIdResponse, DeleteV3OrganizationsByOrganizationIdMembersByUserIdData, DeleteV3OrganizationsByOrganizationIdMembersByUserIdResponse, GetV3OrganizationsData, GetV3OrganizationsResponse, PostV3OrganizationsData, PostV3OrganizationsResponse, GetV3OrganizationsByOrganizationIdData, GetV3OrganizationsByOrganizationIdResponse, PutV3OrganizationsByOrganizationIdData, PutV3OrganizationsByOrganizationIdResponse, DeleteV3OrganizationsByOrganizationIdData, DeleteV3OrganizationsByOrganizationIdResponse, GetV3OrganizationsByOrganizationIdSettingsData, GetV3OrganizationsByOrganizationIdSettingsResponse, PutV3OrganizationsByOrganizationIdSettingsData, PutV3OrganizationsByOrganizationIdSettingsResponse, PostV3OrganizationsByOrganizationIdSettingsData, PostV3OrganizationsByOrganizationIdSettingsResponse, GetV3ProductsByProductIdSummaryData, GetV3ProductsByProductIdSummaryResponse, PostV3RegistrationsByIdCertificateSendData, PostV3RegistrationsByIdCertificateSendResponse, GetV3RegistrationsByIdOrdersData, GetV3RegistrationsByIdOrdersResponse, PostV3RegistrationsByIdOrdersData, PostV3RegistrationsByIdOrdersResponse, PostV3RegistrationsByIdProductsData, PostV3RegistrationsByIdProductsResponse, GetV3RegistrationsData, GetV3RegistrationsResponse, PostV3RegistrationsData, PostV3RegistrationsResponse, GetV3RegistrationsByIdData, GetV3RegistrationsByIdResponse, PutV3RegistrationsByIdData, PutV3RegistrationsByIdResponse, PatchV3RegistrationsByIdData, PatchV3RegistrationsByIdResponse, DeleteV3RegistrationsByIdData, DeleteV3RegistrationsByIdResponse, PostV3RegistrationsMeByEventIdData, PostV3RegistrationsMeByEventIdResponse, GetV3UserprofileData, GetV3UserprofileResponse, PutV3UserprofileData, PutV3UserprofileResponse, GetV3UsersMeData, GetV3UsersMeResponse, GetV3UsersByIdData, GetV3UsersByIdResponse, PutV3UsersByIdData, PutV3UsersByIdResponse, GetV3UsersData, GetV3UsersResponse, PostV3UsersData, PostV3UsersResponse } from './types.gen';

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.format
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns CertificateDto Success
 * @throws ApiError
 */
export const getV3CertificatesById = (data: GetV3CertificatesByIdData): CancelablePromise<GetV3CertificatesByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/certificates/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        format: data.format
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3EventByIdCertificates = (data: GetV3EventByIdCertificatesData): CancelablePromise<GetV3EventByIdCertificatesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/event/{id}/certificates',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3EventByIdCertificatesPreview = (data: GetV3EventByIdCertificatesPreviewData): CancelablePromise<GetV3EventByIdCertificatesPreviewResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/event/{id}/certificates/preview',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.send
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3EventByIdCertificatesIssue = (data: PostV3EventByIdCertificatesIssueData): CancelablePromise<PostV3EventByIdCertificatesIssueResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/event/{id}/certificates/issue',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        send: data.send
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3EventByIdCertificatesUpdate = (data: PostV3EventByIdCertificatesUpdateData): CancelablePromise<PostV3EventByIdCertificatesUpdateResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/event/{id}/certificates/update',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns EventCollectionDtoPageResponseDto Success
 * @throws ApiError
 */
export const getV3Eventcollections = (data: GetV3EventcollectionsData = {}): CancelablePromise<GetV3EventcollectionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/eventcollections',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns EventCollectionDto Success
 * @throws ApiError
 */
export const postV3Eventcollections = (data: PostV3EventcollectionsData = {}): CancelablePromise<PostV3EventcollectionsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/eventcollections',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns EventCollectionDto Success
 * @throws ApiError
 */
export const getV3EventcollectionsById = (data: GetV3EventcollectionsByIdData): CancelablePromise<GetV3EventcollectionsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/eventcollections/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns EventCollectionDto Success
 * @throws ApiError
 */
export const putV3EventcollectionsById = (data: PutV3EventcollectionsByIdData): CancelablePromise<PutV3EventcollectionsByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/eventcollections/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3EventcollectionsById = (data: DeleteV3EventcollectionsByIdData): CancelablePromise<DeleteV3EventcollectionsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/eventcollections/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.collectionId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const putV3EventsByEventIdCollectionsByCollectionId = (data: PutV3EventsByEventIdCollectionsByCollectionIdData): CancelablePromise<PutV3EventsByEventIdCollectionsByCollectionIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/events/{eventId}/collections/{collectionId}',
    path: {
        eventId: data.eventId,
        collectionId: data.collectionId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.collectionId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3EventsByEventIdCollectionsByCollectionId = (data: DeleteV3EventsByEventIdCollectionsByCollectionIdData): CancelablePromise<DeleteV3EventsByEventIdCollectionsByCollectionIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/events/{eventId}/collections/{collectionId}',
    path: {
        eventId: data.eventId,
        collectionId: data.collectionId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.visibility
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns ProductDto Success
 * @throws ApiError
 */
export const getV3EventsByEventIdProducts = (data: GetV3EventsByEventIdProductsData): CancelablePromise<GetV3EventsByEventIdProductsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/events/{eventId}/products',
    path: {
        eventId: data.eventId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Visibility: data.visibility
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3EventsByEventIdProducts = (data: PostV3EventsByEventIdProductsData): CancelablePromise<PostV3EventsByEventIdProductsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/events/{eventId}/products',
    path: {
        eventId: data.eventId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putV3EventsByEventIdProductsByProductId = (data: PutV3EventsByEventIdProductsByProductIdData): CancelablePromise<PutV3EventsByEventIdProductsByProductIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/events/{eventId}/products/{productId}',
    path: {
        eventId: data.eventId,
        productId: data.productId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3EventsByEventIdProductsByProductId = (data: DeleteV3EventsByEventIdProductsByProductIdData): CancelablePromise<DeleteV3EventsByEventIdProductsByProductIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/events/{eventId}/products/{productId}',
    path: {
        eventId: data.eventId,
        productId: data.productId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns ProductVariantDto Success
 * @throws ApiError
 */
export const getV3EventsByEventIdProductsByProductIdVariants = (data: GetV3EventsByEventIdProductsByProductIdVariantsData): CancelablePromise<GetV3EventsByEventIdProductsByProductIdVariantsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/events/{eventId}/products/{productId}/variants',
    path: {
        eventId: data.eventId,
        productId: data.productId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3EventsByEventIdProductsByProductIdVariants = (data: PostV3EventsByEventIdProductsByProductIdVariantsData): CancelablePromise<PostV3EventsByEventIdProductsByProductIdVariantsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/events/{eventId}/products/{productId}/variants',
    path: {
        eventId: data.eventId,
        productId: data.productId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3EventsByEventIdProductsByProductIdVariantsById = (data: DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData): CancelablePromise<DeleteV3EventsByEventIdProductsByProductIdVariantsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/events/{eventId}/products/{productId}/variants/{id}',
    path: {
        eventId: data.eventId,
        productId: data.productId,
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * Retrieves a list of events based on the given query.
 * @param data The data for the request.
 * @param data.type
 * @param data.start
 * @param data.end
 * @param data.period
 * @param data.includePastEvents
 * @param data.includeDraftEvents
 * @param data.organizationId
 * @param data.collectionId
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns EventDtoPageResponseDto Success
 * @throws ApiError
 */
export const getV3Events = (data: GetV3EventsData = {}): CancelablePromise<GetV3EventsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/events',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Type: data.type,
        Start: data.start,
        End: data.end,
        Period: data.period,
        IncludePastEvents: data.includePastEvents,
        IncludeDraftEvents: data.includeDraftEvents,
        OrganizationId: data.organizationId,
        CollectionId: data.collectionId,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * Creates a new event.
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody Event information.
 * @returns EventDto Success
 * @throws ApiError
 */
export const postV3Events = (data: PostV3EventsData = {}): CancelablePromise<PostV3EventsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/events',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Retrieves event details by ID.
 * @param data The data for the request.
 * @param data.id The ID of the event.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns EventDto Success
 * @throws ApiError
 */
export const getV3EventsById = (data: GetV3EventsByIdData): CancelablePromise<GetV3EventsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/events/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * Updates an existing event by ID.
 * @param data The data for the request.
 * @param data.id The ID of the event.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody Updated event information.
 * @returns EventDto Success
 * @throws ApiError
 */
export const putV3EventsById = (data: PutV3EventsByIdData): CancelablePromise<PutV3EventsByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/events/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Partially updates a specific event by its ID using JSON Patch.
 * @param data The data for the request.
 * @param data.id The ID of the event to update.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody The JSON Patch document with updates.
 * @returns unknown Success
 * @throws ApiError
 */
export const patchV3EventsById = (data: PatchV3EventsByIdData): CancelablePromise<PatchV3EventsByIdResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/v3/events/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Deletes an event by ID.
 * @param data The data for the request.
 * @param data.id The ID of the event to delete.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3EventsById = (data: DeleteV3EventsByIdData): CancelablePromise<DeleteV3EventsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/events/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * Event statistics
 * Returns a summary of the registrations for the event.
 * @param data The data for the request.
 * @param data.eventId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns EventStatisticsDto Success
 * @throws ApiError
 */
export const getV3EventsByEventIdStatistics = (data: GetV3EventsByEventIdStatisticsData): CancelablePromise<GetV3EventsByEventIdStatisticsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/events/{eventId}/statistics',
    path: {
        eventId: data.eventId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns InvoiceDto Success
 * @throws ApiError
 */
export const getV3InvoicesById = (data: GetV3InvoicesByIdData): CancelablePromise<GetV3InvoicesByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/invoices/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns InvoiceDto Success
 * @throws ApiError
 */
export const postV3Invoices = (data: PostV3InvoicesData = {}): CancelablePromise<PostV3InvoicesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/invoices',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.query
 * @param data.sentOnly
 * @param data.errorsOnly
 * @param data.order
 * @param data.desc
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3NotificationsByIdRecipients = (data: GetV3NotificationsByIdRecipientsData): CancelablePromise<GetV3NotificationsByIdRecipientsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/notifications/{id}/recipients',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Query: data.query,
        SentOnly: data.sentOnly,
        ErrorsOnly: data.errorsOnly,
        Order: data.order,
        Desc: data.desc,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.includeStatistics
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3NotificationsById = (data: GetV3NotificationsByIdData): CancelablePromise<GetV3NotificationsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/notifications/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        includeStatistics: data.includeStatistics
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventId
 * @param data.productId
 * @param data.status
 * @param data.type
 * @param data.recipientUserId
 * @param data.order
 * @param data.desc
 * @param data.includeStatistics Whether to include delivery statistics into response.
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3Notifications = (data: GetV3NotificationsData = {}): CancelablePromise<GetV3NotificationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/notifications',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        EventId: data.eventId,
        ProductId: data.productId,
        Status: data.status,
        Type: data.type,
        RecipientUserId: data.recipientUserId,
        Order: data.order,
        Desc: data.desc,
        IncludeStatistics: data.includeStatistics,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns NotificationDto Success
 * @throws ApiError
 */
export const postV3NotificationsEmail = (data: PostV3NotificationsEmailData = {}): CancelablePromise<PostV3NotificationsEmailResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/notifications/email',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns NotificationDto Success
 * @throws ApiError
 */
export const postV3NotificationsSms = (data: PostV3NotificationsSmsData = {}): CancelablePromise<PostV3NotificationsSmsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/notifications/sms',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OnlineCourseDto Success
 * @throws ApiError
 */
export const getV3Onlinecourses = (data: GetV3OnlinecoursesData = {}): CancelablePromise<GetV3OnlinecoursesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/onlinecourses',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OnlineCourseDto Success
 * @throws ApiError
 */
export const getV3OnlinecoursesById = (data: GetV3OnlinecoursesByIdData): CancelablePromise<GetV3OnlinecoursesByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/onlinecourses/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.includeUser
 * @param data.includeRegistration
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OrderDto Success
 * @throws ApiError
 */
export const getV3OrdersById = (data: GetV3OrdersByIdData): CancelablePromise<GetV3OrdersByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/orders/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        IncludeUser: data.includeUser,
        IncludeRegistration: data.includeRegistration
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const patchV3OrdersById = (data: PatchV3OrdersByIdData): CancelablePromise<PatchV3OrdersByIdResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/v3/orders/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putV3OrdersById = (data: PutV3OrdersByIdData): CancelablePromise<PutV3OrdersByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/orders/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3OrdersById = (data: DeleteV3OrdersByIdData): CancelablePromise<DeleteV3OrdersByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/orders/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.userId
 * @param data.eventId
 * @param data.registrationId
 * @param data.status
 * @param data.includeUser
 * @param data.includeRegistration
 * @param data.organizationId
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const getV3Orders = (data: GetV3OrdersData = {}): CancelablePromise<GetV3OrdersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/orders',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        UserId: data.userId,
        EventId: data.eventId,
        RegistrationId: data.registrationId,
        Status: data.status,
        IncludeUser: data.includeUser,
        IncludeRegistration: data.includeRegistration,
        OrganizationId: data.organizationId,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3Orders = (data: PostV3OrdersData = {}): CancelablePromise<PostV3OrdersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/orders',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.userId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns string Success
 * @throws ApiError
 */
export const getV3OrganizationsByOrganizationIdMembersByUserIdRoles = (data: GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData): CancelablePromise<GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/organizations/{organizationId}/members/{userId}/roles',
    path: {
        organizationId: data.organizationId,
        userId: data.userId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.userId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns string Success
 * @throws ApiError
 */
export const postV3OrganizationsByOrganizationIdMembersByUserIdRoles = (data: PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData): CancelablePromise<PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/organizations/{organizationId}/members/{userId}/roles',
    path: {
        organizationId: data.organizationId,
        userId: data.userId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.userId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns string Success
 * @throws ApiError
 */
export const deleteV3OrganizationsByOrganizationIdMembersByUserIdRoles = (data: DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData): CancelablePromise<DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/organizations/{organizationId}/members/{userId}/roles',
    path: {
        organizationId: data.organizationId,
        userId: data.userId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.userId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const putV3OrganizationsByOrganizationIdMembersByUserId = (data: PutV3OrganizationsByOrganizationIdMembersByUserIdData): CancelablePromise<PutV3OrganizationsByOrganizationIdMembersByUserIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/organizations/{organizationId}/members/{userId}',
    path: {
        organizationId: data.organizationId,
        userId: data.userId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.userId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3OrganizationsByOrganizationIdMembersByUserId = (data: DeleteV3OrganizationsByOrganizationIdMembersByUserIdData): CancelablePromise<DeleteV3OrganizationsByOrganizationIdMembersByUserIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/organizations/{organizationId}/members/{userId}',
    path: {
        organizationId: data.organizationId,
        userId: data.userId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OrganizationDto Success
 * @throws ApiError
 */
export const getV3Organizations = (data: GetV3OrganizationsData = {}): CancelablePromise<GetV3OrganizationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/organizations',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns OrganizationDto Success
 * @throws ApiError
 */
export const postV3Organizations = (data: PostV3OrganizationsData = {}): CancelablePromise<PostV3OrganizationsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/organizations',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OrganizationDto Success
 * @throws ApiError
 */
export const getV3OrganizationsByOrganizationId = (data: GetV3OrganizationsByOrganizationIdData): CancelablePromise<GetV3OrganizationsByOrganizationIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/organizations/{organizationId}',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns OrganizationDto Success
 * @throws ApiError
 */
export const putV3OrganizationsByOrganizationId = (data: PutV3OrganizationsByOrganizationIdData): CancelablePromise<PutV3OrganizationsByOrganizationIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/organizations/{organizationId}',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3OrganizationsByOrganizationId = (data: DeleteV3OrganizationsByOrganizationIdData): CancelablePromise<DeleteV3OrganizationsByOrganizationIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/organizations/{organizationId}',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OrganizationSettingDto Success
 * @throws ApiError
 */
export const getV3OrganizationsByOrganizationIdSettings = (data: GetV3OrganizationsByOrganizationIdSettingsData): CancelablePromise<GetV3OrganizationsByOrganizationIdSettingsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/organizations/{organizationId}/settings',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const putV3OrganizationsByOrganizationIdSettings = (data: PutV3OrganizationsByOrganizationIdSettingsData): CancelablePromise<PutV3OrganizationsByOrganizationIdSettingsResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/organizations/{organizationId}/settings',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.organizationId
 * @param data.requestBody
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3OrganizationsByOrganizationIdSettings = (data: PostV3OrganizationsByOrganizationIdSettingsData): CancelablePromise<PostV3OrganizationsByOrganizationIdSettingsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/organizations/{organizationId}/settings',
    path: {
        organizationId: data.organizationId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.productId
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns ProductDeliverySummaryDto Success
 * @throws ApiError
 */
export const getV3ProductsByProductIdSummary = (data: GetV3ProductsByProductIdSummaryData): CancelablePromise<GetV3ProductsByProductIdSummaryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/products/{productId}/summary',
    path: {
        productId: data.productId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3RegistrationsByIdCertificateSend = (data: PostV3RegistrationsByIdCertificateSendData): CancelablePromise<PostV3RegistrationsByIdCertificateSendResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/registrations/{id}/certificate/send',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns OrderDto Success
 * @throws ApiError
 */
export const getV3RegistrationsByIdOrders = (data: GetV3RegistrationsByIdOrdersData): CancelablePromise<GetV3RegistrationsByIdOrdersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/registrations/{id}/orders',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3RegistrationsByIdOrders = (data: PostV3RegistrationsByIdOrdersData): CancelablePromise<PostV3RegistrationsByIdOrdersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/registrations/{id}/orders',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const postV3RegistrationsByIdProducts = (data: PostV3RegistrationsByIdProductsData): CancelablePromise<PostV3RegistrationsByIdProductsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/registrations/{id}/products',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * Get registrations with optional Excel export
 * Retrieves registrations with optional export to Excel based on the Accept header.
 * @param data The data for the request.
 * @param data.eventId
 * @param data.userId
 * @param data.includeEventInfo
 * @param data.includeUserInfo
 * @param data.includeProducts
 * @param data.includeOrders
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns RegistrationDtoPageResponseDto Success
 * @throws ApiError
 */
export const getV3Registrations = (data: GetV3RegistrationsData = {}): CancelablePromise<GetV3RegistrationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/registrations',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        EventId: data.eventId,
        UserId: data.userId,
        IncludeEventInfo: data.includeEventInfo,
        IncludeUserInfo: data.includeUserInfo,
        IncludeProducts: data.includeProducts,
        IncludeOrders: data.includeOrders,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    },
    errors: {
        400: 'Bad Request'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns RegistrationDto Success
 * @throws ApiError
 */
export const postV3Registrations = (data: PostV3RegistrationsData = {}): CancelablePromise<PostV3RegistrationsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/registrations',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventId
 * @param data.userId
 * @param data.includeEventInfo
 * @param data.includeUserInfo
 * @param data.includeProducts
 * @param data.includeOrders
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns RegistrationDto Success
 * @throws ApiError
 */
export const getV3RegistrationsById = (data: GetV3RegistrationsByIdData): CancelablePromise<GetV3RegistrationsByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/registrations/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        EventId: data.eventId,
        UserId: data.userId,
        IncludeEventInfo: data.includeEventInfo,
        IncludeUserInfo: data.includeUserInfo,
        IncludeProducts: data.includeProducts,
        IncludeOrders: data.includeOrders,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns RegistrationDto Success
 * @throws ApiError
 */
export const putV3RegistrationsById = (data: PutV3RegistrationsByIdData): CancelablePromise<PutV3RegistrationsByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/registrations/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns unknown Success
 * @throws ApiError
 */
export const patchV3RegistrationsById = (data: PatchV3RegistrationsByIdData): CancelablePromise<PatchV3RegistrationsByIdResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/v3/registrations/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns unknown Success
 * @throws ApiError
 */
export const deleteV3RegistrationsById = (data: DeleteV3RegistrationsByIdData): CancelablePromise<DeleteV3RegistrationsByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/v3/registrations/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * Alias for POST /v3/registrations
 * @param data The data for the request.
 * @param data.eventId
 * @param data.createOrder
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns RegistrationDto Success
 * @throws ApiError
 */
export const postV3RegistrationsMeByEventId = (data: PostV3RegistrationsMeByEventIdData): CancelablePromise<PostV3RegistrationsMeByEventIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/registrations/me/{eventId}',
    path: {
        eventId: data.eventId
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        createOrder: data.createOrder
    }
}); };

/**
 * Gets information about the current user. Creates a new user if no user with the email exists.
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns UserDto Success
 * @throws ApiError
 */
export const getV3Userprofile = (data: GetV3UserprofileData = {}): CancelablePromise<GetV3UserprofileResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/userprofile',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns UserDto Success
 * @throws ApiError
 */
export const putV3Userprofile = (data: PutV3UserprofileData = {}): CancelablePromise<PutV3UserprofileResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/userprofile',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @deprecated
 * Gets information about the current user. Creates a new user if no user with the email exists.
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns UserDto Success
 * @throws ApiError
 */
export const getV3UsersMe = (data: GetV3UsersMeData = {}): CancelablePromise<GetV3UsersMeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/users/me',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns UserDto Success
 * @throws ApiError
 */
export const getV3UsersById = (data: GetV3UsersByIdData): CancelablePromise<GetV3UsersByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/users/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    }
}); };

/**
 * @param data The data for the request.
 * @param data.id
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns UserDto Success
 * @throws ApiError
 */
export const putV3UsersById = (data: PutV3UsersByIdData): CancelablePromise<PutV3UsersByIdResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/v3/users/{id}',
    path: {
        id: data.id
    },
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };

/**
 * @param data The data for the request.
 * @param data.query
 * @param data.organizationId
 * @param data.includeOrgMembership
 * @param data.order
 * @param data.descending
 * @param data.page
 * @param data.count
 * @param data.limit
 * @param data.offset
 * @param data.ordering
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @returns UserDtoPageResponseDto Success
 * @throws ApiError
 */
export const getV3Users = (data: GetV3UsersData = {}): CancelablePromise<GetV3UsersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/v3/users',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    query: {
        Query: data.query,
        OrganizationId: data.organizationId,
        IncludeOrgMembership: data.includeOrgMembership,
        Order: data.order,
        Descending: data.descending,
        Page: data.page,
        Count: data.count,
        Limit: data.limit,
        Offset: data.offset,
        Ordering: data.ordering
    }
}); };

/**
 * @param data The data for the request.
 * @param data.eventurasOrgId Optional organization Id. Will be required in API version 4.
 * @param data.requestBody
 * @returns UserDto Success
 * @throws ApiError
 */
export const postV3Users = (data: PostV3UsersData = {}): CancelablePromise<PostV3UsersResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v3/users',
    headers: {
        'Eventuras-Org-Id': data.eventurasOrgId
    },
    body: data.requestBody,
    mediaType: 'application/json'
}); };
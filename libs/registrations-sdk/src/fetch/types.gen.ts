// This file is auto-generated by @hey-api/openapi-ts

export type ByRegistrationStatus = {
    draft?: number;
    cancelled?: number;
    verified?: number;
    notAttended?: number;
    attended?: number;
    finished?: number;
    waitingList?: number;
};

export type ByStatus = {
    draft?: number;
    cancelled?: number;
    verified?: number;
    notAttended?: number;
    attended?: number;
    finished?: number;
    waitingList?: number;
};

export type ByType = {
    participant?: number;
    student?: number;
    staff?: number;
    lecturer?: number;
    artist?: number;
};

export type CalendarSystem = {
    readonly id?: string | null;
    readonly name?: string | null;
    readonly minYear?: number;
    readonly maxYear?: number;
    readonly eras?: Array<Era> | null;
};

export type CertificateDto = {
    readonly certificateId?: number;
    readonly certificateGuid?: string;
    readonly title?: string | null;
    readonly description?: string | null;
    readonly comment?: string | null;
    readonly recipientName?: string | null;
    readonly evidenceDescription?: string | null;
    readonly issuedInCity?: string | null;
    issuingDate?: LocalDate;
    readonly issuerOrganizationName?: string | null;
    readonly issuerOrganizationLogoBase64?: string | null;
    readonly issuerPersonName?: string | null;
    readonly issuerPersonSignatureImageBase64?: string | null;
};

export type CertificateFormat = 'Json' | 'Html' | 'Pdf';

export type EmailNotificationDto = {
    recipients?: Array<(string)> | null;
    eventParticipants?: EventParticipantsFilterDto;
    subject: string;
    registrationId?: number | null;
    bodyMarkdown: string;
};

export type Era = {
    readonly name?: string | null;
};

export type EventCollectionCreateDto = {
    organizationId: number;
    name: string;
    slug?: string | null;
    description?: string | null;
    featured?: boolean;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
};

export type EventCollectionDto = {
    id?: number | null;
    organizationId: number;
    name: string;
    slug?: string | null;
    description?: string | null;
    featured?: boolean;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
};

export type EventCollectionDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    readonly pages?: number;
    data?: Array<EventCollectionDto> | null;
};

export type EventDto = {
    id?: number;
    type?: EventInfoType;
    status?: EventInfoStatus;
    title?: string | null;
    slug?: string | null;
    category?: string | null;
    description?: string | null;
    featured?: boolean;
    program?: string | null;
    practicalInformation?: string | null;
    location?: string | null;
    city?: string | null;
    onDemand?: boolean;
    dateStart?: LocalDate;
    dateEnd?: LocalDate;
    lastRegistrationDate?: LocalDate;
    lastCancellationDate?: LocalDate;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
    headline?: string | null;
    published?: boolean;
    moreInformation?: string | null;
    welcomeLetter?: string | null;
    informationRequest?: string | null;
    certificateTitle?: string | null;
    certificateDescription?: string | null;
    projectCode?: string | null;
    organizerUserId?: string | null;
    maxParticipants?: number | null;
    externalInfoPageUrl?: string | null;
};

export type EventDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    readonly pages?: number;
    data?: Array<EventDto> | null;
};

/**
 * Data Transfer Object (DTO) for Event Information.
 * Used for API between the backend and the frontend.
 */
export type EventFormDto = {
    title: string;
    slug: string;
    id?: number | null;
    type?: EventInfoType;
    status?: EventInfoStatus;
    organizationId?: number;
    headline?: string | null;
    moreInformation?: string | null;
    category?: string | null;
    description?: string | null;
    manageRegistrations?: boolean;
    onDemand?: boolean;
    featured?: boolean;
    program?: string | null;
    practicalInformation?: string | null;
    location?: string | null;
    city?: string | null;
    dateStart?: LocalDate;
    dateEnd?: LocalDate;
    welcomeLetter?: string | null;
    published?: boolean;
    externalInfoPageUrl?: string | null;
    externalRegistrationsUrl?: string | null;
    informationRequest?: string | null;
    lastRegistrationDate?: LocalDate;
    lastCancellationDate?: LocalDate;
    maxParticipants?: number | null;
    certificateTitle?: string | null;
    certificateDescription?: string | null;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
    projectCode?: string | null;
    organizerUserId?: string | null;
    options?: EventInfoOptionsDto;
};

export type EventFormDtoJsonPatchDocument = {
    readonly operations?: Array<EventFormDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type EventFormDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type EventInfoOptionsDto = {
    registrationPolicy?: EventInfoRegistrationPolicyDto;
};

export type EventInfoRegistrationPolicyDto = {
    allowedRegistrationEditHours?: number | null;
    allowModificationsAfterCancellationDue?: boolean;
};

export type EventInfoStatus = 'Draft' | 'Planned' | 'RegistrationsOpen' | 'WaitingList' | 'RegistrationsClosed' | 'Finished' | 'Archived' | 'Cancelled';

export type EventInfoType = 'Course' | 'Conference' | 'OnlineCourse' | 'Social' | 'Other';

export type EventParticipantsFilterDto = {
    eventId?: number | null;
    productId?: number | null;
    registrationStatuses?: Array<RegistrationStatus> | null;
    registrationTypes?: Array<RegistrationType> | null;
    readonly isDefined?: boolean;
};

export type EventStatisticsDto = {
    byStatus?: ByStatus;
    byType?: ByType;
};

export type IContractResolver = {
    [key: string]: unknown;
};

export type Instant = {
    [key: string]: unknown;
};

export type InvoiceDto = {
    invoiceId?: number;
    externalInvoiceId?: string | null;
    paid?: boolean;
    orderIds?: Array<(number)> | null;
};

export type InvoiceRequestDto = {
    orderIds?: Array<(number)> | null;
};

export type IsoDayOfWeek = 'None' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday';

export type LocalDate = {
    calendar?: CalendarSystem;
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: IsoDayOfWeek;
    readonly yearOfEra?: number;
    era?: Era;
    readonly dayOfYear?: number;
};

export type NewOrderRequestDto = {
    lines: Array<OrderLineModel>;
    registrationId: number;
};

export type NewProductDto = {
    name: string;
    description?: string | null;
    more?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
};

export type NewProductVariantDto = {
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
};

export type NewRegistrationDto = {
    customer?: RegistrationCustomerInfoDto;
    notes?: string | null;
    type?: RegistrationType;
    paymentMethod?: PaymentProvider;
    readonly empty?: boolean;
    userId: string;
    eventId: number;
    createOrder?: boolean;
    sendWelcomeLetter?: boolean;
};

export type NewRegistrationOrderDto = {
    items: Array<OrderLineModel>;
};

export type NotificationDto = {
    readonly notificationId?: number;
    readonly organizationId?: number | null;
    readonly eventId?: number | null;
    readonly productId?: number | null;
    readonly registrationId?: number | null;
    readonly message?: string | null;
    created?: Instant;
    statusUpdated?: Instant;
    type?: NotificationType;
    status?: NotificationStatus;
    statistics?: NotificationStatisticsDto;
};

export type NotificationListOrder = 'Created' | 'StatusUpdated';

export type NotificationRecipientListOrder = 'Created' | 'Sent' | 'Name' | 'Identifier';

export type NotificationStatisticsDto = {
    readonly sent?: number;
    readonly errors?: number;
    readonly recipients?: number;
};

export type NotificationStatus = 'New' | 'Queued' | 'Started' | 'Cancelled' | 'Failed' | 'Sent';

export type NotificationType = 'Email' | 'Sms';

export type OnlineCourseDto = {
    id?: number;
    name?: string | null;
    description?: string | null;
    slug?: string | null;
    featured?: boolean;
    onDemand?: boolean;
};

export type OperationType = 'Add' | 'Remove' | 'Replace' | 'Move' | 'Copy' | 'Test' | 'Invalid';

export type OrderDto = {
    orderId?: number;
    status?: OrderStatus;
    time?: string;
    userId?: string | null;
    registrationId?: number;
    paymentMethod?: PaymentProvider;
    comments?: string | null;
    log?: string | null;
    items?: Array<OrderLineDto> | null;
    registration?: RegistrationDto;
    user?: UserDto;
};

export type OrderDtoJsonPatchDocument = {
    readonly operations?: Array<OrderDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type OrderDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type OrderLineDto = {
    orderLineId?: number;
    product?: ProductDto;
    productVariant?: ProductVariantDto;
    quantity?: number;
};

export type OrderLineModel = {
    productId?: number;
    productVariantId?: number | null;
    quantity?: number;
};

export type OrderStatus = 'Draft' | 'Verified' | 'Invoiced' | 'Cancelled' | 'Refunded';

export type OrderUpdateRequestDto = {
    lines: Array<OrderLineModel>;
};

export type OrganizationDto = {
    readonly organizationId?: number;
    readonly name?: string | null;
    readonly description?: string | null;
    readonly url?: string | null;
    readonly phone?: string | null;
    readonly email?: string | null;
    readonly logoUrl?: string | null;
    readonly logoBase64?: string | null;
};

export type OrganizationFormDto = {
    name: string;
    description?: string | null;
    url?: string | null;
    phone?: string | null;
    email?: string | null;
    logoUrl?: string | null;
    logoBase64?: string | null;
};

export type OrganizationMemberDto = {
    id?: number;
    userId?: string | null;
    organizationId?: number;
    roles?: Array<OrganizationMemberRoleDto> | null;
};

export type OrganizationMemberRoleDto = {
    organizationMemberId?: number;
    role?: string | null;
};

export type OrganizationSettingDto = {
    readonly name?: string | null;
    readonly section?: string | null;
    readonly description?: string | null;
    type?: OrganizationSettingType;
    value?: string | null;
};

export type OrganizationSettingType = 'String' | 'Number' | 'Url' | 'Email' | 'Boolean';

export type OrganizationSettingValueDto = {
    name: string;
    value?: string | null;
};

export type PaymentProvider = 'EmailInvoice' | 'PowerOfficeEmailInvoice' | 'PowerOfficeEHFInvoice' | 'StripeInvoice' | 'StripeDirect' | 'VippsInvoice' | 'VippsDirect';

export type PeriodMatchingKind = 'Match' | 'Intersect' | 'Contain';

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    [key: string]: (unknown | string | number) | undefined;
};

export type ProductDeliverySummaryDto = {
    product?: ProductSummaryDto;
    orderSummary?: Array<ProductOrdersSummaryDto> | null;
    statistics?: ProductStatisticsDto;
};

export type ProductDto = {
    productId?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
    inventory?: number | null;
    published?: boolean | null;
    variants?: Array<ProductVariantDto> | null;
    minimumQuantity?: number;
    readonly isMandatory?: boolean;
    enableQuantity?: boolean;
};

export type ProductFormDto = {
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
    enableQuantity?: boolean;
    minimumQuantity?: number;
    inventory?: number | null;
    published?: boolean | null;
    visibility?: ProductVisibility;
};

export type ProductOrderDto = {
    productId?: number;
    productVariantId?: number | null;
    product?: ProductDto;
    productVariant?: ProductVariantDto;
    quantity?: number;
};

export type ProductOrdersSummaryDto = {
    registrationId?: number;
    registrationStatus?: RegistrationStatus;
    user?: UserSummaryDto;
    orderIds?: Array<(number)> | null;
    sumQuantity?: number;
};

export type ProductStatisticsDto = {
    byRegistrationStatus?: ByRegistrationStatus;
};

export type ProductSummaryDto = {
    productId?: number | null;
    eventId?: number | null;
    name?: string | null;
    description?: string | null;
    more?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
    minimumQuantity?: number;
    isMandatory?: boolean | null;
    enableQuantity?: boolean;
};

export type ProductVariantDto = {
    productVariantId?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
};

export type ProductVisibility = 'Event' | 'Collection';

export type RegistrationCustomerInfoDto = {
    vatNumber?: string | null;
    name?: string | null;
    email?: string | null;
    zip?: string | null;
    city?: string | null;
    country?: string | null;
    invoiceReference?: string | null;
};

export type RegistrationDto = {
    registrationId?: number;
    eventId?: number;
    userId?: string | null;
    status?: RegistrationStatus;
    type?: RegistrationType;
    certificateId?: number | null;
    notes?: string | null;
    log?: string | null;
    user?: UserDto;
    event?: EventDto;
    products?: Array<ProductOrderDto> | null;
    orders?: Array<OrderDto> | null;
};

export type RegistrationDtoJsonPatchDocument = {
    readonly operations?: Array<RegistrationDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type RegistrationDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type RegistrationDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    readonly pages?: number;
    data?: Array<RegistrationDto> | null;
};

export type RegistrationStatus = 'Draft' | 'Cancelled' | 'Verified' | 'NotAttended' | 'Attended' | 'Finished' | 'WaitingList';

export type RegistrationType = 'Participant' | 'Student' | 'Staff' | 'Lecturer' | 'Artist';

export type RegistrationUpdateDto = {
    status?: RegistrationStatus;
    type?: RegistrationType;
    notes?: string | null;
    customer?: RegistrationCustomerInfoDto;
    paymentMethod?: PaymentProvider;
};

export type RoleRequestDto = {
    role: string;
};

export type SmsNotificationDto = {
    recipients?: Array<(string)> | null;
    eventParticipants?: EventParticipantsFilterDto;
    registrationId?: number | null;
    message: string;
};

export type UserDto = {
    id?: string | null;
    name?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    givenName?: string | null;
    middleName?: string | null;
    familyName?: string | null;
    nameVerified?: boolean;
    pictureUrl?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    birthDate?: LocalDate;
    birthDateVerified?: boolean;
    profession?: string | null;
    jobRole?: string | null;
    employer?: string | null;
    employerIdentificationNumber?: string | null;
    professionalIdentityNumber?: string | null;
    professionalIdentityNumberVerified?: boolean;
    supplementaryInformation?: string | null;
    organizationMembership?: Array<OrganizationMemberDto> | null;
    archived?: boolean;
};

export type UserDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    readonly pages?: number;
    data?: Array<UserDto> | null;
};

export type UserFormDto = {
    email: string;
    phoneNumber?: string | null;
    givenName?: string | null;
    middleName?: string | null;
    familyName?: string | null;
    nameVerified?: boolean;
    pictureUrl?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    birthDate?: LocalDate;
    birthDateVerified?: boolean;
    profession?: string | null;
    jobRole?: string | null;
    employer?: string | null;
    employerIdentificationNumber?: string | null;
    professionalIdentityNumber?: string | null;
    professionalIdentityNumberVerified?: boolean;
    supplementaryInformation?: string | null;
    archived?: boolean;
};

export type UserListOrder = 'GivenName' | 'FamilyName' | 'Email' | 'Phone';

export type UserSummaryDto = {
    userId?: string | null;
    name?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
};

export type GetV3CertificatesByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    format?: CertificateFormat;
    id: number;
};

export type GetV3CertificatesByIdResponse = CertificateDto;

export type GetV3EventByIdCertificatesData = {
    count?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    page?: number;
};

export type GetV3EventByIdCertificatesResponse = unknown;

export type GetV3EventByIdCertificatesPreviewData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type GetV3EventByIdCertificatesPreviewResponse = unknown;

export type PostV3EventByIdCertificatesIssueData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    send?: boolean;
};

export type PostV3EventByIdCertificatesIssueResponse = unknown;

export type PostV3EventByIdCertificatesUpdateData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type PostV3EventByIdCertificatesUpdateResponse = unknown;

export type GetV3EventcollectionsData = {
    count?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    page?: number;
};

export type GetV3EventcollectionsResponse = EventCollectionDtoPageResponseDto;

export type PostV3EventcollectionsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: EventCollectionCreateDto;
};

export type PostV3EventcollectionsResponse = EventCollectionDto;

export type GetV3EventcollectionsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type GetV3EventcollectionsByIdResponse = EventCollectionDto;

export type PutV3EventcollectionsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: EventCollectionDto;
};

export type PutV3EventcollectionsByIdResponse = EventCollectionDto;

export type DeleteV3EventcollectionsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type DeleteV3EventcollectionsByIdResponse = unknown;

export type PutV3EventsByEventIdCollectionsByCollectionIdData = {
    collectionId: number;
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type PutV3EventsByEventIdCollectionsByCollectionIdResponse = unknown;

export type DeleteV3EventsByEventIdCollectionsByCollectionIdData = {
    collectionId: number;
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type DeleteV3EventsByEventIdCollectionsByCollectionIdResponse = unknown;

export type GetV3EventsByEventIdProductsData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    visibility?: ProductVisibility;
};

export type GetV3EventsByEventIdProductsResponse = Array<ProductDto>;

export type PostV3EventsByEventIdProductsData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: NewProductDto;
};

export type PostV3EventsByEventIdProductsResponse = unknown;

export type PutV3EventsByEventIdProductsByProductIdData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    productId: number;
    requestBody?: ProductFormDto;
};

export type PutV3EventsByEventIdProductsByProductIdResponse = unknown;

export type DeleteV3EventsByEventIdProductsByProductIdData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    productId: number;
};

export type DeleteV3EventsByEventIdProductsByProductIdResponse = unknown;

export type GetV3EventsByEventIdProductsByProductIdVariantsData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    productId: number;
};

export type GetV3EventsByEventIdProductsByProductIdVariantsResponse = Array<ProductVariantDto>;

export type PostV3EventsByEventIdProductsByProductIdVariantsData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    productId: number;
    requestBody?: NewProductVariantDto;
};

export type PostV3EventsByEventIdProductsByProductIdVariantsResponse = unknown;

export type DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    productId: number;
};

export type DeleteV3EventsByEventIdProductsByProductIdVariantsByIdResponse = unknown;

export type GetV3EventsData = {
    collectionId?: number;
    count?: number;
    end?: LocalDate;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    includeDraftEvents?: boolean;
    includePastEvents?: boolean;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    organizationId?: number;
    page?: number;
    period?: PeriodMatchingKind;
    start?: LocalDate;
    type?: EventInfoType;
};

export type GetV3EventsResponse = EventDtoPageResponseDto;

export type PostV3EventsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * Event information.
     */
    requestBody?: EventFormDto;
};

export type PostV3EventsResponse = EventDto;

export type GetV3EventsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * The ID of the event.
     */
    id: number;
};

export type GetV3EventsByIdResponse = EventDto;

export type PutV3EventsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * The ID of the event.
     */
    id: number;
    /**
     * Updated event information.
     */
    requestBody?: EventFormDto;
};

export type PutV3EventsByIdResponse = EventDto;

export type PatchV3EventsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * The ID of the event to update.
     */
    id: number;
    /**
     * The JSON Patch document with updates.
     */
    requestBody?: EventFormDtoJsonPatchDocument;
};

export type PatchV3EventsByIdResponse = unknown;

export type DeleteV3EventsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * The ID of the event to delete.
     */
    id: number;
};

export type DeleteV3EventsByIdResponse = unknown;

export type GetV3EventsByEventIdStatisticsData = {
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type GetV3EventsByEventIdStatisticsResponse = EventStatisticsDto;

export type GetV3InvoicesByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type GetV3InvoicesByIdResponse = InvoiceDto;

export type PostV3InvoicesData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: InvoiceRequestDto;
};

export type PostV3InvoicesResponse = InvoiceDto;

export type GetV3NotificationsByIdRecipientsData = {
    count?: number;
    desc?: boolean;
    errorsOnly?: boolean;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    limit?: number;
    offset?: number;
    order?: NotificationRecipientListOrder;
    ordering?: Array<(string)>;
    page?: number;
    query?: string;
    sentOnly?: boolean;
};

export type GetV3NotificationsByIdRecipientsResponse = unknown;

export type GetV3NotificationsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    includeStatistics?: boolean;
};

export type GetV3NotificationsByIdResponse = unknown;

export type GetV3NotificationsData = {
    count?: number;
    desc?: boolean;
    eventId?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    /**
     * Whether to include delivery statistics into response.
     */
    includeStatistics?: boolean;
    limit?: number;
    offset?: number;
    order?: NotificationListOrder;
    ordering?: Array<(string)>;
    page?: number;
    productId?: number;
    recipientUserId?: string;
    status?: NotificationStatus;
    type?: NotificationType;
};

export type GetV3NotificationsResponse = unknown;

export type PostV3NotificationsEmailData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: EmailNotificationDto;
};

export type PostV3NotificationsEmailResponse = NotificationDto;

export type PostV3NotificationsSmsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: SmsNotificationDto;
};

export type PostV3NotificationsSmsResponse = NotificationDto;

export type GetV3OnlinecoursesData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type GetV3OnlinecoursesResponse = Array<OnlineCourseDto>;

export type GetV3OnlinecoursesByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type GetV3OnlinecoursesByIdResponse = OnlineCourseDto;

export type GetV3OrdersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    includeRegistration?: boolean;
    includeUser?: boolean;
};

export type GetV3OrdersByIdResponse = OrderDto;

export type PatchV3OrdersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: unknown;
};

export type PatchV3OrdersByIdResponse = unknown;

export type PutV3OrdersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: OrderUpdateRequestDto;
};

export type PutV3OrdersByIdResponse = unknown;

export type DeleteV3OrdersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type DeleteV3OrdersByIdResponse = unknown;

export type GetV3OrdersData = {
    count?: number;
    eventId?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    includeRegistration?: boolean;
    includeUser?: boolean;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    organizationId?: number;
    page?: number;
    registrationId?: number;
    status?: OrderStatus;
    userId?: string;
};

export type GetV3OrdersResponse = unknown;

export type PostV3OrdersData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: NewOrderRequestDto;
};

export type PostV3OrdersResponse = unknown;

export type GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    userId: string;
};

export type GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = Array<(string)>;

export type PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    requestBody?: RoleRequestDto;
    userId: string;
};

export type PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = Array<(string)>;

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    requestBody?: RoleRequestDto;
    userId: string;
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = Array<(string)>;

export type PutV3OrganizationsByOrganizationIdMembersByUserIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    userId: string;
};

export type PutV3OrganizationsByOrganizationIdMembersByUserIdResponse = unknown;

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    userId: string;
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdResponse = unknown;

export type GetV3OrganizationsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type GetV3OrganizationsResponse = Array<OrganizationDto>;

export type PostV3OrganizationsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: OrganizationFormDto;
};

export type PostV3OrganizationsResponse = OrganizationDto;

export type GetV3OrganizationsByOrganizationIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
};

export type GetV3OrganizationsByOrganizationIdResponse = OrganizationDto;

export type PutV3OrganizationsByOrganizationIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    requestBody?: OrganizationFormDto;
};

export type PutV3OrganizationsByOrganizationIdResponse = OrganizationDto;

export type DeleteV3OrganizationsByOrganizationIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
};

export type DeleteV3OrganizationsByOrganizationIdResponse = unknown;

export type GetV3OrganizationsByOrganizationIdSettingsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
};

export type GetV3OrganizationsByOrganizationIdSettingsResponse = Array<OrganizationSettingDto>;

export type PutV3OrganizationsByOrganizationIdSettingsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    requestBody?: OrganizationSettingValueDto;
};

export type PutV3OrganizationsByOrganizationIdSettingsResponse = unknown;

export type PostV3OrganizationsByOrganizationIdSettingsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    organizationId: number;
    requestBody: Array<OrganizationSettingValueDto>;
};

export type PostV3OrganizationsByOrganizationIdSettingsResponse = unknown;

export type GetV3ProductsByProductIdSummaryData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    productId: number;
};

export type GetV3ProductsByProductIdSummaryResponse = ProductDeliverySummaryDto;

export type PostV3RegistrationsByIdCertificateSendData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type PostV3RegistrationsByIdCertificateSendResponse = unknown;

export type GetV3RegistrationsByIdOrdersData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type GetV3RegistrationsByIdOrdersResponse = Array<OrderDto>;

export type PostV3RegistrationsByIdOrdersData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: NewRegistrationOrderDto;
};

export type PostV3RegistrationsByIdOrdersResponse = unknown;

export type PostV3RegistrationsByIdProductsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: OrderUpdateRequestDto;
};

export type PostV3RegistrationsByIdProductsResponse = unknown;

export type GetV3RegistrationsData = {
    count?: number;
    eventId?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    includeEventInfo?: boolean;
    includeOrders?: boolean;
    includeProducts?: boolean;
    includeUserInfo?: boolean;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    page?: number;
    userId?: string;
};

export type GetV3RegistrationsResponse = RegistrationDtoPageResponseDto;

export type PostV3RegistrationsData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: NewRegistrationDto;
};

export type PostV3RegistrationsResponse = RegistrationDto;

export type GetV3RegistrationsByIdData = {
    count?: number;
    eventId?: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    includeEventInfo?: boolean;
    includeOrders?: boolean;
    includeProducts?: boolean;
    includeUserInfo?: boolean;
    limit?: number;
    offset?: number;
    ordering?: Array<(string)>;
    page?: number;
    userId?: string;
};

export type GetV3RegistrationsByIdResponse = RegistrationDto;

export type PutV3RegistrationsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: RegistrationUpdateDto;
};

export type PutV3RegistrationsByIdResponse = RegistrationDto;

export type PatchV3RegistrationsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
    requestBody?: unknown;
};

export type PatchV3RegistrationsByIdResponse = unknown;

export type DeleteV3RegistrationsByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: number;
};

export type DeleteV3RegistrationsByIdResponse = unknown;

export type PostV3RegistrationsMeByEventIdData = {
    createOrder?: boolean;
    eventId: number;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type PostV3RegistrationsMeByEventIdResponse = RegistrationDto;

export type GetV3UserprofileData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type GetV3UserprofileResponse = UserDto;

export type PutV3UserprofileData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id?: string;
    requestBody?: UserFormDto;
};

export type PutV3UserprofileResponse = UserDto;

export type GetV3UsersMeData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
};

export type GetV3UsersMeResponse = UserDto;

export type GetV3UsersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: string;
};

export type GetV3UsersByIdResponse = UserDto;

export type PutV3UsersByIdData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    id: string;
    requestBody?: UserFormDto;
};

export type PutV3UsersByIdResponse = UserDto;

export type GetV3UsersData = {
    count?: number;
    descending?: boolean;
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    includeOrgMembership?: boolean;
    limit?: number;
    offset?: number;
    order?: UserListOrder;
    ordering?: Array<(string)>;
    organizationId?: number;
    page?: number;
    query?: string;
};

export type GetV3UsersResponse = UserDtoPageResponseDto;

export type PostV3UsersData = {
    /**
     * Optional organization Id. Will be required in API version 4.
     */
    eventurasOrgId?: number;
    requestBody?: UserFormDto;
};

export type PostV3UsersResponse = UserDto;

export type $OpenApiTs = {
    '/v3/certificates/{id}': {
        get: {
            req: GetV3CertificatesByIdData;
            res: {
                /**
                 * Success
                 */
                200: CertificateDto;
            };
        };
    };
    '/v3/event/{id}/certificates': {
        get: {
            req: GetV3EventByIdCertificatesData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/event/{id}/certificates/preview': {
        get: {
            req: GetV3EventByIdCertificatesPreviewData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/event/{id}/certificates/issue': {
        post: {
            req: PostV3EventByIdCertificatesIssueData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/event/{id}/certificates/update': {
        post: {
            req: PostV3EventByIdCertificatesUpdateData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/eventcollections': {
        get: {
            req: GetV3EventcollectionsData;
            res: {
                /**
                 * Success
                 */
                200: EventCollectionDtoPageResponseDto;
            };
        };
        post: {
            req: PostV3EventcollectionsData;
            res: {
                /**
                 * Success
                 */
                200: EventCollectionDto;
            };
        };
    };
    '/v3/eventcollections/{id}': {
        get: {
            req: GetV3EventcollectionsByIdData;
            res: {
                /**
                 * Success
                 */
                200: EventCollectionDto;
            };
        };
        put: {
            req: PutV3EventcollectionsByIdData;
            res: {
                /**
                 * Success
                 */
                200: EventCollectionDto;
            };
        };
        delete: {
            req: DeleteV3EventcollectionsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/collections/{collectionId}': {
        put: {
            req: PutV3EventsByEventIdCollectionsByCollectionIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3EventsByEventIdCollectionsByCollectionIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/products': {
        get: {
            req: GetV3EventsByEventIdProductsData;
            res: {
                /**
                 * Success
                 */
                200: Array<ProductDto>;
            };
        };
        post: {
            req: PostV3EventsByEventIdProductsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/products/{productId}': {
        put: {
            req: PutV3EventsByEventIdProductsByProductIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3EventsByEventIdProductsByProductIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/products/{productId}/variants': {
        get: {
            req: GetV3EventsByEventIdProductsByProductIdVariantsData;
            res: {
                /**
                 * Success
                 */
                200: Array<ProductVariantDto>;
            };
        };
        post: {
            req: PostV3EventsByEventIdProductsByProductIdVariantsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/products/{productId}/variants/{id}': {
        delete: {
            req: DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events': {
        get: {
            req: GetV3EventsData;
            res: {
                /**
                 * Success
                 */
                200: EventDtoPageResponseDto;
            };
        };
        post: {
            req: PostV3EventsData;
            res: {
                /**
                 * Success
                 */
                200: EventDto;
            };
        };
    };
    '/v3/events/{id}': {
        get: {
            req: GetV3EventsByIdData;
            res: {
                /**
                 * Success
                 */
                200: EventDto;
            };
        };
        put: {
            req: PutV3EventsByIdData;
            res: {
                /**
                 * Success
                 */
                200: EventDto;
            };
        };
        patch: {
            req: PatchV3EventsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3EventsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/events/{eventId}/statistics': {
        get: {
            req: GetV3EventsByEventIdStatisticsData;
            res: {
                /**
                 * Success
                 */
                200: EventStatisticsDto;
            };
        };
    };
    '/v3/invoices/{id}': {
        get: {
            req: GetV3InvoicesByIdData;
            res: {
                /**
                 * Success
                 */
                200: InvoiceDto;
            };
        };
    };
    '/v3/invoices': {
        post: {
            req: PostV3InvoicesData;
            res: {
                /**
                 * Success
                 */
                200: InvoiceDto;
            };
        };
    };
    '/v3/notifications/{id}/recipients': {
        get: {
            req: GetV3NotificationsByIdRecipientsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/notifications/{id}': {
        get: {
            req: GetV3NotificationsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/notifications': {
        get: {
            req: GetV3NotificationsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/notifications/email': {
        post: {
            req: PostV3NotificationsEmailData;
            res: {
                /**
                 * Success
                 */
                200: NotificationDto;
            };
        };
    };
    '/v3/notifications/sms': {
        post: {
            req: PostV3NotificationsSmsData;
            res: {
                /**
                 * Success
                 */
                200: NotificationDto;
            };
        };
    };
    '/v3/onlinecourses': {
        get: {
            req: GetV3OnlinecoursesData;
            res: {
                /**
                 * Success
                 */
                200: Array<OnlineCourseDto>;
            };
        };
    };
    '/v3/onlinecourses/{id}': {
        get: {
            req: GetV3OnlinecoursesByIdData;
            res: {
                /**
                 * Success
                 */
                200: OnlineCourseDto;
            };
        };
    };
    '/v3/orders/{id}': {
        get: {
            req: GetV3OrdersByIdData;
            res: {
                /**
                 * Success
                 */
                200: OrderDto;
            };
        };
        patch: {
            req: PatchV3OrdersByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        put: {
            req: PutV3OrdersByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3OrdersByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/orders': {
        get: {
            req: GetV3OrdersData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        post: {
            req: PostV3OrdersData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/organizations/{organizationId}/members/{userId}/roles': {
        get: {
            req: GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData;
            res: {
                /**
                 * Success
                 */
                200: Array<(string)>;
            };
        };
        post: {
            req: PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData;
            res: {
                /**
                 * Success
                 */
                200: Array<(string)>;
            };
        };
        delete: {
            req: DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData;
            res: {
                /**
                 * Success
                 */
                200: Array<(string)>;
            };
        };
    };
    '/v3/organizations/{organizationId}/members/{userId}': {
        put: {
            req: PutV3OrganizationsByOrganizationIdMembersByUserIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3OrganizationsByOrganizationIdMembersByUserIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/organizations': {
        get: {
            req: GetV3OrganizationsData;
            res: {
                /**
                 * Success
                 */
                200: Array<OrganizationDto>;
            };
        };
        post: {
            req: PostV3OrganizationsData;
            res: {
                /**
                 * Success
                 */
                200: OrganizationDto;
            };
        };
    };
    '/v3/organizations/{organizationId}': {
        get: {
            req: GetV3OrganizationsByOrganizationIdData;
            res: {
                /**
                 * Success
                 */
                200: OrganizationDto;
            };
        };
        put: {
            req: PutV3OrganizationsByOrganizationIdData;
            res: {
                /**
                 * Success
                 */
                200: OrganizationDto;
            };
        };
        delete: {
            req: DeleteV3OrganizationsByOrganizationIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/organizations/{organizationId}/settings': {
        get: {
            req: GetV3OrganizationsByOrganizationIdSettingsData;
            res: {
                /**
                 * Success
                 */
                200: Array<OrganizationSettingDto>;
            };
        };
        put: {
            req: PutV3OrganizationsByOrganizationIdSettingsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        post: {
            req: PostV3OrganizationsByOrganizationIdSettingsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/products/{productId}/summary': {
        get: {
            req: GetV3ProductsByProductIdSummaryData;
            res: {
                /**
                 * Success
                 */
                200: ProductDeliverySummaryDto;
            };
        };
    };
    '/v3/registrations/{id}/certificate/send': {
        post: {
            req: PostV3RegistrationsByIdCertificateSendData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/registrations/{id}/orders': {
        get: {
            req: GetV3RegistrationsByIdOrdersData;
            res: {
                /**
                 * Success
                 */
                200: Array<OrderDto>;
            };
        };
        post: {
            req: PostV3RegistrationsByIdOrdersData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/registrations/{id}/products': {
        post: {
            req: PostV3RegistrationsByIdProductsData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/registrations': {
        get: {
            req: GetV3RegistrationsData;
            res: {
                /**
                 * Success
                 */
                200: RegistrationDtoPageResponseDto;
                /**
                 * Bad Request
                 */
                400: ProblemDetails;
            };
        };
        post: {
            req: PostV3RegistrationsData;
            res: {
                /**
                 * Success
                 */
                200: RegistrationDto;
            };
        };
    };
    '/v3/registrations/{id}': {
        get: {
            req: GetV3RegistrationsByIdData;
            res: {
                /**
                 * Success
                 */
                200: RegistrationDto;
            };
        };
        put: {
            req: PutV3RegistrationsByIdData;
            res: {
                /**
                 * Success
                 */
                200: RegistrationDto;
            };
        };
        patch: {
            req: PatchV3RegistrationsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
        delete: {
            req: DeleteV3RegistrationsByIdData;
            res: {
                /**
                 * Success
                 */
                200: unknown;
            };
        };
    };
    '/v3/registrations/me/{eventId}': {
        post: {
            req: PostV3RegistrationsMeByEventIdData;
            res: {
                /**
                 * Success
                 */
                200: RegistrationDto;
            };
        };
    };
    '/v3/userprofile': {
        get: {
            req: GetV3UserprofileData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
        put: {
            req: PutV3UserprofileData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
    };
    '/v3/users/me': {
        get: {
            req: GetV3UsersMeData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
    };
    '/v3/users/{id}': {
        get: {
            req: GetV3UsersByIdData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
        put: {
            req: PutV3UsersByIdData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
    };
    '/v3/users': {
        get: {
            req: GetV3UsersData;
            res: {
                /**
                 * Success
                 */
                200: UserDtoPageResponseDto;
            };
        };
        post: {
            req: PostV3UsersData;
            res: {
                /**
                 * Success
                 */
                200: UserDto;
            };
        };
    };
};
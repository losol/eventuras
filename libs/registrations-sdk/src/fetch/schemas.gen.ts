// This file is auto-generated by @hey-api/openapi-ts

export const $ByRegistrationStatus = {
    type: 'object',
    properties: {
        draft: {
            type: 'integer',
            format: 'int32'
        },
        cancelled: {
            type: 'integer',
            format: 'int32'
        },
        verified: {
            type: 'integer',
            format: 'int32'
        },
        notAttended: {
            type: 'integer',
            format: 'int32'
        },
        attended: {
            type: 'integer',
            format: 'int32'
        },
        finished: {
            type: 'integer',
            format: 'int32'
        },
        waitingList: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ByStatus = {
    type: 'object',
    properties: {
        draft: {
            type: 'integer',
            format: 'int32'
        },
        cancelled: {
            type: 'integer',
            format: 'int32'
        },
        verified: {
            type: 'integer',
            format: 'int32'
        },
        notAttended: {
            type: 'integer',
            format: 'int32'
        },
        attended: {
            type: 'integer',
            format: 'int32'
        },
        finished: {
            type: 'integer',
            format: 'int32'
        },
        waitingList: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ByType = {
    type: 'object',
    properties: {
        participant: {
            type: 'integer',
            format: 'int32'
        },
        student: {
            type: 'integer',
            format: 'int32'
        },
        staff: {
            type: 'integer',
            format: 'int32'
        },
        lecturer: {
            type: 'integer',
            format: 'int32'
        },
        artist: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $CalendarSystem = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        minYear: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        maxYear: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        eras: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Era'
            },
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $CertificateDto = {
    type: 'object',
    properties: {
        certificateId: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        certificateGuid: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        title: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        comment: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        recipientName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        evidenceDescription: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        issuedInCity: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        issuingDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        issuerOrganizationName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        issuerOrganizationLogoBase64: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        issuerPersonName: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        issuerPersonSignatureImageBase64: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $CertificateFormat = {
    enum: ['Json', 'Html', 'Pdf'],
    type: 'string'
} as const;

export const $EmailNotificationDto = {
    required: ['bodyMarkdown', 'subject'],
    type: 'object',
    properties: {
        recipients: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        eventParticipants: {
            '$ref': '#/components/schemas/EventParticipantsFilterDto'
        },
        subject: {
            minLength: 3,
            type: 'string'
        },
        registrationId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        bodyMarkdown: {
            minLength: 10,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $Era = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $EventCollectionCreateDto = {
    required: ['name', 'organizationId'],
    type: 'object',
    properties: {
        organizationId: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        slug: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        featured: {
            type: 'boolean'
        },
        featuredImageUrl: {
            type: 'string',
            nullable: true
        },
        featuredImageCaption: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventCollectionDto = {
    required: ['name', 'organizationId'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        organizationId: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        slug: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        featured: {
            type: 'boolean'
        },
        featuredImageUrl: {
            type: 'string',
            nullable: true
        },
        featuredImageCaption: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventCollectionDtoPageResponseDto = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        count: {
            type: 'integer',
            format: 'int32'
        },
        total: {
            type: 'integer',
            format: 'int32'
        },
        pages: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventCollectionDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        type: {
            '$ref': '#/components/schemas/EventInfoType'
        },
        status: {
            '$ref': '#/components/schemas/EventInfoStatus'
        },
        title: {
            type: 'string',
            nullable: true
        },
        slug: {
            type: 'string',
            nullable: true
        },
        category: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        featured: {
            type: 'boolean'
        },
        program: {
            type: 'string',
            nullable: true
        },
        practicalInformation: {
            type: 'string',
            nullable: true
        },
        location: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        onDemand: {
            type: 'boolean'
        },
        dateStart: {
            '$ref': '#/components/schemas/LocalDate'
        },
        dateEnd: {
            '$ref': '#/components/schemas/LocalDate'
        },
        lastRegistrationDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        lastCancellationDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        featuredImageUrl: {
            type: 'string',
            nullable: true
        },
        featuredImageCaption: {
            type: 'string',
            nullable: true
        },
        headline: {
            type: 'string',
            nullable: true
        },
        published: {
            type: 'boolean'
        },
        moreInformation: {
            type: 'string',
            nullable: true
        },
        welcomeLetter: {
            type: 'string',
            nullable: true
        },
        informationRequest: {
            type: 'string',
            nullable: true
        },
        certificateTitle: {
            type: 'string',
            nullable: true
        },
        certificateDescription: {
            type: 'string',
            nullable: true
        },
        projectCode: {
            type: 'string',
            nullable: true
        },
        organizerUserId: {
            type: 'string',
            nullable: true
        },
        maxParticipants: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        externalInfoPageUrl: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventDtoPageResponseDto = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        count: {
            type: 'integer',
            format: 'int32'
        },
        total: {
            type: 'integer',
            format: 'int32'
        },
        pages: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventFormDto = {
    required: ['slug', 'title'],
    type: 'object',
    properties: {
        title: {
            minLength: 1,
            type: 'string'
        },
        slug: {
            minLength: 1,
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/EventInfoType'
        },
        status: {
            '$ref': '#/components/schemas/EventInfoStatus'
        },
        organizationId: {
            type: 'integer',
            format: 'int32'
        },
        headline: {
            type: 'string',
            nullable: true
        },
        moreInformation: {
            type: 'string',
            nullable: true
        },
        category: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        manageRegistrations: {
            type: 'boolean'
        },
        onDemand: {
            type: 'boolean'
        },
        featured: {
            type: 'boolean'
        },
        program: {
            type: 'string',
            nullable: true
        },
        practicalInformation: {
            type: 'string',
            nullable: true
        },
        location: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        dateStart: {
            '$ref': '#/components/schemas/LocalDate'
        },
        dateEnd: {
            '$ref': '#/components/schemas/LocalDate'
        },
        welcomeLetter: {
            type: 'string',
            nullable: true
        },
        published: {
            type: 'boolean'
        },
        externalInfoPageUrl: {
            type: 'string',
            nullable: true
        },
        externalRegistrationsUrl: {
            type: 'string',
            nullable: true
        },
        informationRequest: {
            type: 'string',
            nullable: true
        },
        lastRegistrationDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        lastCancellationDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        maxParticipants: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        certificateTitle: {
            type: 'string',
            nullable: true
        },
        certificateDescription: {
            type: 'string',
            nullable: true
        },
        featuredImageUrl: {
            type: 'string',
            nullable: true
        },
        featuredImageCaption: {
            type: 'string',
            nullable: true
        },
        projectCode: {
            type: 'string',
            nullable: true
        },
        organizerUserId: {
            type: 'string',
            nullable: true
        },
        options: {
            '$ref': '#/components/schemas/EventInfoOptionsDto'
        }
    },
    additionalProperties: false,
    description: `Data Transfer Object (DTO) for Event Information.
Used for API between the backend and the frontend.`
} as const;

export const $EventFormDtoJsonPatchDocument = {
    type: 'object',
    properties: {
        operations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventFormDtoOperation'
            },
            nullable: true,
            readOnly: true
        },
        contractResolver: {
            '$ref': '#/components/schemas/IContractResolver'
        }
    },
    additionalProperties: false
} as const;

export const $EventFormDtoOperation = {
    type: 'object',
    properties: {
        operationType: {
            '$ref': '#/components/schemas/OperationType'
        },
        path: {
            type: 'string',
            nullable: true
        },
        op: {
            type: 'string',
            nullable: true
        },
        from: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $EventInfoOptionsDto = {
    type: 'object',
    properties: {
        registrationPolicy: {
            '$ref': '#/components/schemas/EventInfoRegistrationPolicyDto'
        }
    },
    additionalProperties: false
} as const;

export const $EventInfoRegistrationPolicyDto = {
    type: 'object',
    properties: {
        allowedRegistrationEditHours: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        allowModificationsAfterCancellationDue: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $EventInfoStatus = {
    enum: ['Draft', 'Planned', 'RegistrationsOpen', 'WaitingList', 'RegistrationsClosed', 'Finished', 'Archived', 'Cancelled'],
    type: 'string'
} as const;

export const $EventInfoType = {
    enum: ['Course', 'Conference', 'OnlineCourse', 'Social', 'Other'],
    type: 'string'
} as const;

export const $EventParticipantsFilterDto = {
    type: 'object',
    properties: {
        eventId: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        productId: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        registrationStatuses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegistrationStatus'
            },
            nullable: true
        },
        registrationTypes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegistrationType'
            },
            nullable: true
        },
        isDefined: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $EventStatisticsDto = {
    type: 'object',
    properties: {
        byStatus: {
            '$ref': '#/components/schemas/ByStatus'
        },
        byType: {
            '$ref': '#/components/schemas/ByType'
        }
    },
    additionalProperties: false
} as const;

export const $IContractResolver = {
    type: 'object',
    additionalProperties: false
} as const;

export const $Instant = {
    type: 'object',
    additionalProperties: false
} as const;

export const $InvoiceDto = {
    type: 'object',
    properties: {
        invoiceId: {
            type: 'integer',
            format: 'int32'
        },
        externalInvoiceId: {
            type: 'string',
            nullable: true
        },
        paid: {
            type: 'boolean'
        },
        orderIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $InvoiceRequestDto = {
    type: 'object',
    properties: {
        orderIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IsoDayOfWeek = {
    enum: ['None', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
    type: 'string'
} as const;

export const $LocalDate = {
    type: 'object',
    properties: {
        calendar: {
            '$ref': '#/components/schemas/CalendarSystem'
        },
        year: {
            type: 'integer',
            format: 'int32'
        },
        month: {
            type: 'integer',
            format: 'int32'
        },
        day: {
            type: 'integer',
            format: 'int32'
        },
        dayOfWeek: {
            '$ref': '#/components/schemas/IsoDayOfWeek'
        },
        yearOfEra: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        era: {
            '$ref': '#/components/schemas/Era'
        },
        dayOfYear: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NewOrderRequestDto = {
    required: ['lines', 'registrationId'],
    type: 'object',
    properties: {
        lines: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderLineModel'
            }
        },
        registrationId: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewProductDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        more: {
            type: 'string',
            nullable: true
        },
        price: {
            minimum: 0,
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            maximum: 99,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        },
        visibility: {
            '$ref': '#/components/schemas/ProductVisibility'
        }
    },
    additionalProperties: false
} as const;

export const $NewProductVariantDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            minimum: 0,
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            maximum: 99,
            minimum: 0,
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewRegistrationDto = {
    required: ['eventId', 'userId'],
    type: 'object',
    properties: {
        customer: {
            '$ref': '#/components/schemas/RegistrationCustomerInfoDto'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        type: {
            '$ref': '#/components/schemas/RegistrationType'
        },
        paymentMethod: {
            '$ref': '#/components/schemas/PaymentProvider'
        },
        empty: {
            type: 'boolean',
            readOnly: true
        },
        userId: {
            minLength: 1,
            type: 'string'
        },
        eventId: {
            maximum: 2147483647,
            minimum: 1,
            type: 'integer',
            format: 'int32'
        },
        createOrder: {
            type: 'boolean'
        },
        sendWelcomeLetter: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $NewRegistrationOrderDto = {
    required: ['items'],
    type: 'object',
    properties: {
        items: {
            minItems: 1,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderLineModel'
            }
        }
    },
    additionalProperties: false
} as const;

export const $NotificationDto = {
    type: 'object',
    properties: {
        notificationId: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        organizationId: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        eventId: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        productId: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        registrationId: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        message: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        created: {
            '$ref': '#/components/schemas/Instant'
        },
        statusUpdated: {
            '$ref': '#/components/schemas/Instant'
        },
        type: {
            '$ref': '#/components/schemas/NotificationType'
        },
        status: {
            '$ref': '#/components/schemas/NotificationStatus'
        },
        statistics: {
            '$ref': '#/components/schemas/NotificationStatisticsDto'
        }
    },
    additionalProperties: false
} as const;

export const $NotificationListOrder = {
    enum: ['Created', 'StatusUpdated'],
    type: 'string'
} as const;

export const $NotificationRecipientListOrder = {
    enum: ['Created', 'Sent', 'Name', 'Identifier'],
    type: 'string'
} as const;

export const $NotificationStatisticsDto = {
    type: 'object',
    properties: {
        sent: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        errors: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        recipients: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NotificationStatus = {
    enum: ['New', 'Queued', 'Started', 'Cancelled', 'Failed', 'Sent'],
    type: 'string'
} as const;

export const $NotificationType = {
    enum: ['Email', 'Sms'],
    type: 'string'
} as const;

export const $OnlineCourseDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        slug: {
            type: 'string',
            nullable: true
        },
        featured: {
            type: 'boolean'
        },
        onDemand: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $OperationType = {
    enum: ['Add', 'Remove', 'Replace', 'Move', 'Copy', 'Test', 'Invalid'],
    type: 'string'
} as const;

export const $OrderDto = {
    type: 'object',
    properties: {
        orderId: {
            type: 'integer',
            format: 'int32'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        time: {
            type: 'string',
            format: 'date-time'
        },
        userId: {
            type: 'string',
            nullable: true
        },
        registrationId: {
            type: 'integer',
            format: 'int32'
        },
        paymentMethod: {
            '$ref': '#/components/schemas/PaymentProvider'
        },
        comments: {
            type: 'string',
            nullable: true
        },
        log: {
            type: 'string',
            nullable: true
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderLineDto'
            },
            nullable: true
        },
        registration: {
            '$ref': '#/components/schemas/RegistrationDto'
        },
        user: {
            '$ref': '#/components/schemas/UserDto'
        }
    },
    additionalProperties: false
} as const;

export const $OrderDtoJsonPatchDocument = {
    type: 'object',
    properties: {
        operations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderDtoOperation'
            },
            nullable: true,
            readOnly: true
        },
        contractResolver: {
            '$ref': '#/components/schemas/IContractResolver'
        }
    },
    additionalProperties: false
} as const;

export const $OrderDtoOperation = {
    type: 'object',
    properties: {
        operationType: {
            '$ref': '#/components/schemas/OperationType'
        },
        path: {
            type: 'string',
            nullable: true
        },
        op: {
            type: 'string',
            nullable: true
        },
        from: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $OrderLineDto = {
    type: 'object',
    properties: {
        orderLineId: {
            type: 'integer',
            format: 'int32'
        },
        product: {
            '$ref': '#/components/schemas/ProductDto'
        },
        productVariant: {
            '$ref': '#/components/schemas/ProductVariantDto'
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $OrderLineModel = {
    type: 'object',
    properties: {
        productId: {
            type: 'integer',
            format: 'int32'
        },
        productVariantId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $OrderStatus = {
    enum: ['Draft', 'Verified', 'Invoiced', 'Cancelled', 'Refunded'],
    type: 'string'
} as const;

export const $OrderUpdateRequestDto = {
    required: ['lines'],
    type: 'object',
    properties: {
        lines: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderLineModel'
            }
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationDto = {
    type: 'object',
    properties: {
        organizationId: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        url: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        phone: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        email: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        logoUrl: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        logoBase64: {
            type: 'string',
            nullable: true,
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationFormDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        description: {
            type: 'string',
            nullable: true
        },
        url: {
            type: 'string',
            nullable: true
        },
        phone: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        logoUrl: {
            type: 'string',
            nullable: true
        },
        logoBase64: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationMemberDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int32'
        },
        userId: {
            type: 'string',
            nullable: true
        },
        organizationId: {
            type: 'integer',
            format: 'int32'
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrganizationMemberRoleDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationMemberRoleDto = {
    type: 'object',
    properties: {
        organizationMemberId: {
            type: 'integer',
            format: 'int32'
        },
        role: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationSettingDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        section: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        description: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        type: {
            '$ref': '#/components/schemas/OrganizationSettingType'
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $OrganizationSettingType = {
    enum: ['String', 'Number', 'Url', 'Email', 'Boolean'],
    type: 'string'
} as const;

export const $OrganizationSettingValueDto = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            minLength: 1,
            type: 'string'
        },
        value: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $PaymentProvider = {
    enum: ['EmailInvoice', 'PowerOfficeEmailInvoice', 'PowerOfficeEHFInvoice', 'StripeInvoice', 'StripeDirect', 'VippsInvoice', 'VippsDirect'],
    type: 'string'
} as const;

export const $PeriodMatchingKind = {
    enum: ['Match', 'Intersect', 'Contain'],
    type: 'string'
} as const;

export const $ProblemDetails = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: {}
} as const;

export const $ProductDeliverySummaryDto = {
    type: 'object',
    properties: {
        product: {
            '$ref': '#/components/schemas/ProductSummaryDto'
        },
        orderSummary: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductOrdersSummaryDto'
            },
            nullable: true
        },
        statistics: {
            '$ref': '#/components/schemas/ProductStatisticsDto'
        }
    },
    additionalProperties: false
} as const;

export const $ProductDto = {
    type: 'object',
    properties: {
        productId: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            type: 'integer',
            format: 'int32'
        },
        visibility: {
            '$ref': '#/components/schemas/ProductVisibility'
        },
        inventory: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        published: {
            type: 'boolean',
            nullable: true
        },
        variants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductVariantDto'
            },
            nullable: true
        },
        minimumQuantity: {
            type: 'integer',
            format: 'int32'
        },
        isMandatory: {
            type: 'boolean',
            readOnly: true
        },
        enableQuantity: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $ProductFormDto = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            type: 'integer',
            format: 'int32'
        },
        enableQuantity: {
            type: 'boolean'
        },
        minimumQuantity: {
            type: 'integer',
            format: 'int32'
        },
        inventory: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        published: {
            type: 'boolean',
            nullable: true
        },
        visibility: {
            '$ref': '#/components/schemas/ProductVisibility'
        }
    },
    additionalProperties: false
} as const;

export const $ProductOrderDto = {
    type: 'object',
    properties: {
        productId: {
            type: 'integer',
            format: 'int32'
        },
        productVariantId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        product: {
            '$ref': '#/components/schemas/ProductDto'
        },
        productVariant: {
            '$ref': '#/components/schemas/ProductVariantDto'
        },
        quantity: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ProductOrdersSummaryDto = {
    type: 'object',
    properties: {
        registrationId: {
            type: 'integer',
            format: 'int32'
        },
        registrationStatus: {
            '$ref': '#/components/schemas/RegistrationStatus'
        },
        user: {
            '$ref': '#/components/schemas/UserSummaryDto'
        },
        orderIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int32'
            },
            nullable: true
        },
        sumQuantity: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ProductStatisticsDto = {
    type: 'object',
    properties: {
        byRegistrationStatus: {
            '$ref': '#/components/schemas/ByRegistrationStatus'
        }
    },
    additionalProperties: false
} as const;

export const $ProductSummaryDto = {
    type: 'object',
    properties: {
        productId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        eventId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        more: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            type: 'number',
            format: 'double'
        },
        visibility: {
            '$ref': '#/components/schemas/ProductVisibility'
        },
        minimumQuantity: {
            type: 'integer',
            format: 'int32'
        },
        isMandatory: {
            type: 'boolean',
            nullable: true
        },
        enableQuantity: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $ProductVariantDto = {
    type: 'object',
    properties: {
        productVariantId: {
            type: 'integer',
            format: 'int32'
        },
        name: {
            type: 'string',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        price: {
            type: 'number',
            format: 'double'
        },
        vatPercent: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $ProductVisibility = {
    enum: ['Event', 'Collection'],
    type: 'string'
} as const;

export const $RegistrationCustomerInfoDto = {
    type: 'object',
    properties: {
        vatNumber: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        zip: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        invoiceReference: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RegistrationDto = {
    type: 'object',
    properties: {
        registrationId: {
            type: 'integer',
            format: 'int32'
        },
        eventId: {
            type: 'integer',
            format: 'int32'
        },
        userId: {
            type: 'string',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/RegistrationStatus'
        },
        type: {
            '$ref': '#/components/schemas/RegistrationType'
        },
        certificateId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        notes: {
            type: 'string',
            nullable: true
        },
        log: {
            type: 'string',
            nullable: true
        },
        user: {
            '$ref': '#/components/schemas/UserDto'
        },
        event: {
            '$ref': '#/components/schemas/EventDto'
        },
        products: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductOrderDto'
            },
            nullable: true
        },
        orders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RegistrationDtoJsonPatchDocument = {
    type: 'object',
    properties: {
        operations: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegistrationDtoOperation'
            },
            nullable: true,
            readOnly: true
        },
        contractResolver: {
            '$ref': '#/components/schemas/IContractResolver'
        }
    },
    additionalProperties: false
} as const;

export const $RegistrationDtoOperation = {
    type: 'object',
    properties: {
        operationType: {
            '$ref': '#/components/schemas/OperationType'
        },
        path: {
            type: 'string',
            nullable: true
        },
        op: {
            type: 'string',
            nullable: true
        },
        from: {
            type: 'string',
            nullable: true
        },
        value: {
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RegistrationDtoPageResponseDto = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        count: {
            type: 'integer',
            format: 'int32'
        },
        total: {
            type: 'integer',
            format: 'int32'
        },
        pages: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RegistrationDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $RegistrationStatus = {
    enum: ['Draft', 'Cancelled', 'Verified', 'NotAttended', 'Attended', 'Finished', 'WaitingList'],
    type: 'string'
} as const;

export const $RegistrationType = {
    enum: ['Participant', 'Student', 'Staff', 'Lecturer', 'Artist'],
    type: 'string'
} as const;

export const $RegistrationUpdateDto = {
    type: 'object',
    properties: {
        status: {
            '$ref': '#/components/schemas/RegistrationStatus'
        },
        type: {
            '$ref': '#/components/schemas/RegistrationType'
        },
        notes: {
            type: 'string',
            nullable: true
        },
        customer: {
            '$ref': '#/components/schemas/RegistrationCustomerInfoDto'
        },
        paymentMethod: {
            '$ref': '#/components/schemas/PaymentProvider'
        }
    },
    additionalProperties: false
} as const;

export const $RoleRequestDto = {
    required: ['role'],
    type: 'object',
    properties: {
        role: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $SmsNotificationDto = {
    required: ['message'],
    type: 'object',
    properties: {
        recipients: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        eventParticipants: {
            '$ref': '#/components/schemas/EventParticipantsFilterDto'
        },
        registrationId: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        message: {
            minLength: 10,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $UserDto = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        givenName: {
            type: 'string',
            nullable: true
        },
        middleName: {
            type: 'string',
            nullable: true
        },
        familyName: {
            type: 'string',
            nullable: true
        },
        nameVerified: {
            type: 'boolean'
        },
        pictureUrl: {
            type: 'string',
            nullable: true
        },
        addressLine1: {
            type: 'string',
            nullable: true
        },
        addressLine2: {
            type: 'string',
            nullable: true
        },
        zipCode: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        birthDateVerified: {
            type: 'boolean'
        },
        profession: {
            type: 'string',
            nullable: true
        },
        jobRole: {
            type: 'string',
            nullable: true
        },
        employer: {
            type: 'string',
            nullable: true
        },
        employerIdentificationNumber: {
            type: 'string',
            nullable: true
        },
        professionalIdentityNumber: {
            type: 'string',
            nullable: true
        },
        professionalIdentityNumberVerified: {
            type: 'boolean'
        },
        supplementaryInformation: {
            type: 'string',
            nullable: true
        },
        organizationMembership: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrganizationMemberDto'
            },
            nullable: true
        },
        archived: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UserDtoPageResponseDto = {
    type: 'object',
    properties: {
        page: {
            type: 'integer',
            format: 'int32'
        },
        count: {
            type: 'integer',
            format: 'int32'
        },
        total: {
            type: 'integer',
            format: 'int32'
        },
        pages: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserDto'
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $UserFormDto = {
    required: ['email'],
    type: 'object',
    properties: {
        email: {
            minLength: 1,
            type: 'string',
            format: 'email'
        },
        phoneNumber: {
            type: 'string',
            format: 'tel',
            nullable: true
        },
        givenName: {
            type: 'string',
            nullable: true
        },
        middleName: {
            type: 'string',
            nullable: true
        },
        familyName: {
            type: 'string',
            nullable: true
        },
        nameVerified: {
            type: 'boolean'
        },
        pictureUrl: {
            type: 'string',
            nullable: true
        },
        addressLine1: {
            type: 'string',
            nullable: true
        },
        addressLine2: {
            type: 'string',
            nullable: true
        },
        zipCode: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        birthDate: {
            '$ref': '#/components/schemas/LocalDate'
        },
        birthDateVerified: {
            type: 'boolean'
        },
        profession: {
            type: 'string',
            nullable: true
        },
        jobRole: {
            type: 'string',
            nullable: true
        },
        employer: {
            type: 'string',
            nullable: true
        },
        employerIdentificationNumber: {
            type: 'string',
            nullable: true
        },
        professionalIdentityNumber: {
            type: 'string',
            nullable: true
        },
        professionalIdentityNumberVerified: {
            type: 'boolean'
        },
        supplementaryInformation: {
            type: 'string',
            nullable: true
        },
        archived: {
            type: 'boolean'
        }
    },
    additionalProperties: false
} as const;

export const $UserListOrder = {
    enum: ['GivenName', 'FamilyName', 'Email', 'Phone'],
    type: 'string'
} as const;

export const $UserSummaryDto = {
    type: 'object',
    properties: {
        userId: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        phoneNumber: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;
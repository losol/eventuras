/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IContractResolver,
  IContractResolver$inboundSchema,
  IContractResolver$Outbound,
  IContractResolver$outboundSchema,
} from "./icontractresolver.js";

export type EventFormDtoJsonPatchDocument = {
  contractResolver?: IContractResolver | undefined;
};

/** @internal */
export const EventFormDtoJsonPatchDocument$inboundSchema: z.ZodType<
  EventFormDtoJsonPatchDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractResolver: IContractResolver$inboundSchema.optional(),
});

/** @internal */
export type EventFormDtoJsonPatchDocument$Outbound = {
  contractResolver?: IContractResolver$Outbound | undefined;
};

/** @internal */
export const EventFormDtoJsonPatchDocument$outboundSchema: z.ZodType<
  EventFormDtoJsonPatchDocument$Outbound,
  z.ZodTypeDef,
  EventFormDtoJsonPatchDocument
> = z.object({
  contractResolver: IContractResolver$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventFormDtoJsonPatchDocument$ {
  /** @deprecated use `EventFormDtoJsonPatchDocument$inboundSchema` instead. */
  export const inboundSchema = EventFormDtoJsonPatchDocument$inboundSchema;
  /** @deprecated use `EventFormDtoJsonPatchDocument$outboundSchema` instead. */
  export const outboundSchema = EventFormDtoJsonPatchDocument$outboundSchema;
  /** @deprecated use `EventFormDtoJsonPatchDocument$Outbound` instead. */
  export type Outbound = EventFormDtoJsonPatchDocument$Outbound;
}

export function eventFormDtoJsonPatchDocumentToJSON(
  eventFormDtoJsonPatchDocument: EventFormDtoJsonPatchDocument,
): string {
  return JSON.stringify(
    EventFormDtoJsonPatchDocument$outboundSchema.parse(
      eventFormDtoJsonPatchDocument,
    ),
  );
}

export function eventFormDtoJsonPatchDocumentFromJSON(
  jsonString: string,
): SafeParseResult<EventFormDtoJsonPatchDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventFormDtoJsonPatchDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventFormDtoJsonPatchDocument' from JSON`,
  );
}

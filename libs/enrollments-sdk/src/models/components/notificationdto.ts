/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Instant,
  Instant$inboundSchema,
  Instant$Outbound,
  Instant$outboundSchema,
} from "./instant.js";
import {
  NotificationStatisticsDto,
  NotificationStatisticsDto$inboundSchema,
  NotificationStatisticsDto$Outbound,
  NotificationStatisticsDto$outboundSchema,
} from "./notificationstatisticsdto.js";
import {
  NotificationStatus,
  NotificationStatus$inboundSchema,
  NotificationStatus$outboundSchema,
} from "./notificationstatus.js";
import {
  NotificationType,
  NotificationType$inboundSchema,
  NotificationType$outboundSchema,
} from "./notificationtype.js";

export type NotificationDto = {
  notificationId?: number | undefined;
  organizationId?: number | null | undefined;
  eventId?: number | null | undefined;
  productId?: number | null | undefined;
  registrationId?: number | null | undefined;
  message?: string | null | undefined;
  created?: Instant | undefined;
  statusUpdated?: Instant | undefined;
  type?: NotificationType | undefined;
  status?: NotificationStatus | undefined;
  statistics?: NotificationStatisticsDto | undefined;
};

/** @internal */
export const NotificationDto$inboundSchema: z.ZodType<
  NotificationDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  notificationId: z.number().int().optional(),
  organizationId: z.nullable(z.number().int()).optional(),
  eventId: z.nullable(z.number().int()).optional(),
  productId: z.nullable(z.number().int()).optional(),
  registrationId: z.nullable(z.number().int()).optional(),
  message: z.nullable(z.string()).optional(),
  created: Instant$inboundSchema.optional(),
  statusUpdated: Instant$inboundSchema.optional(),
  type: NotificationType$inboundSchema.optional(),
  status: NotificationStatus$inboundSchema.optional(),
  statistics: NotificationStatisticsDto$inboundSchema.optional(),
});

/** @internal */
export type NotificationDto$Outbound = {
  notificationId?: number | undefined;
  organizationId?: number | null | undefined;
  eventId?: number | null | undefined;
  productId?: number | null | undefined;
  registrationId?: number | null | undefined;
  message?: string | null | undefined;
  created?: Instant$Outbound | undefined;
  statusUpdated?: Instant$Outbound | undefined;
  type?: string | undefined;
  status?: string | undefined;
  statistics?: NotificationStatisticsDto$Outbound | undefined;
};

/** @internal */
export const NotificationDto$outboundSchema: z.ZodType<
  NotificationDto$Outbound,
  z.ZodTypeDef,
  NotificationDto
> = z.object({
  notificationId: z.number().int().optional(),
  organizationId: z.nullable(z.number().int()).optional(),
  eventId: z.nullable(z.number().int()).optional(),
  productId: z.nullable(z.number().int()).optional(),
  registrationId: z.nullable(z.number().int()).optional(),
  message: z.nullable(z.string()).optional(),
  created: Instant$outboundSchema.optional(),
  statusUpdated: Instant$outboundSchema.optional(),
  type: NotificationType$outboundSchema.optional(),
  status: NotificationStatus$outboundSchema.optional(),
  statistics: NotificationStatisticsDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationDto$ {
  /** @deprecated use `NotificationDto$inboundSchema` instead. */
  export const inboundSchema = NotificationDto$inboundSchema;
  /** @deprecated use `NotificationDto$outboundSchema` instead. */
  export const outboundSchema = NotificationDto$outboundSchema;
  /** @deprecated use `NotificationDto$Outbound` instead. */
  export type Outbound = NotificationDto$Outbound;
}

export function notificationDtoToJSON(
  notificationDto: NotificationDto,
): string {
  return JSON.stringify(NotificationDto$outboundSchema.parse(notificationDto));
}

export function notificationDtoFromJSON(
  jsonString: string,
): SafeParseResult<NotificationDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationDto' from JSON`,
  );
}

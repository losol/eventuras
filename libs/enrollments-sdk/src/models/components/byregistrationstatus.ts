/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ByRegistrationStatus = {
  draft?: number | undefined;
  cancelled?: number | undefined;
  verified?: number | undefined;
  notAttended?: number | undefined;
  attended?: number | undefined;
  finished?: number | undefined;
  waitingList?: number | undefined;
};

/** @internal */
export const ByRegistrationStatus$inboundSchema: z.ZodType<
  ByRegistrationStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  draft: z.number().int().optional(),
  cancelled: z.number().int().optional(),
  verified: z.number().int().optional(),
  notAttended: z.number().int().optional(),
  attended: z.number().int().optional(),
  finished: z.number().int().optional(),
  waitingList: z.number().int().optional(),
});

/** @internal */
export type ByRegistrationStatus$Outbound = {
  draft?: number | undefined;
  cancelled?: number | undefined;
  verified?: number | undefined;
  notAttended?: number | undefined;
  attended?: number | undefined;
  finished?: number | undefined;
  waitingList?: number | undefined;
};

/** @internal */
export const ByRegistrationStatus$outboundSchema: z.ZodType<
  ByRegistrationStatus$Outbound,
  z.ZodTypeDef,
  ByRegistrationStatus
> = z.object({
  draft: z.number().int().optional(),
  cancelled: z.number().int().optional(),
  verified: z.number().int().optional(),
  notAttended: z.number().int().optional(),
  attended: z.number().int().optional(),
  finished: z.number().int().optional(),
  waitingList: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ByRegistrationStatus$ {
  /** @deprecated use `ByRegistrationStatus$inboundSchema` instead. */
  export const inboundSchema = ByRegistrationStatus$inboundSchema;
  /** @deprecated use `ByRegistrationStatus$outboundSchema` instead. */
  export const outboundSchema = ByRegistrationStatus$outboundSchema;
  /** @deprecated use `ByRegistrationStatus$Outbound` instead. */
  export type Outbound = ByRegistrationStatus$Outbound;
}

export function byRegistrationStatusToJSON(
  byRegistrationStatus: ByRegistrationStatus,
): string {
  return JSON.stringify(
    ByRegistrationStatus$outboundSchema.parse(byRegistrationStatus),
  );
}

export function byRegistrationStatusFromJSON(
  jsonString: string,
): SafeParseResult<ByRegistrationStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ByRegistrationStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ByRegistrationStatus' from JSON`,
  );
}

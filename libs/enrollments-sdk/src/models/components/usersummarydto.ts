/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserSummaryDto = {
  userId?: string | null | undefined;
  name?: string | null | undefined;
  phoneNumber?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const UserSummaryDto$inboundSchema: z.ZodType<
  UserSummaryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  userId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
});

/** @internal */
export type UserSummaryDto$Outbound = {
  userId?: string | null | undefined;
  name?: string | null | undefined;
  phoneNumber?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const UserSummaryDto$outboundSchema: z.ZodType<
  UserSummaryDto$Outbound,
  z.ZodTypeDef,
  UserSummaryDto
> = z.object({
  userId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserSummaryDto$ {
  /** @deprecated use `UserSummaryDto$inboundSchema` instead. */
  export const inboundSchema = UserSummaryDto$inboundSchema;
  /** @deprecated use `UserSummaryDto$outboundSchema` instead. */
  export const outboundSchema = UserSummaryDto$outboundSchema;
  /** @deprecated use `UserSummaryDto$Outbound` instead. */
  export type Outbound = UserSummaryDto$Outbound;
}

export function userSummaryDtoToJSON(userSummaryDto: UserSummaryDto): string {
  return JSON.stringify(UserSummaryDto$outboundSchema.parse(userSummaryDto));
}

export function userSummaryDtoFromJSON(
  jsonString: string,
): SafeParseResult<UserSummaryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserSummaryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserSummaryDto' from JSON`,
  );
}

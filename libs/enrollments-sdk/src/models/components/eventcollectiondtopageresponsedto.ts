/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventCollectionDto,
  EventCollectionDto$inboundSchema,
  EventCollectionDto$Outbound,
  EventCollectionDto$outboundSchema,
} from "./eventcollectiondto.js";

export type EventCollectionDtoPageResponseDto = {
  page?: number | undefined;
  count?: number | undefined;
  total?: number | undefined;
  pages?: number | undefined;
  data?: Array<EventCollectionDto> | null | undefined;
};

/** @internal */
export const EventCollectionDtoPageResponseDto$inboundSchema: z.ZodType<
  EventCollectionDtoPageResponseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  total: z.number().int().optional(),
  pages: z.number().int().optional(),
  data: z.nullable(z.array(EventCollectionDto$inboundSchema)).optional(),
});

/** @internal */
export type EventCollectionDtoPageResponseDto$Outbound = {
  page?: number | undefined;
  count?: number | undefined;
  total?: number | undefined;
  pages?: number | undefined;
  data?: Array<EventCollectionDto$Outbound> | null | undefined;
};

/** @internal */
export const EventCollectionDtoPageResponseDto$outboundSchema: z.ZodType<
  EventCollectionDtoPageResponseDto$Outbound,
  z.ZodTypeDef,
  EventCollectionDtoPageResponseDto
> = z.object({
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  total: z.number().int().optional(),
  pages: z.number().int().optional(),
  data: z.nullable(z.array(EventCollectionDto$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventCollectionDtoPageResponseDto$ {
  /** @deprecated use `EventCollectionDtoPageResponseDto$inboundSchema` instead. */
  export const inboundSchema = EventCollectionDtoPageResponseDto$inboundSchema;
  /** @deprecated use `EventCollectionDtoPageResponseDto$outboundSchema` instead. */
  export const outboundSchema =
    EventCollectionDtoPageResponseDto$outboundSchema;
  /** @deprecated use `EventCollectionDtoPageResponseDto$Outbound` instead. */
  export type Outbound = EventCollectionDtoPageResponseDto$Outbound;
}

export function eventCollectionDtoPageResponseDtoToJSON(
  eventCollectionDtoPageResponseDto: EventCollectionDtoPageResponseDto,
): string {
  return JSON.stringify(
    EventCollectionDtoPageResponseDto$outboundSchema.parse(
      eventCollectionDtoPageResponseDto,
    ),
  );
}

export function eventCollectionDtoPageResponseDtoFromJSON(
  jsonString: string,
): SafeParseResult<EventCollectionDtoPageResponseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventCollectionDtoPageResponseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventCollectionDtoPageResponseDto' from JSON`,
  );
}

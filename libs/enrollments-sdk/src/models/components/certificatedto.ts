/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CertificateDto = {
  certificateId?: number | undefined;
  certificateGuid?: string | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  comment?: string | null | undefined;
  recipientName?: string | null | undefined;
  evidenceDescription?: string | null | undefined;
  issuedInCity?: string | null | undefined;
  issuingDate?: RFCDate | undefined;
  issuerOrganizationName?: string | null | undefined;
  issuerOrganizationLogoBase64?: string | null | undefined;
  issuerPersonName?: string | null | undefined;
  issuerPersonSignatureImageBase64?: string | null | undefined;
};

/** @internal */
export const CertificateDto$inboundSchema: z.ZodType<
  CertificateDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  certificateId: z.number().int().optional(),
  certificateGuid: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  comment: z.nullable(z.string()).optional(),
  recipientName: z.nullable(z.string()).optional(),
  evidenceDescription: z.nullable(z.string()).optional(),
  issuedInCity: z.nullable(z.string()).optional(),
  issuingDate: z.string().transform(v => new RFCDate(v)).optional(),
  issuerOrganizationName: z.nullable(z.string()).optional(),
  issuerOrganizationLogoBase64: z.nullable(z.string()).optional(),
  issuerPersonName: z.nullable(z.string()).optional(),
  issuerPersonSignatureImageBase64: z.nullable(z.string()).optional(),
});

/** @internal */
export type CertificateDto$Outbound = {
  certificateId?: number | undefined;
  certificateGuid?: string | undefined;
  title?: string | null | undefined;
  description?: string | null | undefined;
  comment?: string | null | undefined;
  recipientName?: string | null | undefined;
  evidenceDescription?: string | null | undefined;
  issuedInCity?: string | null | undefined;
  issuingDate?: string | undefined;
  issuerOrganizationName?: string | null | undefined;
  issuerOrganizationLogoBase64?: string | null | undefined;
  issuerPersonName?: string | null | undefined;
  issuerPersonSignatureImageBase64?: string | null | undefined;
};

/** @internal */
export const CertificateDto$outboundSchema: z.ZodType<
  CertificateDto$Outbound,
  z.ZodTypeDef,
  CertificateDto
> = z.object({
  certificateId: z.number().int().optional(),
  certificateGuid: z.string().optional(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  comment: z.nullable(z.string()).optional(),
  recipientName: z.nullable(z.string()).optional(),
  evidenceDescription: z.nullable(z.string()).optional(),
  issuedInCity: z.nullable(z.string()).optional(),
  issuingDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  issuerOrganizationName: z.nullable(z.string()).optional(),
  issuerOrganizationLogoBase64: z.nullable(z.string()).optional(),
  issuerPersonName: z.nullable(z.string()).optional(),
  issuerPersonSignatureImageBase64: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CertificateDto$ {
  /** @deprecated use `CertificateDto$inboundSchema` instead. */
  export const inboundSchema = CertificateDto$inboundSchema;
  /** @deprecated use `CertificateDto$outboundSchema` instead. */
  export const outboundSchema = CertificateDto$outboundSchema;
  /** @deprecated use `CertificateDto$Outbound` instead. */
  export type Outbound = CertificateDto$Outbound;
}

export function certificateDtoToJSON(certificateDto: CertificateDto): string {
  return JSON.stringify(CertificateDto$outboundSchema.parse(certificateDto));
}

export function certificateDtoFromJSON(
  jsonString: string,
): SafeParseResult<CertificateDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CertificateDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CertificateDto' from JSON`,
  );
}

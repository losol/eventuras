/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ByRegistrationStatus,
  ByRegistrationStatus$inboundSchema,
  ByRegistrationStatus$Outbound,
  ByRegistrationStatus$outboundSchema,
} from "./byregistrationstatus.js";

export type ProductStatisticsDto = {
  byRegistrationStatus?: ByRegistrationStatus | undefined;
};

/** @internal */
export const ProductStatisticsDto$inboundSchema: z.ZodType<
  ProductStatisticsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  byRegistrationStatus: ByRegistrationStatus$inboundSchema.optional(),
});

/** @internal */
export type ProductStatisticsDto$Outbound = {
  byRegistrationStatus?: ByRegistrationStatus$Outbound | undefined;
};

/** @internal */
export const ProductStatisticsDto$outboundSchema: z.ZodType<
  ProductStatisticsDto$Outbound,
  z.ZodTypeDef,
  ProductStatisticsDto
> = z.object({
  byRegistrationStatus: ByRegistrationStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductStatisticsDto$ {
  /** @deprecated use `ProductStatisticsDto$inboundSchema` instead. */
  export const inboundSchema = ProductStatisticsDto$inboundSchema;
  /** @deprecated use `ProductStatisticsDto$outboundSchema` instead. */
  export const outboundSchema = ProductStatisticsDto$outboundSchema;
  /** @deprecated use `ProductStatisticsDto$Outbound` instead. */
  export type Outbound = ProductStatisticsDto$Outbound;
}

export function productStatisticsDtoToJSON(
  productStatisticsDto: ProductStatisticsDto,
): string {
  return JSON.stringify(
    ProductStatisticsDto$outboundSchema.parse(productStatisticsDto),
  );
}

export function productStatisticsDtoFromJSON(
  jsonString: string,
): SafeParseResult<ProductStatisticsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductStatisticsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductStatisticsDto' from JSON`,
  );
}

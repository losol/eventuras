/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrderLineModel,
  OrderLineModel$inboundSchema,
  OrderLineModel$Outbound,
  OrderLineModel$outboundSchema,
} from "./orderlinemodel.js";

export type NewOrderRequestDto = {
  lines: Array<OrderLineModel>;
  registrationId: number;
};

/** @internal */
export const NewOrderRequestDto$inboundSchema: z.ZodType<
  NewOrderRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  lines: z.array(OrderLineModel$inboundSchema),
  registrationId: z.number().int(),
});

/** @internal */
export type NewOrderRequestDto$Outbound = {
  lines: Array<OrderLineModel$Outbound>;
  registrationId: number;
};

/** @internal */
export const NewOrderRequestDto$outboundSchema: z.ZodType<
  NewOrderRequestDto$Outbound,
  z.ZodTypeDef,
  NewOrderRequestDto
> = z.object({
  lines: z.array(OrderLineModel$outboundSchema),
  registrationId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewOrderRequestDto$ {
  /** @deprecated use `NewOrderRequestDto$inboundSchema` instead. */
  export const inboundSchema = NewOrderRequestDto$inboundSchema;
  /** @deprecated use `NewOrderRequestDto$outboundSchema` instead. */
  export const outboundSchema = NewOrderRequestDto$outboundSchema;
  /** @deprecated use `NewOrderRequestDto$Outbound` instead. */
  export type Outbound = NewOrderRequestDto$Outbound;
}

export function newOrderRequestDtoToJSON(
  newOrderRequestDto: NewOrderRequestDto,
): string {
  return JSON.stringify(
    NewOrderRequestDto$outboundSchema.parse(newOrderRequestDto),
  );
}

export function newOrderRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<NewOrderRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewOrderRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewOrderRequestDto' from JSON`,
  );
}

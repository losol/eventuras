/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NotificationStatisticsDto = {
  sent?: number | undefined;
  errors?: number | undefined;
  recipients?: number | undefined;
};

/** @internal */
export const NotificationStatisticsDto$inboundSchema: z.ZodType<
  NotificationStatisticsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  sent: z.number().int().optional(),
  errors: z.number().int().optional(),
  recipients: z.number().int().optional(),
});

/** @internal */
export type NotificationStatisticsDto$Outbound = {
  sent?: number | undefined;
  errors?: number | undefined;
  recipients?: number | undefined;
};

/** @internal */
export const NotificationStatisticsDto$outboundSchema: z.ZodType<
  NotificationStatisticsDto$Outbound,
  z.ZodTypeDef,
  NotificationStatisticsDto
> = z.object({
  sent: z.number().int().optional(),
  errors: z.number().int().optional(),
  recipients: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationStatisticsDto$ {
  /** @deprecated use `NotificationStatisticsDto$inboundSchema` instead. */
  export const inboundSchema = NotificationStatisticsDto$inboundSchema;
  /** @deprecated use `NotificationStatisticsDto$outboundSchema` instead. */
  export const outboundSchema = NotificationStatisticsDto$outboundSchema;
  /** @deprecated use `NotificationStatisticsDto$Outbound` instead. */
  export type Outbound = NotificationStatisticsDto$Outbound;
}

export function notificationStatisticsDtoToJSON(
  notificationStatisticsDto: NotificationStatisticsDto,
): string {
  return JSON.stringify(
    NotificationStatisticsDto$outboundSchema.parse(notificationStatisticsDto),
  );
}

export function notificationStatisticsDtoFromJSON(
  jsonString: string,
): SafeParseResult<NotificationStatisticsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationStatisticsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationStatisticsDto' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RegistrationStatus,
  RegistrationStatus$inboundSchema,
  RegistrationStatus$outboundSchema,
} from "./registrationstatus.js";
import {
  UserSummaryDto,
  UserSummaryDto$inboundSchema,
  UserSummaryDto$Outbound,
  UserSummaryDto$outboundSchema,
} from "./usersummarydto.js";

export type ProductOrdersSummaryDto = {
  registrationId?: number | undefined;
  registrationStatus?: RegistrationStatus | undefined;
  user?: UserSummaryDto | undefined;
  orderIds?: Array<number> | null | undefined;
  sumQuantity?: number | undefined;
};

/** @internal */
export const ProductOrdersSummaryDto$inboundSchema: z.ZodType<
  ProductOrdersSummaryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  registrationId: z.number().int().optional(),
  registrationStatus: RegistrationStatus$inboundSchema.optional(),
  user: UserSummaryDto$inboundSchema.optional(),
  orderIds: z.nullable(z.array(z.number().int())).optional(),
  sumQuantity: z.number().int().optional(),
});

/** @internal */
export type ProductOrdersSummaryDto$Outbound = {
  registrationId?: number | undefined;
  registrationStatus?: string | undefined;
  user?: UserSummaryDto$Outbound | undefined;
  orderIds?: Array<number> | null | undefined;
  sumQuantity?: number | undefined;
};

/** @internal */
export const ProductOrdersSummaryDto$outboundSchema: z.ZodType<
  ProductOrdersSummaryDto$Outbound,
  z.ZodTypeDef,
  ProductOrdersSummaryDto
> = z.object({
  registrationId: z.number().int().optional(),
  registrationStatus: RegistrationStatus$outboundSchema.optional(),
  user: UserSummaryDto$outboundSchema.optional(),
  orderIds: z.nullable(z.array(z.number().int())).optional(),
  sumQuantity: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOrdersSummaryDto$ {
  /** @deprecated use `ProductOrdersSummaryDto$inboundSchema` instead. */
  export const inboundSchema = ProductOrdersSummaryDto$inboundSchema;
  /** @deprecated use `ProductOrdersSummaryDto$outboundSchema` instead. */
  export const outboundSchema = ProductOrdersSummaryDto$outboundSchema;
  /** @deprecated use `ProductOrdersSummaryDto$Outbound` instead. */
  export type Outbound = ProductOrdersSummaryDto$Outbound;
}

export function productOrdersSummaryDtoToJSON(
  productOrdersSummaryDto: ProductOrdersSummaryDto,
): string {
  return JSON.stringify(
    ProductOrdersSummaryDto$outboundSchema.parse(productOrdersSummaryDto),
  );
}

export function productOrdersSummaryDtoFromJSON(
  jsonString: string,
): SafeParseResult<ProductOrdersSummaryDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductOrdersSummaryDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductOrdersSummaryDto' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventInfoOptionsDto,
  EventInfoOptionsDto$inboundSchema,
  EventInfoOptionsDto$Outbound,
  EventInfoOptionsDto$outboundSchema,
} from "./eventinfooptionsdto.js";
import {
  EventInfoStatus,
  EventInfoStatus$inboundSchema,
  EventInfoStatus$outboundSchema,
} from "./eventinfostatus.js";
import {
  EventInfoType,
  EventInfoType$inboundSchema,
  EventInfoType$outboundSchema,
} from "./eventinfotype.js";

/**
 * Data Transfer Object (DTO) for Event Information.
 *
 * @remarks
 * Used for API between the backend and the frontend.
 */
export type EventFormDto = {
  title: string;
  slug: string;
  id?: number | null | undefined;
  type?: EventInfoType | undefined;
  status?: EventInfoStatus | undefined;
  organizationId?: number | undefined;
  headline?: string | null | undefined;
  moreInformation?: string | null | undefined;
  category?: string | null | undefined;
  description?: string | null | undefined;
  manageRegistrations?: boolean | undefined;
  onDemand?: boolean | undefined;
  featured?: boolean | undefined;
  program?: string | null | undefined;
  practicalInformation?: string | null | undefined;
  location?: string | null | undefined;
  city?: string | null | undefined;
  dateStart?: RFCDate | null | undefined;
  dateEnd?: RFCDate | null | undefined;
  welcomeLetter?: string | null | undefined;
  published?: boolean | undefined;
  externalInfoPageUrl?: string | null | undefined;
  externalRegistrationsUrl?: string | null | undefined;
  informationRequest?: string | null | undefined;
  lastRegistrationDate?: RFCDate | null | undefined;
  lastCancellationDate?: RFCDate | null | undefined;
  maxParticipants?: number | null | undefined;
  certificateTitle?: string | null | undefined;
  certificateDescription?: string | null | undefined;
  featuredImageUrl?: string | null | undefined;
  featuredImageCaption?: string | null | undefined;
  projectCode?: string | null | undefined;
  organizerUserId?: string | null | undefined;
  options?: EventInfoOptionsDto | undefined;
};

/** @internal */
export const EventFormDto$inboundSchema: z.ZodType<
  EventFormDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  slug: z.string(),
  id: z.nullable(z.number().int()).optional(),
  type: EventInfoType$inboundSchema.optional(),
  status: EventInfoStatus$inboundSchema.optional(),
  organizationId: z.number().int().optional(),
  headline: z.nullable(z.string()).optional(),
  moreInformation: z.nullable(z.string()).optional(),
  category: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  manageRegistrations: z.boolean().optional(),
  onDemand: z.boolean().optional(),
  featured: z.boolean().optional(),
  program: z.nullable(z.string()).optional(),
  practicalInformation: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  dateStart: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  dateEnd: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  welcomeLetter: z.nullable(z.string()).optional(),
  published: z.boolean().optional(),
  externalInfoPageUrl: z.nullable(z.string()).optional(),
  externalRegistrationsUrl: z.nullable(z.string()).optional(),
  informationRequest: z.nullable(z.string()).optional(),
  lastRegistrationDate: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  lastCancellationDate: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  maxParticipants: z.nullable(z.number().int()).optional(),
  certificateTitle: z.nullable(z.string()).optional(),
  certificateDescription: z.nullable(z.string()).optional(),
  featuredImageUrl: z.nullable(z.string()).optional(),
  featuredImageCaption: z.nullable(z.string()).optional(),
  projectCode: z.nullable(z.string()).optional(),
  organizerUserId: z.nullable(z.string()).optional(),
  options: EventInfoOptionsDto$inboundSchema.optional(),
});

/** @internal */
export type EventFormDto$Outbound = {
  title: string;
  slug: string;
  id?: number | null | undefined;
  type?: string | undefined;
  status?: string | undefined;
  organizationId?: number | undefined;
  headline?: string | null | undefined;
  moreInformation?: string | null | undefined;
  category?: string | null | undefined;
  description?: string | null | undefined;
  manageRegistrations?: boolean | undefined;
  onDemand?: boolean | undefined;
  featured?: boolean | undefined;
  program?: string | null | undefined;
  practicalInformation?: string | null | undefined;
  location?: string | null | undefined;
  city?: string | null | undefined;
  dateStart?: string | null | undefined;
  dateEnd?: string | null | undefined;
  welcomeLetter?: string | null | undefined;
  published?: boolean | undefined;
  externalInfoPageUrl?: string | null | undefined;
  externalRegistrationsUrl?: string | null | undefined;
  informationRequest?: string | null | undefined;
  lastRegistrationDate?: string | null | undefined;
  lastCancellationDate?: string | null | undefined;
  maxParticipants?: number | null | undefined;
  certificateTitle?: string | null | undefined;
  certificateDescription?: string | null | undefined;
  featuredImageUrl?: string | null | undefined;
  featuredImageCaption?: string | null | undefined;
  projectCode?: string | null | undefined;
  organizerUserId?: string | null | undefined;
  options?: EventInfoOptionsDto$Outbound | undefined;
};

/** @internal */
export const EventFormDto$outboundSchema: z.ZodType<
  EventFormDto$Outbound,
  z.ZodTypeDef,
  EventFormDto
> = z.object({
  title: z.string(),
  slug: z.string(),
  id: z.nullable(z.number().int()).optional(),
  type: EventInfoType$outboundSchema.optional(),
  status: EventInfoStatus$outboundSchema.optional(),
  organizationId: z.number().int().optional(),
  headline: z.nullable(z.string()).optional(),
  moreInformation: z.nullable(z.string()).optional(),
  category: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  manageRegistrations: z.boolean().optional(),
  onDemand: z.boolean().optional(),
  featured: z.boolean().optional(),
  program: z.nullable(z.string()).optional(),
  practicalInformation: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  dateStart: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  dateEnd: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  welcomeLetter: z.nullable(z.string()).optional(),
  published: z.boolean().optional(),
  externalInfoPageUrl: z.nullable(z.string()).optional(),
  externalRegistrationsUrl: z.nullable(z.string()).optional(),
  informationRequest: z.nullable(z.string()).optional(),
  lastRegistrationDate: z.nullable(
    z.instanceof(RFCDate).transform(v => v.toString()),
  ).optional(),
  lastCancellationDate: z.nullable(
    z.instanceof(RFCDate).transform(v => v.toString()),
  ).optional(),
  maxParticipants: z.nullable(z.number().int()).optional(),
  certificateTitle: z.nullable(z.string()).optional(),
  certificateDescription: z.nullable(z.string()).optional(),
  featuredImageUrl: z.nullable(z.string()).optional(),
  featuredImageCaption: z.nullable(z.string()).optional(),
  projectCode: z.nullable(z.string()).optional(),
  organizerUserId: z.nullable(z.string()).optional(),
  options: EventInfoOptionsDto$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventFormDto$ {
  /** @deprecated use `EventFormDto$inboundSchema` instead. */
  export const inboundSchema = EventFormDto$inboundSchema;
  /** @deprecated use `EventFormDto$outboundSchema` instead. */
  export const outboundSchema = EventFormDto$outboundSchema;
  /** @deprecated use `EventFormDto$Outbound` instead. */
  export type Outbound = EventFormDto$Outbound;
}

export function eventFormDtoToJSON(eventFormDto: EventFormDto): string {
  return JSON.stringify(EventFormDto$outboundSchema.parse(eventFormDto));
}

export function eventFormDtoFromJSON(
  jsonString: string,
): SafeParseResult<EventFormDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventFormDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventFormDto' from JSON`,
  );
}

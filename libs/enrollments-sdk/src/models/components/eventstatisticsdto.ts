/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ByStatus,
  ByStatus$inboundSchema,
  ByStatus$Outbound,
  ByStatus$outboundSchema,
} from "./bystatus.js";
import {
  ByType,
  ByType$inboundSchema,
  ByType$Outbound,
  ByType$outboundSchema,
} from "./bytype.js";

export type EventStatisticsDto = {
  byStatus?: ByStatus | undefined;
  byType?: ByType | undefined;
};

/** @internal */
export const EventStatisticsDto$inboundSchema: z.ZodType<
  EventStatisticsDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  byStatus: ByStatus$inboundSchema.optional(),
  byType: ByType$inboundSchema.optional(),
});

/** @internal */
export type EventStatisticsDto$Outbound = {
  byStatus?: ByStatus$Outbound | undefined;
  byType?: ByType$Outbound | undefined;
};

/** @internal */
export const EventStatisticsDto$outboundSchema: z.ZodType<
  EventStatisticsDto$Outbound,
  z.ZodTypeDef,
  EventStatisticsDto
> = z.object({
  byStatus: ByStatus$outboundSchema.optional(),
  byType: ByType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventStatisticsDto$ {
  /** @deprecated use `EventStatisticsDto$inboundSchema` instead. */
  export const inboundSchema = EventStatisticsDto$inboundSchema;
  /** @deprecated use `EventStatisticsDto$outboundSchema` instead. */
  export const outboundSchema = EventStatisticsDto$outboundSchema;
  /** @deprecated use `EventStatisticsDto$Outbound` instead. */
  export type Outbound = EventStatisticsDto$Outbound;
}

export function eventStatisticsDtoToJSON(
  eventStatisticsDto: EventStatisticsDto,
): string {
  return JSON.stringify(
    EventStatisticsDto$outboundSchema.parse(eventStatisticsDto),
  );
}

export function eventStatisticsDtoFromJSON(
  jsonString: string,
): SafeParseResult<EventStatisticsDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventStatisticsDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventStatisticsDto' from JSON`,
  );
}

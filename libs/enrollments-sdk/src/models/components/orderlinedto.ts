/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductDto,
  ProductDto$inboundSchema,
  ProductDto$Outbound,
  ProductDto$outboundSchema,
} from "./productdto.js";
import {
  ProductVariantDto,
  ProductVariantDto$inboundSchema,
  ProductVariantDto$Outbound,
  ProductVariantDto$outboundSchema,
} from "./productvariantdto.js";

export type OrderLineDto = {
  orderLineId?: number | undefined;
  product?: ProductDto | undefined;
  productVariant?: ProductVariantDto | undefined;
  quantity?: number | undefined;
};

/** @internal */
export const OrderLineDto$inboundSchema: z.ZodType<
  OrderLineDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderLineId: z.number().int().optional(),
  product: ProductDto$inboundSchema.optional(),
  productVariant: ProductVariantDto$inboundSchema.optional(),
  quantity: z.number().int().optional(),
});

/** @internal */
export type OrderLineDto$Outbound = {
  orderLineId?: number | undefined;
  product?: ProductDto$Outbound | undefined;
  productVariant?: ProductVariantDto$Outbound | undefined;
  quantity?: number | undefined;
};

/** @internal */
export const OrderLineDto$outboundSchema: z.ZodType<
  OrderLineDto$Outbound,
  z.ZodTypeDef,
  OrderLineDto
> = z.object({
  orderLineId: z.number().int().optional(),
  product: ProductDto$outboundSchema.optional(),
  productVariant: ProductVariantDto$outboundSchema.optional(),
  quantity: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderLineDto$ {
  /** @deprecated use `OrderLineDto$inboundSchema` instead. */
  export const inboundSchema = OrderLineDto$inboundSchema;
  /** @deprecated use `OrderLineDto$outboundSchema` instead. */
  export const outboundSchema = OrderLineDto$outboundSchema;
  /** @deprecated use `OrderLineDto$Outbound` instead. */
  export type Outbound = OrderLineDto$Outbound;
}

export function orderLineDtoToJSON(orderLineDto: OrderLineDto): string {
  return JSON.stringify(OrderLineDto$outboundSchema.parse(orderLineDto));
}

export function orderLineDtoFromJSON(
  jsonString: string,
): SafeParseResult<OrderLineDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderLineDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderLineDto' from JSON`,
  );
}

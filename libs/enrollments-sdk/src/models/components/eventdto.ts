/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventInfoStatus,
  EventInfoStatus$inboundSchema,
  EventInfoStatus$outboundSchema,
} from "./eventinfostatus.js";
import {
  EventInfoType,
  EventInfoType$inboundSchema,
  EventInfoType$outboundSchema,
} from "./eventinfotype.js";

export type EventDto = {
  id?: number | undefined;
  type?: EventInfoType | undefined;
  status?: EventInfoStatus | undefined;
  title?: string | null | undefined;
  slug?: string | null | undefined;
  category?: string | null | undefined;
  description?: string | null | undefined;
  featured?: boolean | undefined;
  program?: string | null | undefined;
  practicalInformation?: string | null | undefined;
  location?: string | null | undefined;
  city?: string | null | undefined;
  onDemand?: boolean | undefined;
  dateStart?: RFCDate | null | undefined;
  dateEnd?: RFCDate | null | undefined;
  lastRegistrationDate?: RFCDate | null | undefined;
  lastCancellationDate?: RFCDate | null | undefined;
  featuredImageUrl?: string | null | undefined;
  featuredImageCaption?: string | null | undefined;
  headline?: string | null | undefined;
  published?: boolean | undefined;
  moreInformation?: string | null | undefined;
  welcomeLetter?: string | null | undefined;
  informationRequest?: string | null | undefined;
  certificateTitle?: string | null | undefined;
  certificateDescription?: string | null | undefined;
  projectCode?: string | null | undefined;
  organizerUserId?: string | null | undefined;
  maxParticipants?: number | null | undefined;
  externalInfoPageUrl?: string | null | undefined;
};

/** @internal */
export const EventDto$inboundSchema: z.ZodType<
  EventDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  type: EventInfoType$inboundSchema.optional(),
  status: EventInfoStatus$inboundSchema.optional(),
  title: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  category: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  featured: z.boolean().optional(),
  program: z.nullable(z.string()).optional(),
  practicalInformation: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  onDemand: z.boolean().optional(),
  dateStart: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  dateEnd: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  lastRegistrationDate: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  lastCancellationDate: z.nullable(z.string().transform(v => new RFCDate(v)))
    .optional(),
  featuredImageUrl: z.nullable(z.string()).optional(),
  featuredImageCaption: z.nullable(z.string()).optional(),
  headline: z.nullable(z.string()).optional(),
  published: z.boolean().optional(),
  moreInformation: z.nullable(z.string()).optional(),
  welcomeLetter: z.nullable(z.string()).optional(),
  informationRequest: z.nullable(z.string()).optional(),
  certificateTitle: z.nullable(z.string()).optional(),
  certificateDescription: z.nullable(z.string()).optional(),
  projectCode: z.nullable(z.string()).optional(),
  organizerUserId: z.nullable(z.string()).optional(),
  maxParticipants: z.nullable(z.number().int()).optional(),
  externalInfoPageUrl: z.nullable(z.string()).optional(),
});

/** @internal */
export type EventDto$Outbound = {
  id?: number | undefined;
  type?: string | undefined;
  status?: string | undefined;
  title?: string | null | undefined;
  slug?: string | null | undefined;
  category?: string | null | undefined;
  description?: string | null | undefined;
  featured?: boolean | undefined;
  program?: string | null | undefined;
  practicalInformation?: string | null | undefined;
  location?: string | null | undefined;
  city?: string | null | undefined;
  onDemand?: boolean | undefined;
  dateStart?: string | null | undefined;
  dateEnd?: string | null | undefined;
  lastRegistrationDate?: string | null | undefined;
  lastCancellationDate?: string | null | undefined;
  featuredImageUrl?: string | null | undefined;
  featuredImageCaption?: string | null | undefined;
  headline?: string | null | undefined;
  published?: boolean | undefined;
  moreInformation?: string | null | undefined;
  welcomeLetter?: string | null | undefined;
  informationRequest?: string | null | undefined;
  certificateTitle?: string | null | undefined;
  certificateDescription?: string | null | undefined;
  projectCode?: string | null | undefined;
  organizerUserId?: string | null | undefined;
  maxParticipants?: number | null | undefined;
  externalInfoPageUrl?: string | null | undefined;
};

/** @internal */
export const EventDto$outboundSchema: z.ZodType<
  EventDto$Outbound,
  z.ZodTypeDef,
  EventDto
> = z.object({
  id: z.number().int().optional(),
  type: EventInfoType$outboundSchema.optional(),
  status: EventInfoStatus$outboundSchema.optional(),
  title: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  category: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  featured: z.boolean().optional(),
  program: z.nullable(z.string()).optional(),
  practicalInformation: z.nullable(z.string()).optional(),
  location: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  onDemand: z.boolean().optional(),
  dateStart: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  dateEnd: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  lastRegistrationDate: z.nullable(
    z.instanceof(RFCDate).transform(v => v.toString()),
  ).optional(),
  lastCancellationDate: z.nullable(
    z.instanceof(RFCDate).transform(v => v.toString()),
  ).optional(),
  featuredImageUrl: z.nullable(z.string()).optional(),
  featuredImageCaption: z.nullable(z.string()).optional(),
  headline: z.nullable(z.string()).optional(),
  published: z.boolean().optional(),
  moreInformation: z.nullable(z.string()).optional(),
  welcomeLetter: z.nullable(z.string()).optional(),
  informationRequest: z.nullable(z.string()).optional(),
  certificateTitle: z.nullable(z.string()).optional(),
  certificateDescription: z.nullable(z.string()).optional(),
  projectCode: z.nullable(z.string()).optional(),
  organizerUserId: z.nullable(z.string()).optional(),
  maxParticipants: z.nullable(z.number().int()).optional(),
  externalInfoPageUrl: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventDto$ {
  /** @deprecated use `EventDto$inboundSchema` instead. */
  export const inboundSchema = EventDto$inboundSchema;
  /** @deprecated use `EventDto$outboundSchema` instead. */
  export const outboundSchema = EventDto$outboundSchema;
  /** @deprecated use `EventDto$Outbound` instead. */
  export type Outbound = EventDto$Outbound;
}

export function eventDtoToJSON(eventDto: EventDto): string {
  return JSON.stringify(EventDto$outboundSchema.parse(eventDto));
}

export function eventDtoFromJSON(
  jsonString: string,
): SafeParseResult<EventDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventDto' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationSettingType,
  OrganizationSettingType$inboundSchema,
  OrganizationSettingType$outboundSchema,
} from "./organizationsettingtype.js";

export type OrganizationSettingDto = {
  name?: string | null | undefined;
  section?: string | null | undefined;
  description?: string | null | undefined;
  type?: OrganizationSettingType | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const OrganizationSettingDto$inboundSchema: z.ZodType<
  OrganizationSettingDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  section: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: OrganizationSettingType$inboundSchema.optional(),
  value: z.nullable(z.string()).optional(),
});

/** @internal */
export type OrganizationSettingDto$Outbound = {
  name?: string | null | undefined;
  section?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | undefined;
  value?: string | null | undefined;
};

/** @internal */
export const OrganizationSettingDto$outboundSchema: z.ZodType<
  OrganizationSettingDto$Outbound,
  z.ZodTypeDef,
  OrganizationSettingDto
> = z.object({
  name: z.nullable(z.string()).optional(),
  section: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: OrganizationSettingType$outboundSchema.optional(),
  value: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationSettingDto$ {
  /** @deprecated use `OrganizationSettingDto$inboundSchema` instead. */
  export const inboundSchema = OrganizationSettingDto$inboundSchema;
  /** @deprecated use `OrganizationSettingDto$outboundSchema` instead. */
  export const outboundSchema = OrganizationSettingDto$outboundSchema;
  /** @deprecated use `OrganizationSettingDto$Outbound` instead. */
  export type Outbound = OrganizationSettingDto$Outbound;
}

export function organizationSettingDtoToJSON(
  organizationSettingDto: OrganizationSettingDto,
): string {
  return JSON.stringify(
    OrganizationSettingDto$outboundSchema.parse(organizationSettingDto),
  );
}

export function organizationSettingDtoFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationSettingDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationSettingDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationSettingDto' from JSON`,
  );
}

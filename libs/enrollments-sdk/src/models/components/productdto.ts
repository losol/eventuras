/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductVariantDto,
  ProductVariantDto$inboundSchema,
  ProductVariantDto$Outbound,
  ProductVariantDto$outboundSchema,
} from "./productvariantdto.js";
import {
  ProductVisibility,
  ProductVisibility$inboundSchema,
  ProductVisibility$outboundSchema,
} from "./productvisibility.js";

export type ProductDto = {
  productId?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  price?: number | undefined;
  vatPercent?: number | undefined;
  visibility?: ProductVisibility | undefined;
  inventory?: number | null | undefined;
  published?: boolean | null | undefined;
  variants?: Array<ProductVariantDto> | null | undefined;
  minimumQuantity?: number | undefined;
  isMandatory?: boolean | undefined;
  enableQuantity?: boolean | undefined;
};

/** @internal */
export const ProductDto$inboundSchema: z.ZodType<
  ProductDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  price: z.number().optional(),
  vatPercent: z.number().int().optional(),
  visibility: ProductVisibility$inboundSchema.optional(),
  inventory: z.nullable(z.number().int()).optional(),
  published: z.nullable(z.boolean()).optional(),
  variants: z.nullable(z.array(ProductVariantDto$inboundSchema)).optional(),
  minimumQuantity: z.number().int().optional(),
  isMandatory: z.boolean().optional(),
  enableQuantity: z.boolean().optional(),
});

/** @internal */
export type ProductDto$Outbound = {
  productId?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  price?: number | undefined;
  vatPercent?: number | undefined;
  visibility?: string | undefined;
  inventory?: number | null | undefined;
  published?: boolean | null | undefined;
  variants?: Array<ProductVariantDto$Outbound> | null | undefined;
  minimumQuantity?: number | undefined;
  isMandatory?: boolean | undefined;
  enableQuantity?: boolean | undefined;
};

/** @internal */
export const ProductDto$outboundSchema: z.ZodType<
  ProductDto$Outbound,
  z.ZodTypeDef,
  ProductDto
> = z.object({
  productId: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  price: z.number().optional(),
  vatPercent: z.number().int().optional(),
  visibility: ProductVisibility$outboundSchema.optional(),
  inventory: z.nullable(z.number().int()).optional(),
  published: z.nullable(z.boolean()).optional(),
  variants: z.nullable(z.array(ProductVariantDto$outboundSchema)).optional(),
  minimumQuantity: z.number().int().optional(),
  isMandatory: z.boolean().optional(),
  enableQuantity: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductDto$ {
  /** @deprecated use `ProductDto$inboundSchema` instead. */
  export const inboundSchema = ProductDto$inboundSchema;
  /** @deprecated use `ProductDto$outboundSchema` instead. */
  export const outboundSchema = ProductDto$outboundSchema;
  /** @deprecated use `ProductDto$Outbound` instead. */
  export type Outbound = ProductDto$Outbound;
}

export function productDtoToJSON(productDto: ProductDto): string {
  return JSON.stringify(ProductDto$outboundSchema.parse(productDto));
}

export function productDtoFromJSON(
  jsonString: string,
): SafeParseResult<ProductDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductDto' from JSON`,
  );
}

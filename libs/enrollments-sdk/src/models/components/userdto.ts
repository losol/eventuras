/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationMemberDto,
  OrganizationMemberDto$inboundSchema,
  OrganizationMemberDto$Outbound,
  OrganizationMemberDto$outboundSchema,
} from "./organizationmemberdto.js";

export type UserDto = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  phoneNumber?: string | null | undefined;
  givenName?: string | null | undefined;
  middleName?: string | null | undefined;
  familyName?: string | null | undefined;
  nameVerified?: boolean | undefined;
  pictureUrl?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  zipCode?: string | null | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  birthDate?: RFCDate | null | undefined;
  birthDateVerified?: boolean | undefined;
  profession?: string | null | undefined;
  jobRole?: string | null | undefined;
  employer?: string | null | undefined;
  employerIdentificationNumber?: string | null | undefined;
  professionalIdentityNumber?: string | null | undefined;
  professionalIdentityNumberVerified?: boolean | undefined;
  supplementaryInformation?: string | null | undefined;
  organizationMembership?: Array<OrganizationMemberDto> | null | undefined;
  archived?: boolean | undefined;
};

/** @internal */
export const UserDto$inboundSchema: z.ZodType<UserDto, z.ZodTypeDef, unknown> =
  z.object({
    id: z.nullable(z.string()).optional(),
    name: z.nullable(z.string()).optional(),
    email: z.nullable(z.string()).optional(),
    phoneNumber: z.nullable(z.string()).optional(),
    givenName: z.nullable(z.string()).optional(),
    middleName: z.nullable(z.string()).optional(),
    familyName: z.nullable(z.string()).optional(),
    nameVerified: z.boolean().optional(),
    pictureUrl: z.nullable(z.string()).optional(),
    addressLine1: z.nullable(z.string()).optional(),
    addressLine2: z.nullable(z.string()).optional(),
    zipCode: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    country: z.nullable(z.string()).optional(),
    birthDate: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
    birthDateVerified: z.boolean().optional(),
    profession: z.nullable(z.string()).optional(),
    jobRole: z.nullable(z.string()).optional(),
    employer: z.nullable(z.string()).optional(),
    employerIdentificationNumber: z.nullable(z.string()).optional(),
    professionalIdentityNumber: z.nullable(z.string()).optional(),
    professionalIdentityNumberVerified: z.boolean().optional(),
    supplementaryInformation: z.nullable(z.string()).optional(),
    organizationMembership: z.nullable(
      z.array(OrganizationMemberDto$inboundSchema),
    ).optional(),
    archived: z.boolean().optional(),
  });

/** @internal */
export type UserDto$Outbound = {
  id?: string | null | undefined;
  name?: string | null | undefined;
  email?: string | null | undefined;
  phoneNumber?: string | null | undefined;
  givenName?: string | null | undefined;
  middleName?: string | null | undefined;
  familyName?: string | null | undefined;
  nameVerified?: boolean | undefined;
  pictureUrl?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  zipCode?: string | null | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  birthDate?: string | null | undefined;
  birthDateVerified?: boolean | undefined;
  profession?: string | null | undefined;
  jobRole?: string | null | undefined;
  employer?: string | null | undefined;
  employerIdentificationNumber?: string | null | undefined;
  professionalIdentityNumber?: string | null | undefined;
  professionalIdentityNumberVerified?: boolean | undefined;
  supplementaryInformation?: string | null | undefined;
  organizationMembership?:
    | Array<OrganizationMemberDto$Outbound>
    | null
    | undefined;
  archived?: boolean | undefined;
};

/** @internal */
export const UserDto$outboundSchema: z.ZodType<
  UserDto$Outbound,
  z.ZodTypeDef,
  UserDto
> = z.object({
  id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  phoneNumber: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  nameVerified: z.boolean().optional(),
  pictureUrl: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  zipCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  birthDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  birthDateVerified: z.boolean().optional(),
  profession: z.nullable(z.string()).optional(),
  jobRole: z.nullable(z.string()).optional(),
  employer: z.nullable(z.string()).optional(),
  employerIdentificationNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumberVerified: z.boolean().optional(),
  supplementaryInformation: z.nullable(z.string()).optional(),
  organizationMembership: z.nullable(
    z.array(OrganizationMemberDto$outboundSchema),
  ).optional(),
  archived: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDto$ {
  /** @deprecated use `UserDto$inboundSchema` instead. */
  export const inboundSchema = UserDto$inboundSchema;
  /** @deprecated use `UserDto$outboundSchema` instead. */
  export const outboundSchema = UserDto$outboundSchema;
  /** @deprecated use `UserDto$Outbound` instead. */
  export type Outbound = UserDto$Outbound;
}

export function userDtoToJSON(userDto: UserDto): string {
  return JSON.stringify(UserDto$outboundSchema.parse(userDto));
}

export function userDtoFromJSON(
  jsonString: string,
): SafeParseResult<UserDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDto' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserFormDto = {
  email: string;
  phoneNumber?: string | null | undefined;
  givenName?: string | null | undefined;
  middleName?: string | null | undefined;
  familyName?: string | null | undefined;
  nameVerified?: boolean | undefined;
  pictureUrl?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  zipCode?: string | null | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  birthDate?: RFCDate | null | undefined;
  birthDateVerified?: boolean | undefined;
  profession?: string | null | undefined;
  jobRole?: string | null | undefined;
  employer?: string | null | undefined;
  employerIdentificationNumber?: string | null | undefined;
  professionalIdentityNumber?: string | null | undefined;
  professionalIdentityNumberVerified?: boolean | undefined;
  supplementaryInformation?: string | null | undefined;
  archived?: boolean | undefined;
};

/** @internal */
export const UserFormDto$inboundSchema: z.ZodType<
  UserFormDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  phoneNumber: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  nameVerified: z.boolean().optional(),
  pictureUrl: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  zipCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  birthDate: z.nullable(z.string().transform(v => new RFCDate(v))).optional(),
  birthDateVerified: z.boolean().optional(),
  profession: z.nullable(z.string()).optional(),
  jobRole: z.nullable(z.string()).optional(),
  employer: z.nullable(z.string()).optional(),
  employerIdentificationNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumberVerified: z.boolean().optional(),
  supplementaryInformation: z.nullable(z.string()).optional(),
  archived: z.boolean().optional(),
});

/** @internal */
export type UserFormDto$Outbound = {
  email: string;
  phoneNumber?: string | null | undefined;
  givenName?: string | null | undefined;
  middleName?: string | null | undefined;
  familyName?: string | null | undefined;
  nameVerified?: boolean | undefined;
  pictureUrl?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  zipCode?: string | null | undefined;
  city?: string | null | undefined;
  country?: string | null | undefined;
  birthDate?: string | null | undefined;
  birthDateVerified?: boolean | undefined;
  profession?: string | null | undefined;
  jobRole?: string | null | undefined;
  employer?: string | null | undefined;
  employerIdentificationNumber?: string | null | undefined;
  professionalIdentityNumber?: string | null | undefined;
  professionalIdentityNumberVerified?: boolean | undefined;
  supplementaryInformation?: string | null | undefined;
  archived?: boolean | undefined;
};

/** @internal */
export const UserFormDto$outboundSchema: z.ZodType<
  UserFormDto$Outbound,
  z.ZodTypeDef,
  UserFormDto
> = z.object({
  email: z.string(),
  phoneNumber: z.nullable(z.string()).optional(),
  givenName: z.nullable(z.string()).optional(),
  middleName: z.nullable(z.string()).optional(),
  familyName: z.nullable(z.string()).optional(),
  nameVerified: z.boolean().optional(),
  pictureUrl: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  zipCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  country: z.nullable(z.string()).optional(),
  birthDate: z.nullable(z.instanceof(RFCDate).transform(v => v.toString()))
    .optional(),
  birthDateVerified: z.boolean().optional(),
  profession: z.nullable(z.string()).optional(),
  jobRole: z.nullable(z.string()).optional(),
  employer: z.nullable(z.string()).optional(),
  employerIdentificationNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumber: z.nullable(z.string()).optional(),
  professionalIdentityNumberVerified: z.boolean().optional(),
  supplementaryInformation: z.nullable(z.string()).optional(),
  archived: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserFormDto$ {
  /** @deprecated use `UserFormDto$inboundSchema` instead. */
  export const inboundSchema = UserFormDto$inboundSchema;
  /** @deprecated use `UserFormDto$outboundSchema` instead. */
  export const outboundSchema = UserFormDto$outboundSchema;
  /** @deprecated use `UserFormDto$Outbound` instead. */
  export type Outbound = UserFormDto$Outbound;
}

export function userFormDtoToJSON(userFormDto: UserFormDto): string {
  return JSON.stringify(UserFormDto$outboundSchema.parse(userFormDto));
}

export function userFormDtoFromJSON(
  jsonString: string,
): SafeParseResult<UserFormDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserFormDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserFormDto' from JSON`,
  );
}

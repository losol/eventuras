/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Instant = {};

/** @internal */
export const Instant$inboundSchema: z.ZodType<Instant, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Instant$Outbound = {};

/** @internal */
export const Instant$outboundSchema: z.ZodType<
  Instant$Outbound,
  z.ZodTypeDef,
  Instant
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Instant$ {
  /** @deprecated use `Instant$inboundSchema` instead. */
  export const inboundSchema = Instant$inboundSchema;
  /** @deprecated use `Instant$outboundSchema` instead. */
  export const outboundSchema = Instant$outboundSchema;
  /** @deprecated use `Instant$Outbound` instead. */
  export type Outbound = Instant$Outbound;
}

export function instantToJSON(instant: Instant): string {
  return JSON.stringify(Instant$outboundSchema.parse(instant));
}

export function instantFromJSON(
  jsonString: string,
): SafeParseResult<Instant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Instant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Instant' from JSON`,
  );
}

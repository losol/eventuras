/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrderLineModel,
  OrderLineModel$inboundSchema,
  OrderLineModel$Outbound,
  OrderLineModel$outboundSchema,
} from "./orderlinemodel.js";

export type NewRegistrationOrderDto = {
  items: Array<OrderLineModel>;
};

/** @internal */
export const NewRegistrationOrderDto$inboundSchema: z.ZodType<
  NewRegistrationOrderDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(OrderLineModel$inboundSchema),
});

/** @internal */
export type NewRegistrationOrderDto$Outbound = {
  items: Array<OrderLineModel$Outbound>;
};

/** @internal */
export const NewRegistrationOrderDto$outboundSchema: z.ZodType<
  NewRegistrationOrderDto$Outbound,
  z.ZodTypeDef,
  NewRegistrationOrderDto
> = z.object({
  items: z.array(OrderLineModel$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewRegistrationOrderDto$ {
  /** @deprecated use `NewRegistrationOrderDto$inboundSchema` instead. */
  export const inboundSchema = NewRegistrationOrderDto$inboundSchema;
  /** @deprecated use `NewRegistrationOrderDto$outboundSchema` instead. */
  export const outboundSchema = NewRegistrationOrderDto$outboundSchema;
  /** @deprecated use `NewRegistrationOrderDto$Outbound` instead. */
  export type Outbound = NewRegistrationOrderDto$Outbound;
}

export function newRegistrationOrderDtoToJSON(
  newRegistrationOrderDto: NewRegistrationOrderDto,
): string {
  return JSON.stringify(
    NewRegistrationOrderDto$outboundSchema.parse(newRegistrationOrderDto),
  );
}

export function newRegistrationOrderDtoFromJSON(
  jsonString: string,
): SafeParseResult<NewRegistrationOrderDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewRegistrationOrderDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewRegistrationOrderDto' from JSON`,
  );
}

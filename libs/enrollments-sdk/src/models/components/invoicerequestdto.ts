/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InvoiceRequestDto = {
  orderIds?: Array<number> | null | undefined;
};

/** @internal */
export const InvoiceRequestDto$inboundSchema: z.ZodType<
  InvoiceRequestDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderIds: z.nullable(z.array(z.number().int())).optional(),
});

/** @internal */
export type InvoiceRequestDto$Outbound = {
  orderIds?: Array<number> | null | undefined;
};

/** @internal */
export const InvoiceRequestDto$outboundSchema: z.ZodType<
  InvoiceRequestDto$Outbound,
  z.ZodTypeDef,
  InvoiceRequestDto
> = z.object({
  orderIds: z.nullable(z.array(z.number().int())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvoiceRequestDto$ {
  /** @deprecated use `InvoiceRequestDto$inboundSchema` instead. */
  export const inboundSchema = InvoiceRequestDto$inboundSchema;
  /** @deprecated use `InvoiceRequestDto$outboundSchema` instead. */
  export const outboundSchema = InvoiceRequestDto$outboundSchema;
  /** @deprecated use `InvoiceRequestDto$Outbound` instead. */
  export type Outbound = InvoiceRequestDto$Outbound;
}

export function invoiceRequestDtoToJSON(
  invoiceRequestDto: InvoiceRequestDto,
): string {
  return JSON.stringify(
    InvoiceRequestDto$outboundSchema.parse(invoiceRequestDto),
  );
}

export function invoiceRequestDtoFromJSON(
  jsonString: string,
): SafeParseResult<InvoiceRequestDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvoiceRequestDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvoiceRequestDto' from JSON`,
  );
}

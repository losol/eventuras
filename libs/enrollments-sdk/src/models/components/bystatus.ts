/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ByStatus = {
  draft?: number | undefined;
  cancelled?: number | undefined;
  verified?: number | undefined;
  notAttended?: number | undefined;
  attended?: number | undefined;
  finished?: number | undefined;
  waitingList?: number | undefined;
};

/** @internal */
export const ByStatus$inboundSchema: z.ZodType<
  ByStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  draft: z.number().int().optional(),
  cancelled: z.number().int().optional(),
  verified: z.number().int().optional(),
  notAttended: z.number().int().optional(),
  attended: z.number().int().optional(),
  finished: z.number().int().optional(),
  waitingList: z.number().int().optional(),
});

/** @internal */
export type ByStatus$Outbound = {
  draft?: number | undefined;
  cancelled?: number | undefined;
  verified?: number | undefined;
  notAttended?: number | undefined;
  attended?: number | undefined;
  finished?: number | undefined;
  waitingList?: number | undefined;
};

/** @internal */
export const ByStatus$outboundSchema: z.ZodType<
  ByStatus$Outbound,
  z.ZodTypeDef,
  ByStatus
> = z.object({
  draft: z.number().int().optional(),
  cancelled: z.number().int().optional(),
  verified: z.number().int().optional(),
  notAttended: z.number().int().optional(),
  attended: z.number().int().optional(),
  finished: z.number().int().optional(),
  waitingList: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ByStatus$ {
  /** @deprecated use `ByStatus$inboundSchema` instead. */
  export const inboundSchema = ByStatus$inboundSchema;
  /** @deprecated use `ByStatus$outboundSchema` instead. */
  export const outboundSchema = ByStatus$outboundSchema;
  /** @deprecated use `ByStatus$Outbound` instead. */
  export type Outbound = ByStatus$Outbound;
}

export function byStatusToJSON(byStatus: ByStatus): string {
  return JSON.stringify(ByStatus$outboundSchema.parse(byStatus));
}

export function byStatusFromJSON(
  jsonString: string,
): SafeParseResult<ByStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ByStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ByStatus' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderLineModel = {
  productId?: number | undefined;
  productVariantId?: number | null | undefined;
  quantity?: number | undefined;
};

/** @internal */
export const OrderLineModel$inboundSchema: z.ZodType<
  OrderLineModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.number().int().optional(),
  productVariantId: z.nullable(z.number().int()).optional(),
  quantity: z.number().int().optional(),
});

/** @internal */
export type OrderLineModel$Outbound = {
  productId?: number | undefined;
  productVariantId?: number | null | undefined;
  quantity?: number | undefined;
};

/** @internal */
export const OrderLineModel$outboundSchema: z.ZodType<
  OrderLineModel$Outbound,
  z.ZodTypeDef,
  OrderLineModel
> = z.object({
  productId: z.number().int().optional(),
  productVariantId: z.nullable(z.number().int()).optional(),
  quantity: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderLineModel$ {
  /** @deprecated use `OrderLineModel$inboundSchema` instead. */
  export const inboundSchema = OrderLineModel$inboundSchema;
  /** @deprecated use `OrderLineModel$outboundSchema` instead. */
  export const outboundSchema = OrderLineModel$outboundSchema;
  /** @deprecated use `OrderLineModel$Outbound` instead. */
  export type Outbound = OrderLineModel$Outbound;
}

export function orderLineModelToJSON(orderLineModel: OrderLineModel): string {
  return JSON.stringify(OrderLineModel$outboundSchema.parse(orderLineModel));
}

export function orderLineModelFromJSON(
  jsonString: string,
): SafeParseResult<OrderLineModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderLineModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderLineModel' from JSON`,
  );
}

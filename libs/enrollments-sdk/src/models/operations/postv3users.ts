/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3UsersRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  userFormDto?: components.UserFormDto | undefined;
};

export type PostV3UsersResponse = components.UserDto | string;

/** @internal */
export const PostV3UsersRequest$inboundSchema: z.ZodType<
  PostV3UsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  UserFormDto: components.UserFormDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "UserFormDto": "userFormDto",
  });
});

/** @internal */
export type PostV3UsersRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  UserFormDto?: components.UserFormDto$Outbound | undefined;
};

/** @internal */
export const PostV3UsersRequest$outboundSchema: z.ZodType<
  PostV3UsersRequest$Outbound,
  z.ZodTypeDef,
  PostV3UsersRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  userFormDto: components.UserFormDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    userFormDto: "UserFormDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3UsersRequest$ {
  /** @deprecated use `PostV3UsersRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3UsersRequest$inboundSchema;
  /** @deprecated use `PostV3UsersRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3UsersRequest$outboundSchema;
  /** @deprecated use `PostV3UsersRequest$Outbound` instead. */
  export type Outbound = PostV3UsersRequest$Outbound;
}

export function postV3UsersRequestToJSON(
  postV3UsersRequest: PostV3UsersRequest,
): string {
  return JSON.stringify(
    PostV3UsersRequest$outboundSchema.parse(postV3UsersRequest),
  );
}

export function postV3UsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3UsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3UsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3UsersRequest' from JSON`,
  );
}

/** @internal */
export const PostV3UsersResponse$inboundSchema: z.ZodType<
  PostV3UsersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.UserDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3UsersResponse$Outbound = components.UserDto$Outbound | string;

/** @internal */
export const PostV3UsersResponse$outboundSchema: z.ZodType<
  PostV3UsersResponse$Outbound,
  z.ZodTypeDef,
  PostV3UsersResponse
> = z.union([components.UserDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3UsersResponse$ {
  /** @deprecated use `PostV3UsersResponse$inboundSchema` instead. */
  export const inboundSchema = PostV3UsersResponse$inboundSchema;
  /** @deprecated use `PostV3UsersResponse$outboundSchema` instead. */
  export const outboundSchema = PostV3UsersResponse$outboundSchema;
  /** @deprecated use `PostV3UsersResponse$Outbound` instead. */
  export type Outbound = PostV3UsersResponse$Outbound;
}

export function postV3UsersResponseToJSON(
  postV3UsersResponse: PostV3UsersResponse,
): string {
  return JSON.stringify(
    PostV3UsersResponse$outboundSchema.parse(postV3UsersResponse),
  );
}

export function postV3UsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3UsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3UsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3UsersResponse' from JSON`,
  );
}

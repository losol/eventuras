/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3RegistrationsMeEventIdRequest = {
  eventId: number;
  createOrder?: boolean | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type PostV3RegistrationsMeEventIdResponse =
  | components.RegistrationDto
  | string;

/** @internal */
export const PostV3RegistrationsMeEventIdRequest$inboundSchema: z.ZodType<
  PostV3RegistrationsMeEventIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.number().int(),
  createOrder: z.boolean().optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type PostV3RegistrationsMeEventIdRequest$Outbound = {
  eventId: number;
  createOrder?: boolean | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const PostV3RegistrationsMeEventIdRequest$outboundSchema: z.ZodType<
  PostV3RegistrationsMeEventIdRequest$Outbound,
  z.ZodTypeDef,
  PostV3RegistrationsMeEventIdRequest
> = z.object({
  eventId: z.number().int(),
  createOrder: z.boolean().optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3RegistrationsMeEventIdRequest$ {
  /** @deprecated use `PostV3RegistrationsMeEventIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV3RegistrationsMeEventIdRequest$inboundSchema;
  /** @deprecated use `PostV3RegistrationsMeEventIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV3RegistrationsMeEventIdRequest$outboundSchema;
  /** @deprecated use `PostV3RegistrationsMeEventIdRequest$Outbound` instead. */
  export type Outbound = PostV3RegistrationsMeEventIdRequest$Outbound;
}

export function postV3RegistrationsMeEventIdRequestToJSON(
  postV3RegistrationsMeEventIdRequest: PostV3RegistrationsMeEventIdRequest,
): string {
  return JSON.stringify(
    PostV3RegistrationsMeEventIdRequest$outboundSchema.parse(
      postV3RegistrationsMeEventIdRequest,
    ),
  );
}

export function postV3RegistrationsMeEventIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3RegistrationsMeEventIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3RegistrationsMeEventIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3RegistrationsMeEventIdRequest' from JSON`,
  );
}

/** @internal */
export const PostV3RegistrationsMeEventIdResponse$inboundSchema: z.ZodType<
  PostV3RegistrationsMeEventIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.RegistrationDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3RegistrationsMeEventIdResponse$Outbound =
  | components.RegistrationDto$Outbound
  | string;

/** @internal */
export const PostV3RegistrationsMeEventIdResponse$outboundSchema: z.ZodType<
  PostV3RegistrationsMeEventIdResponse$Outbound,
  z.ZodTypeDef,
  PostV3RegistrationsMeEventIdResponse
> = z.union([components.RegistrationDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3RegistrationsMeEventIdResponse$ {
  /** @deprecated use `PostV3RegistrationsMeEventIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV3RegistrationsMeEventIdResponse$inboundSchema;
  /** @deprecated use `PostV3RegistrationsMeEventIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV3RegistrationsMeEventIdResponse$outboundSchema;
  /** @deprecated use `PostV3RegistrationsMeEventIdResponse$Outbound` instead. */
  export type Outbound = PostV3RegistrationsMeEventIdResponse$Outbound;
}

export function postV3RegistrationsMeEventIdResponseToJSON(
  postV3RegistrationsMeEventIdResponse: PostV3RegistrationsMeEventIdResponse,
): string {
  return JSON.stringify(
    PostV3RegistrationsMeEventIdResponse$outboundSchema.parse(
      postV3RegistrationsMeEventIdResponse,
    ),
  );
}

export function postV3RegistrationsMeEventIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3RegistrationsMeEventIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3RegistrationsMeEventIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3RegistrationsMeEventIdResponse' from JSON`,
  );
}

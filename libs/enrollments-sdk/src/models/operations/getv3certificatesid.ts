/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3CertificatesIdRequest = {
  id: number;
  format?: components.CertificateFormat | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3CertificatesIdResponse = components.CertificateDto | string;

/** @internal */
export const GetV3CertificatesIdRequest$inboundSchema: z.ZodType<
  GetV3CertificatesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  format: components.CertificateFormat$inboundSchema.optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3CertificatesIdRequest$Outbound = {
  id: number;
  format?: string | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3CertificatesIdRequest$outboundSchema: z.ZodType<
  GetV3CertificatesIdRequest$Outbound,
  z.ZodTypeDef,
  GetV3CertificatesIdRequest
> = z.object({
  id: z.number().int(),
  format: components.CertificateFormat$outboundSchema.optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3CertificatesIdRequest$ {
  /** @deprecated use `GetV3CertificatesIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3CertificatesIdRequest$inboundSchema;
  /** @deprecated use `GetV3CertificatesIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3CertificatesIdRequest$outboundSchema;
  /** @deprecated use `GetV3CertificatesIdRequest$Outbound` instead. */
  export type Outbound = GetV3CertificatesIdRequest$Outbound;
}

export function getV3CertificatesIdRequestToJSON(
  getV3CertificatesIdRequest: GetV3CertificatesIdRequest,
): string {
  return JSON.stringify(
    GetV3CertificatesIdRequest$outboundSchema.parse(getV3CertificatesIdRequest),
  );
}

export function getV3CertificatesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3CertificatesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3CertificatesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3CertificatesIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV3CertificatesIdResponse$inboundSchema: z.ZodType<
  GetV3CertificatesIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.CertificateDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3CertificatesIdResponse$Outbound =
  | components.CertificateDto$Outbound
  | string;

/** @internal */
export const GetV3CertificatesIdResponse$outboundSchema: z.ZodType<
  GetV3CertificatesIdResponse$Outbound,
  z.ZodTypeDef,
  GetV3CertificatesIdResponse
> = z.union([components.CertificateDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3CertificatesIdResponse$ {
  /** @deprecated use `GetV3CertificatesIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3CertificatesIdResponse$inboundSchema;
  /** @deprecated use `GetV3CertificatesIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3CertificatesIdResponse$outboundSchema;
  /** @deprecated use `GetV3CertificatesIdResponse$Outbound` instead. */
  export type Outbound = GetV3CertificatesIdResponse$Outbound;
}

export function getV3CertificatesIdResponseToJSON(
  getV3CertificatesIdResponse: GetV3CertificatesIdResponse,
): string {
  return JSON.stringify(
    GetV3CertificatesIdResponse$outboundSchema.parse(
      getV3CertificatesIdResponse,
    ),
  );
}

export function getV3CertificatesIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3CertificatesIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3CertificatesIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3CertificatesIdResponse' from JSON`,
  );
}

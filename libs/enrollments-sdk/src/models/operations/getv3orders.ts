/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3OrdersRequest = {
  userId?: string | undefined;
  eventId?: number | undefined;
  registrationId?: number | undefined;
  status?: components.OrderStatus | undefined;
  includeUser?: boolean | undefined;
  includeRegistration?: boolean | undefined;
  organizationId?: number | undefined;
  page?: number | undefined;
  count?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  ordering?: Array<string> | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const GetV3OrdersRequest$inboundSchema: z.ZodType<
  GetV3OrdersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UserId: z.string().optional(),
  EventId: z.number().int().optional(),
  RegistrationId: z.number().int().optional(),
  Status: components.OrderStatus$inboundSchema.optional(),
  IncludeUser: z.boolean().optional(),
  IncludeRegistration: z.boolean().optional(),
  OrganizationId: z.number().int().optional(),
  Page: z.number().int().optional(),
  Count: z.number().int().optional(),
  Limit: z.number().int().optional(),
  Offset: z.number().int().optional(),
  Ordering: z.array(z.string()).optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "UserId": "userId",
    "EventId": "eventId",
    "RegistrationId": "registrationId",
    "Status": "status",
    "IncludeUser": "includeUser",
    "IncludeRegistration": "includeRegistration",
    "OrganizationId": "organizationId",
    "Page": "page",
    "Count": "count",
    "Limit": "limit",
    "Offset": "offset",
    "Ordering": "ordering",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3OrdersRequest$Outbound = {
  UserId?: string | undefined;
  EventId?: number | undefined;
  RegistrationId?: number | undefined;
  Status?: string | undefined;
  IncludeUser?: boolean | undefined;
  IncludeRegistration?: boolean | undefined;
  OrganizationId?: number | undefined;
  Page?: number | undefined;
  Count?: number | undefined;
  Limit?: number | undefined;
  Offset?: number | undefined;
  Ordering?: Array<string> | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3OrdersRequest$outboundSchema: z.ZodType<
  GetV3OrdersRequest$Outbound,
  z.ZodTypeDef,
  GetV3OrdersRequest
> = z.object({
  userId: z.string().optional(),
  eventId: z.number().int().optional(),
  registrationId: z.number().int().optional(),
  status: components.OrderStatus$outboundSchema.optional(),
  includeUser: z.boolean().optional(),
  includeRegistration: z.boolean().optional(),
  organizationId: z.number().int().optional(),
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  ordering: z.array(z.string()).optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "UserId",
    eventId: "EventId",
    registrationId: "RegistrationId",
    status: "Status",
    includeUser: "IncludeUser",
    includeRegistration: "IncludeRegistration",
    organizationId: "OrganizationId",
    page: "Page",
    count: "Count",
    limit: "Limit",
    offset: "Offset",
    ordering: "Ordering",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrdersRequest$ {
  /** @deprecated use `GetV3OrdersRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3OrdersRequest$inboundSchema;
  /** @deprecated use `GetV3OrdersRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3OrdersRequest$outboundSchema;
  /** @deprecated use `GetV3OrdersRequest$Outbound` instead. */
  export type Outbound = GetV3OrdersRequest$Outbound;
}

export function getV3OrdersRequestToJSON(
  getV3OrdersRequest: GetV3OrdersRequest,
): string {
  return JSON.stringify(
    GetV3OrdersRequest$outboundSchema.parse(getV3OrdersRequest),
  );
}

export function getV3OrdersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3OrdersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3OrdersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3OrdersRequest' from JSON`,
  );
}

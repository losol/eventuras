/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3EventsEventIdProductsProductIdVariantsRequest = {
  eventId: number;
  productId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  newProductVariantDto?: components.NewProductVariantDto | undefined;
};

/** @internal */
export const PostV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema:
  z.ZodType<
    PostV3EventsEventIdProductsProductIdVariantsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    eventId: z.number().int(),
    productId: z.number().int(),
    "Eventuras-Org-Id": z.number().int().optional(),
    NewProductVariantDto: components.NewProductVariantDto$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "Eventuras-Org-Id": "eventurasOrgId",
      "NewProductVariantDto": "newProductVariantDto",
    });
  });

/** @internal */
export type PostV3EventsEventIdProductsProductIdVariantsRequest$Outbound = {
  eventId: number;
  productId: number;
  "Eventuras-Org-Id"?: number | undefined;
  NewProductVariantDto?: components.NewProductVariantDto$Outbound | undefined;
};

/** @internal */
export const PostV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema:
  z.ZodType<
    PostV3EventsEventIdProductsProductIdVariantsRequest$Outbound,
    z.ZodTypeDef,
    PostV3EventsEventIdProductsProductIdVariantsRequest
  > = z.object({
    eventId: z.number().int(),
    productId: z.number().int(),
    eventurasOrgId: z.number().int().optional(),
    newProductVariantDto: components.NewProductVariantDto$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
      newProductVariantDto: "NewProductVariantDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventsEventIdProductsProductIdVariantsRequest$ {
  /** @deprecated use `PostV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema;
  /** @deprecated use `PostV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema;
  /** @deprecated use `PostV3EventsEventIdProductsProductIdVariantsRequest$Outbound` instead. */
  export type Outbound =
    PostV3EventsEventIdProductsProductIdVariantsRequest$Outbound;
}

export function postV3EventsEventIdProductsProductIdVariantsRequestToJSON(
  postV3EventsEventIdProductsProductIdVariantsRequest:
    PostV3EventsEventIdProductsProductIdVariantsRequest,
): string {
  return JSON.stringify(
    PostV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema.parse(
      postV3EventsEventIdProductsProductIdVariantsRequest,
    ),
  );
}

export function postV3EventsEventIdProductsProductIdVariantsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV3EventsEventIdProductsProductIdVariantsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV3EventsEventIdProductsProductIdVariantsRequest' from JSON`,
  );
}

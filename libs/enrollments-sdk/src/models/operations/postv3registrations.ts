/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3RegistrationsRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  newRegistrationDto?: components.NewRegistrationDto | undefined;
};

export type PostV3RegistrationsResponse = components.RegistrationDto | string;

/** @internal */
export const PostV3RegistrationsRequest$inboundSchema: z.ZodType<
  PostV3RegistrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  NewRegistrationDto: components.NewRegistrationDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "NewRegistrationDto": "newRegistrationDto",
  });
});

/** @internal */
export type PostV3RegistrationsRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  NewRegistrationDto?: components.NewRegistrationDto$Outbound | undefined;
};

/** @internal */
export const PostV3RegistrationsRequest$outboundSchema: z.ZodType<
  PostV3RegistrationsRequest$Outbound,
  z.ZodTypeDef,
  PostV3RegistrationsRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  newRegistrationDto: components.NewRegistrationDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    newRegistrationDto: "NewRegistrationDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3RegistrationsRequest$ {
  /** @deprecated use `PostV3RegistrationsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3RegistrationsRequest$inboundSchema;
  /** @deprecated use `PostV3RegistrationsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3RegistrationsRequest$outboundSchema;
  /** @deprecated use `PostV3RegistrationsRequest$Outbound` instead. */
  export type Outbound = PostV3RegistrationsRequest$Outbound;
}

export function postV3RegistrationsRequestToJSON(
  postV3RegistrationsRequest: PostV3RegistrationsRequest,
): string {
  return JSON.stringify(
    PostV3RegistrationsRequest$outboundSchema.parse(postV3RegistrationsRequest),
  );
}

export function postV3RegistrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3RegistrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3RegistrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3RegistrationsRequest' from JSON`,
  );
}

/** @internal */
export const PostV3RegistrationsResponse$inboundSchema: z.ZodType<
  PostV3RegistrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.RegistrationDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3RegistrationsResponse$Outbound =
  | components.RegistrationDto$Outbound
  | string;

/** @internal */
export const PostV3RegistrationsResponse$outboundSchema: z.ZodType<
  PostV3RegistrationsResponse$Outbound,
  z.ZodTypeDef,
  PostV3RegistrationsResponse
> = z.union([components.RegistrationDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3RegistrationsResponse$ {
  /** @deprecated use `PostV3RegistrationsResponse$inboundSchema` instead. */
  export const inboundSchema = PostV3RegistrationsResponse$inboundSchema;
  /** @deprecated use `PostV3RegistrationsResponse$outboundSchema` instead. */
  export const outboundSchema = PostV3RegistrationsResponse$outboundSchema;
  /** @deprecated use `PostV3RegistrationsResponse$Outbound` instead. */
  export type Outbound = PostV3RegistrationsResponse$Outbound;
}

export function postV3RegistrationsResponseToJSON(
  postV3RegistrationsResponse: PostV3RegistrationsResponse,
): string {
  return JSON.stringify(
    PostV3RegistrationsResponse$outboundSchema.parse(
      postV3RegistrationsResponse,
    ),
  );
}

export function postV3RegistrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3RegistrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3RegistrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3RegistrationsResponse' from JSON`,
  );
}

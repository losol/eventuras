/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3EventsRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  /**
   * Event information.
   */
  eventFormDto?: components.EventFormDto | undefined;
};

/** @internal */
export const PostV3EventsRequest$inboundSchema: z.ZodType<
  PostV3EventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  EventFormDto: components.EventFormDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "EventFormDto": "eventFormDto",
  });
});

/** @internal */
export type PostV3EventsRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  EventFormDto?: components.EventFormDto$Outbound | undefined;
};

/** @internal */
export const PostV3EventsRequest$outboundSchema: z.ZodType<
  PostV3EventsRequest$Outbound,
  z.ZodTypeDef,
  PostV3EventsRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  eventFormDto: components.EventFormDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    eventFormDto: "EventFormDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventsRequest$ {
  /** @deprecated use `PostV3EventsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3EventsRequest$inboundSchema;
  /** @deprecated use `PostV3EventsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3EventsRequest$outboundSchema;
  /** @deprecated use `PostV3EventsRequest$Outbound` instead. */
  export type Outbound = PostV3EventsRequest$Outbound;
}

export function postV3EventsRequestToJSON(
  postV3EventsRequest: PostV3EventsRequest,
): string {
  return JSON.stringify(
    PostV3EventsRequest$outboundSchema.parse(postV3EventsRequest),
  );
}

export function postV3EventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3EventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3EventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3EventsRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3EventsEventIdProductsProductIdVariantsRequest = {
  eventId: number;
  productId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3EventsEventIdProductsProductIdVariantsResponse =
  | string
  | Array<components.ProductVariantDto>
  | Array<components.ProductVariantDto>;

/** @internal */
export const GetV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema:
  z.ZodType<
    GetV3EventsEventIdProductsProductIdVariantsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    eventId: z.number().int(),
    productId: z.number().int(),
    "Eventuras-Org-Id": z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Eventuras-Org-Id": "eventurasOrgId",
    });
  });

/** @internal */
export type GetV3EventsEventIdProductsProductIdVariantsRequest$Outbound = {
  eventId: number;
  productId: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema:
  z.ZodType<
    GetV3EventsEventIdProductsProductIdVariantsRequest$Outbound,
    z.ZodTypeDef,
    GetV3EventsEventIdProductsProductIdVariantsRequest
  > = z.object({
    eventId: z.number().int(),
    productId: z.number().int(),
    eventurasOrgId: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdProductsProductIdVariantsRequest$ {
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsRequest$Outbound` instead. */
  export type Outbound =
    GetV3EventsEventIdProductsProductIdVariantsRequest$Outbound;
}

export function getV3EventsEventIdProductsProductIdVariantsRequestToJSON(
  getV3EventsEventIdProductsProductIdVariantsRequest:
    GetV3EventsEventIdProductsProductIdVariantsRequest,
): string {
  return JSON.stringify(
    GetV3EventsEventIdProductsProductIdVariantsRequest$outboundSchema.parse(
      getV3EventsEventIdProductsProductIdVariantsRequest,
    ),
  );
}

export function getV3EventsEventIdProductsProductIdVariantsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3EventsEventIdProductsProductIdVariantsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventsEventIdProductsProductIdVariantsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3EventsEventIdProductsProductIdVariantsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3EventsEventIdProductsProductIdVariantsResponse$inboundSchema:
  z.ZodType<
    GetV3EventsEventIdProductsProductIdVariantsResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(components.ProductVariantDto$inboundSchema),
    z.array(components.ProductVariantDto$inboundSchema),
  ]);

/** @internal */
export type GetV3EventsEventIdProductsProductIdVariantsResponse$Outbound =
  | string
  | Array<components.ProductVariantDto$Outbound>
  | Array<components.ProductVariantDto$Outbound>;

/** @internal */
export const GetV3EventsEventIdProductsProductIdVariantsResponse$outboundSchema:
  z.ZodType<
    GetV3EventsEventIdProductsProductIdVariantsResponse$Outbound,
    z.ZodTypeDef,
    GetV3EventsEventIdProductsProductIdVariantsResponse
  > = z.union([
    z.string(),
    z.array(components.ProductVariantDto$outboundSchema),
    z.array(components.ProductVariantDto$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdProductsProductIdVariantsResponse$ {
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3EventsEventIdProductsProductIdVariantsResponse$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdProductsProductIdVariantsResponse$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsProductIdVariantsResponse$Outbound` instead. */
  export type Outbound =
    GetV3EventsEventIdProductsProductIdVariantsResponse$Outbound;
}

export function getV3EventsEventIdProductsProductIdVariantsResponseToJSON(
  getV3EventsEventIdProductsProductIdVariantsResponse:
    GetV3EventsEventIdProductsProductIdVariantsResponse,
): string {
  return JSON.stringify(
    GetV3EventsEventIdProductsProductIdVariantsResponse$outboundSchema.parse(
      getV3EventsEventIdProductsProductIdVariantsResponse,
    ),
  );
}

export function getV3EventsEventIdProductsProductIdVariantsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3EventsEventIdProductsProductIdVariantsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventsEventIdProductsProductIdVariantsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3EventsEventIdProductsProductIdVariantsResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3NotificationsSmsRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  smsNotificationDto?: components.SmsNotificationDto | undefined;
};

export type PostV3NotificationsSmsResponse =
  | components.NotificationDto
  | string;

/** @internal */
export const PostV3NotificationsSmsRequest$inboundSchema: z.ZodType<
  PostV3NotificationsSmsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  SmsNotificationDto: components.SmsNotificationDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "SmsNotificationDto": "smsNotificationDto",
  });
});

/** @internal */
export type PostV3NotificationsSmsRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  SmsNotificationDto?: components.SmsNotificationDto$Outbound | undefined;
};

/** @internal */
export const PostV3NotificationsSmsRequest$outboundSchema: z.ZodType<
  PostV3NotificationsSmsRequest$Outbound,
  z.ZodTypeDef,
  PostV3NotificationsSmsRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  smsNotificationDto: components.SmsNotificationDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    smsNotificationDto: "SmsNotificationDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3NotificationsSmsRequest$ {
  /** @deprecated use `PostV3NotificationsSmsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3NotificationsSmsRequest$inboundSchema;
  /** @deprecated use `PostV3NotificationsSmsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3NotificationsSmsRequest$outboundSchema;
  /** @deprecated use `PostV3NotificationsSmsRequest$Outbound` instead. */
  export type Outbound = PostV3NotificationsSmsRequest$Outbound;
}

export function postV3NotificationsSmsRequestToJSON(
  postV3NotificationsSmsRequest: PostV3NotificationsSmsRequest,
): string {
  return JSON.stringify(
    PostV3NotificationsSmsRequest$outboundSchema.parse(
      postV3NotificationsSmsRequest,
    ),
  );
}

export function postV3NotificationsSmsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3NotificationsSmsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3NotificationsSmsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3NotificationsSmsRequest' from JSON`,
  );
}

/** @internal */
export const PostV3NotificationsSmsResponse$inboundSchema: z.ZodType<
  PostV3NotificationsSmsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.NotificationDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3NotificationsSmsResponse$Outbound =
  | components.NotificationDto$Outbound
  | string;

/** @internal */
export const PostV3NotificationsSmsResponse$outboundSchema: z.ZodType<
  PostV3NotificationsSmsResponse$Outbound,
  z.ZodTypeDef,
  PostV3NotificationsSmsResponse
> = z.union([components.NotificationDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3NotificationsSmsResponse$ {
  /** @deprecated use `PostV3NotificationsSmsResponse$inboundSchema` instead. */
  export const inboundSchema = PostV3NotificationsSmsResponse$inboundSchema;
  /** @deprecated use `PostV3NotificationsSmsResponse$outboundSchema` instead. */
  export const outboundSchema = PostV3NotificationsSmsResponse$outboundSchema;
  /** @deprecated use `PostV3NotificationsSmsResponse$Outbound` instead. */
  export type Outbound = PostV3NotificationsSmsResponse$Outbound;
}

export function postV3NotificationsSmsResponseToJSON(
  postV3NotificationsSmsResponse: PostV3NotificationsSmsResponse,
): string {
  return JSON.stringify(
    PostV3NotificationsSmsResponse$outboundSchema.parse(
      postV3NotificationsSmsResponse,
    ),
  );
}

export function postV3NotificationsSmsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3NotificationsSmsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3NotificationsSmsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3NotificationsSmsResponse' from JSON`,
  );
}

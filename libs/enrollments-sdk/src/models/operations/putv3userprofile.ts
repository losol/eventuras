/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV3UserprofileRequest = {
  id?: string | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  userFormDto?: components.UserFormDto | undefined;
};

export type PutV3UserprofileResponse = components.UserDto | string;

/** @internal */
export const PutV3UserprofileRequest$inboundSchema: z.ZodType<
  PutV3UserprofileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
  UserFormDto: components.UserFormDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "UserFormDto": "userFormDto",
  });
});

/** @internal */
export type PutV3UserprofileRequest$Outbound = {
  id?: string | undefined;
  "Eventuras-Org-Id"?: number | undefined;
  UserFormDto?: components.UserFormDto$Outbound | undefined;
};

/** @internal */
export const PutV3UserprofileRequest$outboundSchema: z.ZodType<
  PutV3UserprofileRequest$Outbound,
  z.ZodTypeDef,
  PutV3UserprofileRequest
> = z.object({
  id: z.string().optional(),
  eventurasOrgId: z.number().int().optional(),
  userFormDto: components.UserFormDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    userFormDto: "UserFormDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3UserprofileRequest$ {
  /** @deprecated use `PutV3UserprofileRequest$inboundSchema` instead. */
  export const inboundSchema = PutV3UserprofileRequest$inboundSchema;
  /** @deprecated use `PutV3UserprofileRequest$outboundSchema` instead. */
  export const outboundSchema = PutV3UserprofileRequest$outboundSchema;
  /** @deprecated use `PutV3UserprofileRequest$Outbound` instead. */
  export type Outbound = PutV3UserprofileRequest$Outbound;
}

export function putV3UserprofileRequestToJSON(
  putV3UserprofileRequest: PutV3UserprofileRequest,
): string {
  return JSON.stringify(
    PutV3UserprofileRequest$outboundSchema.parse(putV3UserprofileRequest),
  );
}

export function putV3UserprofileRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV3UserprofileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3UserprofileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3UserprofileRequest' from JSON`,
  );
}

/** @internal */
export const PutV3UserprofileResponse$inboundSchema: z.ZodType<
  PutV3UserprofileResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.UserDto$inboundSchema, z.string()]);

/** @internal */
export type PutV3UserprofileResponse$Outbound =
  | components.UserDto$Outbound
  | string;

/** @internal */
export const PutV3UserprofileResponse$outboundSchema: z.ZodType<
  PutV3UserprofileResponse$Outbound,
  z.ZodTypeDef,
  PutV3UserprofileResponse
> = z.union([components.UserDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3UserprofileResponse$ {
  /** @deprecated use `PutV3UserprofileResponse$inboundSchema` instead. */
  export const inboundSchema = PutV3UserprofileResponse$inboundSchema;
  /** @deprecated use `PutV3UserprofileResponse$outboundSchema` instead. */
  export const outboundSchema = PutV3UserprofileResponse$outboundSchema;
  /** @deprecated use `PutV3UserprofileResponse$Outbound` instead. */
  export type Outbound = PutV3UserprofileResponse$Outbound;
}

export function putV3UserprofileResponseToJSON(
  putV3UserprofileResponse: PutV3UserprofileResponse,
): string {
  return JSON.stringify(
    PutV3UserprofileResponse$outboundSchema.parse(putV3UserprofileResponse),
  );
}

export function putV3UserprofileResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV3UserprofileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3UserprofileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3UserprofileResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3UsersMeRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3UsersMeResponse = components.UserDto | string;

/** @internal */
export const GetV3UsersMeRequest$inboundSchema: z.ZodType<
  GetV3UsersMeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3UsersMeRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3UsersMeRequest$outboundSchema: z.ZodType<
  GetV3UsersMeRequest$Outbound,
  z.ZodTypeDef,
  GetV3UsersMeRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3UsersMeRequest$ {
  /** @deprecated use `GetV3UsersMeRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3UsersMeRequest$inboundSchema;
  /** @deprecated use `GetV3UsersMeRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3UsersMeRequest$outboundSchema;
  /** @deprecated use `GetV3UsersMeRequest$Outbound` instead. */
  export type Outbound = GetV3UsersMeRequest$Outbound;
}

export function getV3UsersMeRequestToJSON(
  getV3UsersMeRequest: GetV3UsersMeRequest,
): string {
  return JSON.stringify(
    GetV3UsersMeRequest$outboundSchema.parse(getV3UsersMeRequest),
  );
}

export function getV3UsersMeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3UsersMeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3UsersMeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3UsersMeRequest' from JSON`,
  );
}

/** @internal */
export const GetV3UsersMeResponse$inboundSchema: z.ZodType<
  GetV3UsersMeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.UserDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3UsersMeResponse$Outbound =
  | components.UserDto$Outbound
  | string;

/** @internal */
export const GetV3UsersMeResponse$outboundSchema: z.ZodType<
  GetV3UsersMeResponse$Outbound,
  z.ZodTypeDef,
  GetV3UsersMeResponse
> = z.union([components.UserDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3UsersMeResponse$ {
  /** @deprecated use `GetV3UsersMeResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3UsersMeResponse$inboundSchema;
  /** @deprecated use `GetV3UsersMeResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3UsersMeResponse$outboundSchema;
  /** @deprecated use `GetV3UsersMeResponse$Outbound` instead. */
  export type Outbound = GetV3UsersMeResponse$Outbound;
}

export function getV3UsersMeResponseToJSON(
  getV3UsersMeResponse: GetV3UsersMeResponse,
): string {
  return JSON.stringify(
    GetV3UsersMeResponse$outboundSchema.parse(getV3UsersMeResponse),
  );
}

export function getV3UsersMeResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3UsersMeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3UsersMeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3UsersMeResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3NotificationsRequest = {
  eventId?: number | undefined;
  productId?: number | undefined;
  status?: components.NotificationStatus | undefined;
  type?: components.NotificationType | undefined;
  recipientUserId?: string | undefined;
  order?: components.NotificationListOrder | undefined;
  desc?: boolean | undefined;
  /**
   * Whether to include delivery statistics into response.
   */
  includeStatistics?: boolean | undefined;
  page?: number | undefined;
  count?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  ordering?: Array<string> | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const GetV3NotificationsRequest$inboundSchema: z.ZodType<
  GetV3NotificationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  EventId: z.number().int().optional(),
  ProductId: z.number().int().optional(),
  Status: components.NotificationStatus$inboundSchema.optional(),
  Type: components.NotificationType$inboundSchema.optional(),
  RecipientUserId: z.string().optional(),
  Order: components.NotificationListOrder$inboundSchema.optional(),
  Desc: z.boolean().optional(),
  IncludeStatistics: z.boolean().optional(),
  Page: z.number().int().optional(),
  Count: z.number().int().optional(),
  Limit: z.number().int().optional(),
  Offset: z.number().int().optional(),
  Ordering: z.array(z.string()).optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "EventId": "eventId",
    "ProductId": "productId",
    "Status": "status",
    "Type": "type",
    "RecipientUserId": "recipientUserId",
    "Order": "order",
    "Desc": "desc",
    "IncludeStatistics": "includeStatistics",
    "Page": "page",
    "Count": "count",
    "Limit": "limit",
    "Offset": "offset",
    "Ordering": "ordering",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3NotificationsRequest$Outbound = {
  EventId?: number | undefined;
  ProductId?: number | undefined;
  Status?: string | undefined;
  Type?: string | undefined;
  RecipientUserId?: string | undefined;
  Order?: string | undefined;
  Desc?: boolean | undefined;
  IncludeStatistics?: boolean | undefined;
  Page?: number | undefined;
  Count?: number | undefined;
  Limit?: number | undefined;
  Offset?: number | undefined;
  Ordering?: Array<string> | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3NotificationsRequest$outboundSchema: z.ZodType<
  GetV3NotificationsRequest$Outbound,
  z.ZodTypeDef,
  GetV3NotificationsRequest
> = z.object({
  eventId: z.number().int().optional(),
  productId: z.number().int().optional(),
  status: components.NotificationStatus$outboundSchema.optional(),
  type: components.NotificationType$outboundSchema.optional(),
  recipientUserId: z.string().optional(),
  order: components.NotificationListOrder$outboundSchema.optional(),
  desc: z.boolean().optional(),
  includeStatistics: z.boolean().optional(),
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  ordering: z.array(z.string()).optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventId: "EventId",
    productId: "ProductId",
    status: "Status",
    type: "Type",
    recipientUserId: "RecipientUserId",
    order: "Order",
    desc: "Desc",
    includeStatistics: "IncludeStatistics",
    page: "Page",
    count: "Count",
    limit: "Limit",
    offset: "Offset",
    ordering: "Ordering",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3NotificationsRequest$ {
  /** @deprecated use `GetV3NotificationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3NotificationsRequest$inboundSchema;
  /** @deprecated use `GetV3NotificationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3NotificationsRequest$outboundSchema;
  /** @deprecated use `GetV3NotificationsRequest$Outbound` instead. */
  export type Outbound = GetV3NotificationsRequest$Outbound;
}

export function getV3NotificationsRequestToJSON(
  getV3NotificationsRequest: GetV3NotificationsRequest,
): string {
  return JSON.stringify(
    GetV3NotificationsRequest$outboundSchema.parse(getV3NotificationsRequest),
  );
}

export function getV3NotificationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3NotificationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3NotificationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3NotificationsRequest' from JSON`,
  );
}

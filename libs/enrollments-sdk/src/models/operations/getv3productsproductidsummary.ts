/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3ProductsProductIdSummaryRequest = {
  productId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3ProductsProductIdSummaryResponse =
  | components.ProductDeliverySummaryDto
  | string;

/** @internal */
export const GetV3ProductsProductIdSummaryRequest$inboundSchema: z.ZodType<
  GetV3ProductsProductIdSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  productId: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3ProductsProductIdSummaryRequest$Outbound = {
  productId: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3ProductsProductIdSummaryRequest$outboundSchema: z.ZodType<
  GetV3ProductsProductIdSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetV3ProductsProductIdSummaryRequest
> = z.object({
  productId: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3ProductsProductIdSummaryRequest$ {
  /** @deprecated use `GetV3ProductsProductIdSummaryRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3ProductsProductIdSummaryRequest$inboundSchema;
  /** @deprecated use `GetV3ProductsProductIdSummaryRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3ProductsProductIdSummaryRequest$outboundSchema;
  /** @deprecated use `GetV3ProductsProductIdSummaryRequest$Outbound` instead. */
  export type Outbound = GetV3ProductsProductIdSummaryRequest$Outbound;
}

export function getV3ProductsProductIdSummaryRequestToJSON(
  getV3ProductsProductIdSummaryRequest: GetV3ProductsProductIdSummaryRequest,
): string {
  return JSON.stringify(
    GetV3ProductsProductIdSummaryRequest$outboundSchema.parse(
      getV3ProductsProductIdSummaryRequest,
    ),
  );
}

export function getV3ProductsProductIdSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3ProductsProductIdSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3ProductsProductIdSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3ProductsProductIdSummaryRequest' from JSON`,
  );
}

/** @internal */
export const GetV3ProductsProductIdSummaryResponse$inboundSchema: z.ZodType<
  GetV3ProductsProductIdSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ProductDeliverySummaryDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3ProductsProductIdSummaryResponse$Outbound =
  | components.ProductDeliverySummaryDto$Outbound
  | string;

/** @internal */
export const GetV3ProductsProductIdSummaryResponse$outboundSchema: z.ZodType<
  GetV3ProductsProductIdSummaryResponse$Outbound,
  z.ZodTypeDef,
  GetV3ProductsProductIdSummaryResponse
> = z.union([components.ProductDeliverySummaryDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3ProductsProductIdSummaryResponse$ {
  /** @deprecated use `GetV3ProductsProductIdSummaryResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3ProductsProductIdSummaryResponse$inboundSchema;
  /** @deprecated use `GetV3ProductsProductIdSummaryResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3ProductsProductIdSummaryResponse$outboundSchema;
  /** @deprecated use `GetV3ProductsProductIdSummaryResponse$Outbound` instead. */
  export type Outbound = GetV3ProductsProductIdSummaryResponse$Outbound;
}

export function getV3ProductsProductIdSummaryResponseToJSON(
  getV3ProductsProductIdSummaryResponse: GetV3ProductsProductIdSummaryResponse,
): string {
  return JSON.stringify(
    GetV3ProductsProductIdSummaryResponse$outboundSchema.parse(
      getV3ProductsProductIdSummaryResponse,
    ),
  );
}

export function getV3ProductsProductIdSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3ProductsProductIdSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3ProductsProductIdSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3ProductsProductIdSummaryResponse' from JSON`,
  );
}

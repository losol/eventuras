/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3EventsEventIdStatisticsRequest = {
  eventId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3EventsEventIdStatisticsResponse =
  | components.EventStatisticsDto
  | string;

/** @internal */
export const GetV3EventsEventIdStatisticsRequest$inboundSchema: z.ZodType<
  GetV3EventsEventIdStatisticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3EventsEventIdStatisticsRequest$Outbound = {
  eventId: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3EventsEventIdStatisticsRequest$outboundSchema: z.ZodType<
  GetV3EventsEventIdStatisticsRequest$Outbound,
  z.ZodTypeDef,
  GetV3EventsEventIdStatisticsRequest
> = z.object({
  eventId: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdStatisticsRequest$ {
  /** @deprecated use `GetV3EventsEventIdStatisticsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3EventsEventIdStatisticsRequest$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdStatisticsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdStatisticsRequest$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdStatisticsRequest$Outbound` instead. */
  export type Outbound = GetV3EventsEventIdStatisticsRequest$Outbound;
}

export function getV3EventsEventIdStatisticsRequestToJSON(
  getV3EventsEventIdStatisticsRequest: GetV3EventsEventIdStatisticsRequest,
): string {
  return JSON.stringify(
    GetV3EventsEventIdStatisticsRequest$outboundSchema.parse(
      getV3EventsEventIdStatisticsRequest,
    ),
  );
}

export function getV3EventsEventIdStatisticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventsEventIdStatisticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventsEventIdStatisticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventsEventIdStatisticsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3EventsEventIdStatisticsResponse$inboundSchema: z.ZodType<
  GetV3EventsEventIdStatisticsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.EventStatisticsDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3EventsEventIdStatisticsResponse$Outbound =
  | components.EventStatisticsDto$Outbound
  | string;

/** @internal */
export const GetV3EventsEventIdStatisticsResponse$outboundSchema: z.ZodType<
  GetV3EventsEventIdStatisticsResponse$Outbound,
  z.ZodTypeDef,
  GetV3EventsEventIdStatisticsResponse
> = z.union([components.EventStatisticsDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdStatisticsResponse$ {
  /** @deprecated use `GetV3EventsEventIdStatisticsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3EventsEventIdStatisticsResponse$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdStatisticsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdStatisticsResponse$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdStatisticsResponse$Outbound` instead. */
  export type Outbound = GetV3EventsEventIdStatisticsResponse$Outbound;
}

export function getV3EventsEventIdStatisticsResponseToJSON(
  getV3EventsEventIdStatisticsResponse: GetV3EventsEventIdStatisticsResponse,
): string {
  return JSON.stringify(
    GetV3EventsEventIdStatisticsResponse$outboundSchema.parse(
      getV3EventsEventIdStatisticsResponse,
    ),
  );
}

export function getV3EventsEventIdStatisticsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventsEventIdStatisticsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventsEventIdStatisticsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventsEventIdStatisticsResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3OnlinecoursesRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3OnlinecoursesResponse =
  | string
  | Array<components.OnlineCourseDto>
  | Array<components.OnlineCourseDto>;

/** @internal */
export const GetV3OnlinecoursesRequest$inboundSchema: z.ZodType<
  GetV3OnlinecoursesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3OnlinecoursesRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3OnlinecoursesRequest$outboundSchema: z.ZodType<
  GetV3OnlinecoursesRequest$Outbound,
  z.ZodTypeDef,
  GetV3OnlinecoursesRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OnlinecoursesRequest$ {
  /** @deprecated use `GetV3OnlinecoursesRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3OnlinecoursesRequest$inboundSchema;
  /** @deprecated use `GetV3OnlinecoursesRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3OnlinecoursesRequest$outboundSchema;
  /** @deprecated use `GetV3OnlinecoursesRequest$Outbound` instead. */
  export type Outbound = GetV3OnlinecoursesRequest$Outbound;
}

export function getV3OnlinecoursesRequestToJSON(
  getV3OnlinecoursesRequest: GetV3OnlinecoursesRequest,
): string {
  return JSON.stringify(
    GetV3OnlinecoursesRequest$outboundSchema.parse(getV3OnlinecoursesRequest),
  );
}

export function getV3OnlinecoursesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3OnlinecoursesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3OnlinecoursesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3OnlinecoursesRequest' from JSON`,
  );
}

/** @internal */
export const GetV3OnlinecoursesResponse$inboundSchema: z.ZodType<
  GetV3OnlinecoursesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.OnlineCourseDto$inboundSchema),
  z.array(components.OnlineCourseDto$inboundSchema),
]);

/** @internal */
export type GetV3OnlinecoursesResponse$Outbound =
  | string
  | Array<components.OnlineCourseDto$Outbound>
  | Array<components.OnlineCourseDto$Outbound>;

/** @internal */
export const GetV3OnlinecoursesResponse$outboundSchema: z.ZodType<
  GetV3OnlinecoursesResponse$Outbound,
  z.ZodTypeDef,
  GetV3OnlinecoursesResponse
> = z.union([
  z.string(),
  z.array(components.OnlineCourseDto$outboundSchema),
  z.array(components.OnlineCourseDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OnlinecoursesResponse$ {
  /** @deprecated use `GetV3OnlinecoursesResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3OnlinecoursesResponse$inboundSchema;
  /** @deprecated use `GetV3OnlinecoursesResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3OnlinecoursesResponse$outboundSchema;
  /** @deprecated use `GetV3OnlinecoursesResponse$Outbound` instead. */
  export type Outbound = GetV3OnlinecoursesResponse$Outbound;
}

export function getV3OnlinecoursesResponseToJSON(
  getV3OnlinecoursesResponse: GetV3OnlinecoursesResponse,
): string {
  return JSON.stringify(
    GetV3OnlinecoursesResponse$outboundSchema.parse(getV3OnlinecoursesResponse),
  );
}

export function getV3OnlinecoursesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3OnlinecoursesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3OnlinecoursesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3OnlinecoursesResponse' from JSON`,
  );
}

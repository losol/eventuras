/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3RegistrationsRequest = {
  eventId?: number | undefined;
  userId?: string | undefined;
  includeEventInfo?: boolean | undefined;
  includeUserInfo?: boolean | undefined;
  includeProducts?: boolean | undefined;
  includeOrders?: boolean | undefined;
  page?: number | undefined;
  count?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  ordering?: Array<string> | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3RegistrationsResponse =
  | components.RegistrationDtoPageResponseDto
  | string;

/** @internal */
export const GetV3RegistrationsRequest$inboundSchema: z.ZodType<
  GetV3RegistrationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  EventId: z.number().int().optional(),
  UserId: z.string().optional(),
  IncludeEventInfo: z.boolean().optional(),
  IncludeUserInfo: z.boolean().optional(),
  IncludeProducts: z.boolean().optional(),
  IncludeOrders: z.boolean().optional(),
  Page: z.number().int().optional(),
  Count: z.number().int().optional(),
  Limit: z.number().int().optional(),
  Offset: z.number().int().optional(),
  Ordering: z.array(z.string()).optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "EventId": "eventId",
    "UserId": "userId",
    "IncludeEventInfo": "includeEventInfo",
    "IncludeUserInfo": "includeUserInfo",
    "IncludeProducts": "includeProducts",
    "IncludeOrders": "includeOrders",
    "Page": "page",
    "Count": "count",
    "Limit": "limit",
    "Offset": "offset",
    "Ordering": "ordering",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3RegistrationsRequest$Outbound = {
  EventId?: number | undefined;
  UserId?: string | undefined;
  IncludeEventInfo?: boolean | undefined;
  IncludeUserInfo?: boolean | undefined;
  IncludeProducts?: boolean | undefined;
  IncludeOrders?: boolean | undefined;
  Page?: number | undefined;
  Count?: number | undefined;
  Limit?: number | undefined;
  Offset?: number | undefined;
  Ordering?: Array<string> | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3RegistrationsRequest$outboundSchema: z.ZodType<
  GetV3RegistrationsRequest$Outbound,
  z.ZodTypeDef,
  GetV3RegistrationsRequest
> = z.object({
  eventId: z.number().int().optional(),
  userId: z.string().optional(),
  includeEventInfo: z.boolean().optional(),
  includeUserInfo: z.boolean().optional(),
  includeProducts: z.boolean().optional(),
  includeOrders: z.boolean().optional(),
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  ordering: z.array(z.string()).optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventId: "EventId",
    userId: "UserId",
    includeEventInfo: "IncludeEventInfo",
    includeUserInfo: "IncludeUserInfo",
    includeProducts: "IncludeProducts",
    includeOrders: "IncludeOrders",
    page: "Page",
    count: "Count",
    limit: "Limit",
    offset: "Offset",
    ordering: "Ordering",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3RegistrationsRequest$ {
  /** @deprecated use `GetV3RegistrationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3RegistrationsRequest$inboundSchema;
  /** @deprecated use `GetV3RegistrationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3RegistrationsRequest$outboundSchema;
  /** @deprecated use `GetV3RegistrationsRequest$Outbound` instead. */
  export type Outbound = GetV3RegistrationsRequest$Outbound;
}

export function getV3RegistrationsRequestToJSON(
  getV3RegistrationsRequest: GetV3RegistrationsRequest,
): string {
  return JSON.stringify(
    GetV3RegistrationsRequest$outboundSchema.parse(getV3RegistrationsRequest),
  );
}

export function getV3RegistrationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3RegistrationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3RegistrationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3RegistrationsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3RegistrationsResponse$inboundSchema: z.ZodType<
  GetV3RegistrationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.RegistrationDtoPageResponseDto$inboundSchema,
  z.string(),
]);

/** @internal */
export type GetV3RegistrationsResponse$Outbound =
  | components.RegistrationDtoPageResponseDto$Outbound
  | string;

/** @internal */
export const GetV3RegistrationsResponse$outboundSchema: z.ZodType<
  GetV3RegistrationsResponse$Outbound,
  z.ZodTypeDef,
  GetV3RegistrationsResponse
> = z.union([
  components.RegistrationDtoPageResponseDto$outboundSchema,
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3RegistrationsResponse$ {
  /** @deprecated use `GetV3RegistrationsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3RegistrationsResponse$inboundSchema;
  /** @deprecated use `GetV3RegistrationsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3RegistrationsResponse$outboundSchema;
  /** @deprecated use `GetV3RegistrationsResponse$Outbound` instead. */
  export type Outbound = GetV3RegistrationsResponse$Outbound;
}

export function getV3RegistrationsResponseToJSON(
  getV3RegistrationsResponse: GetV3RegistrationsResponse,
): string {
  return JSON.stringify(
    GetV3RegistrationsResponse$outboundSchema.parse(getV3RegistrationsResponse),
  );
}

export function getV3RegistrationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3RegistrationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3RegistrationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3RegistrationsResponse' from JSON`,
  );
}

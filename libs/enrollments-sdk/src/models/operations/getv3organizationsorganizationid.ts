/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3OrganizationsOrganizationIdRequest = {
  organizationId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3OrganizationsOrganizationIdResponse =
  | components.OrganizationDto
  | string;

/** @internal */
export const GetV3OrganizationsOrganizationIdRequest$inboundSchema: z.ZodType<
  GetV3OrganizationsOrganizationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3OrganizationsOrganizationIdRequest$Outbound = {
  organizationId: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3OrganizationsOrganizationIdRequest$outboundSchema: z.ZodType<
  GetV3OrganizationsOrganizationIdRequest$Outbound,
  z.ZodTypeDef,
  GetV3OrganizationsOrganizationIdRequest
> = z.object({
  organizationId: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdRequest$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdRequest$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdRequest$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdRequest$Outbound` instead. */
  export type Outbound = GetV3OrganizationsOrganizationIdRequest$Outbound;
}

export function getV3OrganizationsOrganizationIdRequestToJSON(
  getV3OrganizationsOrganizationIdRequest:
    GetV3OrganizationsOrganizationIdRequest,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdRequest$outboundSchema.parse(
      getV3OrganizationsOrganizationIdRequest,
    ),
  );
}

export function getV3OrganizationsOrganizationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3OrganizationsOrganizationIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV3OrganizationsOrganizationIdResponse$inboundSchema: z.ZodType<
  GetV3OrganizationsOrganizationIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.OrganizationDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3OrganizationsOrganizationIdResponse$Outbound =
  | components.OrganizationDto$Outbound
  | string;

/** @internal */
export const GetV3OrganizationsOrganizationIdResponse$outboundSchema: z.ZodType<
  GetV3OrganizationsOrganizationIdResponse$Outbound,
  z.ZodTypeDef,
  GetV3OrganizationsOrganizationIdResponse
> = z.union([components.OrganizationDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdResponse$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdResponse$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdResponse$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdResponse$Outbound` instead. */
  export type Outbound = GetV3OrganizationsOrganizationIdResponse$Outbound;
}

export function getV3OrganizationsOrganizationIdResponseToJSON(
  getV3OrganizationsOrganizationIdResponse:
    GetV3OrganizationsOrganizationIdResponse,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdResponse$outboundSchema.parse(
      getV3OrganizationsOrganizationIdResponse,
    ),
  );
}

export function getV3OrganizationsOrganizationIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3OrganizationsOrganizationIdResponse' from JSON`,
  );
}

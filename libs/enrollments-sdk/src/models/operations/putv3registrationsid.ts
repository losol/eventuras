/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV3RegistrationsIdRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  registrationUpdateDto?: components.RegistrationUpdateDto | undefined;
};

export type PutV3RegistrationsIdResponse = components.RegistrationDto | string;

/** @internal */
export const PutV3RegistrationsIdRequest$inboundSchema: z.ZodType<
  PutV3RegistrationsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
  RegistrationUpdateDto: components.RegistrationUpdateDto$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "RegistrationUpdateDto": "registrationUpdateDto",
  });
});

/** @internal */
export type PutV3RegistrationsIdRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
  RegistrationUpdateDto?: components.RegistrationUpdateDto$Outbound | undefined;
};

/** @internal */
export const PutV3RegistrationsIdRequest$outboundSchema: z.ZodType<
  PutV3RegistrationsIdRequest$Outbound,
  z.ZodTypeDef,
  PutV3RegistrationsIdRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
  registrationUpdateDto: components.RegistrationUpdateDto$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    registrationUpdateDto: "RegistrationUpdateDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3RegistrationsIdRequest$ {
  /** @deprecated use `PutV3RegistrationsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutV3RegistrationsIdRequest$inboundSchema;
  /** @deprecated use `PutV3RegistrationsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutV3RegistrationsIdRequest$outboundSchema;
  /** @deprecated use `PutV3RegistrationsIdRequest$Outbound` instead. */
  export type Outbound = PutV3RegistrationsIdRequest$Outbound;
}

export function putV3RegistrationsIdRequestToJSON(
  putV3RegistrationsIdRequest: PutV3RegistrationsIdRequest,
): string {
  return JSON.stringify(
    PutV3RegistrationsIdRequest$outboundSchema.parse(
      putV3RegistrationsIdRequest,
    ),
  );
}

export function putV3RegistrationsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV3RegistrationsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3RegistrationsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3RegistrationsIdRequest' from JSON`,
  );
}

/** @internal */
export const PutV3RegistrationsIdResponse$inboundSchema: z.ZodType<
  PutV3RegistrationsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.RegistrationDto$inboundSchema, z.string()]);

/** @internal */
export type PutV3RegistrationsIdResponse$Outbound =
  | components.RegistrationDto$Outbound
  | string;

/** @internal */
export const PutV3RegistrationsIdResponse$outboundSchema: z.ZodType<
  PutV3RegistrationsIdResponse$Outbound,
  z.ZodTypeDef,
  PutV3RegistrationsIdResponse
> = z.union([components.RegistrationDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3RegistrationsIdResponse$ {
  /** @deprecated use `PutV3RegistrationsIdResponse$inboundSchema` instead. */
  export const inboundSchema = PutV3RegistrationsIdResponse$inboundSchema;
  /** @deprecated use `PutV3RegistrationsIdResponse$outboundSchema` instead. */
  export const outboundSchema = PutV3RegistrationsIdResponse$outboundSchema;
  /** @deprecated use `PutV3RegistrationsIdResponse$Outbound` instead. */
  export type Outbound = PutV3RegistrationsIdResponse$Outbound;
}

export function putV3RegistrationsIdResponseToJSON(
  putV3RegistrationsIdResponse: PutV3RegistrationsIdResponse,
): string {
  return JSON.stringify(
    PutV3RegistrationsIdResponse$outboundSchema.parse(
      putV3RegistrationsIdResponse,
    ),
  );
}

export function putV3RegistrationsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV3RegistrationsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3RegistrationsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3RegistrationsIdResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3InvoicesIdRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3InvoicesIdResponse = components.InvoiceDto | string;

/** @internal */
export const GetV3InvoicesIdRequest$inboundSchema: z.ZodType<
  GetV3InvoicesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3InvoicesIdRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3InvoicesIdRequest$outboundSchema: z.ZodType<
  GetV3InvoicesIdRequest$Outbound,
  z.ZodTypeDef,
  GetV3InvoicesIdRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3InvoicesIdRequest$ {
  /** @deprecated use `GetV3InvoicesIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3InvoicesIdRequest$inboundSchema;
  /** @deprecated use `GetV3InvoicesIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3InvoicesIdRequest$outboundSchema;
  /** @deprecated use `GetV3InvoicesIdRequest$Outbound` instead. */
  export type Outbound = GetV3InvoicesIdRequest$Outbound;
}

export function getV3InvoicesIdRequestToJSON(
  getV3InvoicesIdRequest: GetV3InvoicesIdRequest,
): string {
  return JSON.stringify(
    GetV3InvoicesIdRequest$outboundSchema.parse(getV3InvoicesIdRequest),
  );
}

export function getV3InvoicesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3InvoicesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3InvoicesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3InvoicesIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV3InvoicesIdResponse$inboundSchema: z.ZodType<
  GetV3InvoicesIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.InvoiceDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3InvoicesIdResponse$Outbound =
  | components.InvoiceDto$Outbound
  | string;

/** @internal */
export const GetV3InvoicesIdResponse$outboundSchema: z.ZodType<
  GetV3InvoicesIdResponse$Outbound,
  z.ZodTypeDef,
  GetV3InvoicesIdResponse
> = z.union([components.InvoiceDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3InvoicesIdResponse$ {
  /** @deprecated use `GetV3InvoicesIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3InvoicesIdResponse$inboundSchema;
  /** @deprecated use `GetV3InvoicesIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3InvoicesIdResponse$outboundSchema;
  /** @deprecated use `GetV3InvoicesIdResponse$Outbound` instead. */
  export type Outbound = GetV3InvoicesIdResponse$Outbound;
}

export function getV3InvoicesIdResponseToJSON(
  getV3InvoicesIdResponse: GetV3InvoicesIdResponse,
): string {
  return JSON.stringify(
    GetV3InvoicesIdResponse$outboundSchema.parse(getV3InvoicesIdResponse),
  );
}

export function getV3InvoicesIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3InvoicesIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3InvoicesIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3InvoicesIdResponse' from JSON`,
  );
}

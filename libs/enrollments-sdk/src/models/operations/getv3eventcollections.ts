/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3EventcollectionsRequest = {
  page?: number | undefined;
  count?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  ordering?: Array<string> | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3EventcollectionsResponse =
  | components.EventCollectionDtoPageResponseDto
  | string;

/** @internal */
export const GetV3EventcollectionsRequest$inboundSchema: z.ZodType<
  GetV3EventcollectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Page: z.number().int().optional(),
  Count: z.number().int().optional(),
  Limit: z.number().int().optional(),
  Offset: z.number().int().optional(),
  Ordering: z.array(z.string()).optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Page": "page",
    "Count": "count",
    "Limit": "limit",
    "Offset": "offset",
    "Ordering": "ordering",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3EventcollectionsRequest$Outbound = {
  Page?: number | undefined;
  Count?: number | undefined;
  Limit?: number | undefined;
  Offset?: number | undefined;
  Ordering?: Array<string> | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3EventcollectionsRequest$outboundSchema: z.ZodType<
  GetV3EventcollectionsRequest$Outbound,
  z.ZodTypeDef,
  GetV3EventcollectionsRequest
> = z.object({
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  ordering: z.array(z.string()).optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    page: "Page",
    count: "Count",
    limit: "Limit",
    offset: "Offset",
    ordering: "Ordering",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventcollectionsRequest$ {
  /** @deprecated use `GetV3EventcollectionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3EventcollectionsRequest$inboundSchema;
  /** @deprecated use `GetV3EventcollectionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3EventcollectionsRequest$outboundSchema;
  /** @deprecated use `GetV3EventcollectionsRequest$Outbound` instead. */
  export type Outbound = GetV3EventcollectionsRequest$Outbound;
}

export function getV3EventcollectionsRequestToJSON(
  getV3EventcollectionsRequest: GetV3EventcollectionsRequest,
): string {
  return JSON.stringify(
    GetV3EventcollectionsRequest$outboundSchema.parse(
      getV3EventcollectionsRequest,
    ),
  );
}

export function getV3EventcollectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventcollectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3EventcollectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventcollectionsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3EventcollectionsResponse$inboundSchema: z.ZodType<
  GetV3EventcollectionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.EventCollectionDtoPageResponseDto$inboundSchema,
  z.string(),
]);

/** @internal */
export type GetV3EventcollectionsResponse$Outbound =
  | components.EventCollectionDtoPageResponseDto$Outbound
  | string;

/** @internal */
export const GetV3EventcollectionsResponse$outboundSchema: z.ZodType<
  GetV3EventcollectionsResponse$Outbound,
  z.ZodTypeDef,
  GetV3EventcollectionsResponse
> = z.union([
  components.EventCollectionDtoPageResponseDto$outboundSchema,
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventcollectionsResponse$ {
  /** @deprecated use `GetV3EventcollectionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3EventcollectionsResponse$inboundSchema;
  /** @deprecated use `GetV3EventcollectionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3EventcollectionsResponse$outboundSchema;
  /** @deprecated use `GetV3EventcollectionsResponse$Outbound` instead. */
  export type Outbound = GetV3EventcollectionsResponse$Outbound;
}

export function getV3EventcollectionsResponseToJSON(
  getV3EventcollectionsResponse: GetV3EventcollectionsResponse,
): string {
  return JSON.stringify(
    GetV3EventcollectionsResponse$outboundSchema.parse(
      getV3EventcollectionsResponse,
    ),
  );
}

export function getV3EventcollectionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventcollectionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3EventcollectionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventcollectionsResponse' from JSON`,
  );
}

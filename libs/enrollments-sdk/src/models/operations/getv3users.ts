/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3UsersRequest = {
  query?: string | undefined;
  organizationId?: number | undefined;
  includeOrgMembership?: boolean | undefined;
  order?: components.UserListOrder | undefined;
  descending?: boolean | undefined;
  page?: number | undefined;
  count?: number | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
  ordering?: Array<string> | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3UsersResponse = components.UserDtoPageResponseDto | string;

/** @internal */
export const GetV3UsersRequest$inboundSchema: z.ZodType<
  GetV3UsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  Query: z.string().optional(),
  OrganizationId: z.number().int().optional(),
  IncludeOrgMembership: z.boolean().optional(),
  Order: components.UserListOrder$inboundSchema.optional(),
  Descending: z.boolean().optional(),
  Page: z.number().int().optional(),
  Count: z.number().int().optional(),
  Limit: z.number().int().optional(),
  Offset: z.number().int().optional(),
  Ordering: z.array(z.string()).optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Query": "query",
    "OrganizationId": "organizationId",
    "IncludeOrgMembership": "includeOrgMembership",
    "Order": "order",
    "Descending": "descending",
    "Page": "page",
    "Count": "count",
    "Limit": "limit",
    "Offset": "offset",
    "Ordering": "ordering",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3UsersRequest$Outbound = {
  Query?: string | undefined;
  OrganizationId?: number | undefined;
  IncludeOrgMembership?: boolean | undefined;
  Order?: string | undefined;
  Descending?: boolean | undefined;
  Page?: number | undefined;
  Count?: number | undefined;
  Limit?: number | undefined;
  Offset?: number | undefined;
  Ordering?: Array<string> | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3UsersRequest$outboundSchema: z.ZodType<
  GetV3UsersRequest$Outbound,
  z.ZodTypeDef,
  GetV3UsersRequest
> = z.object({
  query: z.string().optional(),
  organizationId: z.number().int().optional(),
  includeOrgMembership: z.boolean().optional(),
  order: components.UserListOrder$outboundSchema.optional(),
  descending: z.boolean().optional(),
  page: z.number().int().optional(),
  count: z.number().int().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  ordering: z.array(z.string()).optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    query: "Query",
    organizationId: "OrganizationId",
    includeOrgMembership: "IncludeOrgMembership",
    order: "Order",
    descending: "Descending",
    page: "Page",
    count: "Count",
    limit: "Limit",
    offset: "Offset",
    ordering: "Ordering",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3UsersRequest$ {
  /** @deprecated use `GetV3UsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3UsersRequest$inboundSchema;
  /** @deprecated use `GetV3UsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetV3UsersRequest$outboundSchema;
  /** @deprecated use `GetV3UsersRequest$Outbound` instead. */
  export type Outbound = GetV3UsersRequest$Outbound;
}

export function getV3UsersRequestToJSON(
  getV3UsersRequest: GetV3UsersRequest,
): string {
  return JSON.stringify(
    GetV3UsersRequest$outboundSchema.parse(getV3UsersRequest),
  );
}

export function getV3UsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3UsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3UsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3UsersRequest' from JSON`,
  );
}

/** @internal */
export const GetV3UsersResponse$inboundSchema: z.ZodType<
  GetV3UsersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.UserDtoPageResponseDto$inboundSchema, z.string()]);

/** @internal */
export type GetV3UsersResponse$Outbound =
  | components.UserDtoPageResponseDto$Outbound
  | string;

/** @internal */
export const GetV3UsersResponse$outboundSchema: z.ZodType<
  GetV3UsersResponse$Outbound,
  z.ZodTypeDef,
  GetV3UsersResponse
> = z.union([components.UserDtoPageResponseDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3UsersResponse$ {
  /** @deprecated use `GetV3UsersResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3UsersResponse$inboundSchema;
  /** @deprecated use `GetV3UsersResponse$outboundSchema` instead. */
  export const outboundSchema = GetV3UsersResponse$outboundSchema;
  /** @deprecated use `GetV3UsersResponse$Outbound` instead. */
  export type Outbound = GetV3UsersResponse$Outbound;
}

export function getV3UsersResponseToJSON(
  getV3UsersResponse: GetV3UsersResponse,
): string {
  return JSON.stringify(
    GetV3UsersResponse$outboundSchema.parse(getV3UsersResponse),
  );
}

export function getV3UsersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3UsersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3UsersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3UsersResponse' from JSON`,
  );
}

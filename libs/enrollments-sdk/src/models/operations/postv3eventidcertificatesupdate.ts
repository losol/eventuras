/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3EventIdCertificatesUpdateRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const PostV3EventIdCertificatesUpdateRequest$inboundSchema: z.ZodType<
  PostV3EventIdCertificatesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type PostV3EventIdCertificatesUpdateRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const PostV3EventIdCertificatesUpdateRequest$outboundSchema: z.ZodType<
  PostV3EventIdCertificatesUpdateRequest$Outbound,
  z.ZodTypeDef,
  PostV3EventIdCertificatesUpdateRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventIdCertificatesUpdateRequest$ {
  /** @deprecated use `PostV3EventIdCertificatesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV3EventIdCertificatesUpdateRequest$inboundSchema;
  /** @deprecated use `PostV3EventIdCertificatesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV3EventIdCertificatesUpdateRequest$outboundSchema;
  /** @deprecated use `PostV3EventIdCertificatesUpdateRequest$Outbound` instead. */
  export type Outbound = PostV3EventIdCertificatesUpdateRequest$Outbound;
}

export function postV3EventIdCertificatesUpdateRequestToJSON(
  postV3EventIdCertificatesUpdateRequest:
    PostV3EventIdCertificatesUpdateRequest,
): string {
  return JSON.stringify(
    PostV3EventIdCertificatesUpdateRequest$outboundSchema.parse(
      postV3EventIdCertificatesUpdateRequest,
    ),
  );
}

export function postV3EventIdCertificatesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3EventIdCertificatesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3EventIdCertificatesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3EventIdCertificatesUpdateRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3InvoicesRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  invoiceRequestDto?: components.InvoiceRequestDto | undefined;
};

export type PostV3InvoicesResponse = components.InvoiceDto | string;

/** @internal */
export const PostV3InvoicesRequest$inboundSchema: z.ZodType<
  PostV3InvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  InvoiceRequestDto: components.InvoiceRequestDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "InvoiceRequestDto": "invoiceRequestDto",
  });
});

/** @internal */
export type PostV3InvoicesRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  InvoiceRequestDto?: components.InvoiceRequestDto$Outbound | undefined;
};

/** @internal */
export const PostV3InvoicesRequest$outboundSchema: z.ZodType<
  PostV3InvoicesRequest$Outbound,
  z.ZodTypeDef,
  PostV3InvoicesRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  invoiceRequestDto: components.InvoiceRequestDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    invoiceRequestDto: "InvoiceRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3InvoicesRequest$ {
  /** @deprecated use `PostV3InvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3InvoicesRequest$inboundSchema;
  /** @deprecated use `PostV3InvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3InvoicesRequest$outboundSchema;
  /** @deprecated use `PostV3InvoicesRequest$Outbound` instead. */
  export type Outbound = PostV3InvoicesRequest$Outbound;
}

export function postV3InvoicesRequestToJSON(
  postV3InvoicesRequest: PostV3InvoicesRequest,
): string {
  return JSON.stringify(
    PostV3InvoicesRequest$outboundSchema.parse(postV3InvoicesRequest),
  );
}

export function postV3InvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3InvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3InvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3InvoicesRequest' from JSON`,
  );
}

/** @internal */
export const PostV3InvoicesResponse$inboundSchema: z.ZodType<
  PostV3InvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.InvoiceDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3InvoicesResponse$Outbound =
  | components.InvoiceDto$Outbound
  | string;

/** @internal */
export const PostV3InvoicesResponse$outboundSchema: z.ZodType<
  PostV3InvoicesResponse$Outbound,
  z.ZodTypeDef,
  PostV3InvoicesResponse
> = z.union([components.InvoiceDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3InvoicesResponse$ {
  /** @deprecated use `PostV3InvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = PostV3InvoicesResponse$inboundSchema;
  /** @deprecated use `PostV3InvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = PostV3InvoicesResponse$outboundSchema;
  /** @deprecated use `PostV3InvoicesResponse$Outbound` instead. */
  export type Outbound = PostV3InvoicesResponse$Outbound;
}

export function postV3InvoicesResponseToJSON(
  postV3InvoicesResponse: PostV3InvoicesResponse,
): string {
  return JSON.stringify(
    PostV3InvoicesResponse$outboundSchema.parse(postV3InvoicesResponse),
  );
}

export function postV3InvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3InvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3InvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3InvoicesResponse' from JSON`,
  );
}

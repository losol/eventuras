/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ordersDeleteV3OrdersId } from "../funcs/ordersDeleteV3OrdersId.js";
import { ordersGetV3Orders } from "../funcs/ordersGetV3Orders.js";
import {
  GetV3OrdersIdAcceptEnum,
  ordersGetV3OrdersId,
} from "../funcs/ordersGetV3OrdersId.js";
import { ordersPatchV3OrdersId } from "../funcs/ordersPatchV3OrdersId.js";
import { ordersPostV3Orders } from "../funcs/ordersPostV3Orders.js";
import { ordersPutV3OrdersId } from "../funcs/ordersPutV3OrdersId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3OrdersIdAcceptEnum } from "../funcs/ordersGetV3OrdersId.js";

export class Orders extends ClientSDK {
  async getV3OrdersId(
    request: operations.GetV3OrdersIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3OrdersIdAcceptEnum;
    },
  ): Promise<operations.GetV3OrdersIdResponse> {
    return unwrapAsync(ordersGetV3OrdersId(
      this,
      request,
      options,
    ));
  }

  async patchV3OrdersId(
    request: operations.PatchV3OrdersIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersPatchV3OrdersId(
      this,
      request,
      options,
    ));
  }

  async putV3OrdersId(
    request: operations.PutV3OrdersIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersPutV3OrdersId(
      this,
      request,
      options,
    ));
  }

  async deleteV3OrdersId(
    request: operations.DeleteV3OrdersIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersDeleteV3OrdersId(
      this,
      request,
      options,
    ));
  }

  async getV3Orders(
    request: operations.GetV3OrdersRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersGetV3Orders(
      this,
      request,
      options,
    ));
  }

  async postV3Orders(
    request: operations.PostV3OrdersRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(ordersPostV3Orders(
      this,
      request,
      options,
    ));
  }
}

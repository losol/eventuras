/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  GetV3UsersAcceptEnum,
  usersGetV3Users,
} from "../funcs/usersGetV3Users.js";
import {
  GetV3UsersIdAcceptEnum,
  usersGetV3UsersId,
} from "../funcs/usersGetV3UsersId.js";
import {
  GetV3UsersMeAcceptEnum,
  usersGetV3UsersMe,
} from "../funcs/usersGetV3UsersMe.js";
import {
  PostV3UsersAcceptEnum,
  usersPostV3Users,
} from "../funcs/usersPostV3Users.js";
import {
  PutV3UsersIdAcceptEnum,
  usersPutV3UsersId,
} from "../funcs/usersPutV3UsersId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3UsersMeAcceptEnum } from "../funcs/usersGetV3UsersMe.js";

export { GetV3UsersIdAcceptEnum } from "../funcs/usersGetV3UsersId.js";

export { PutV3UsersIdAcceptEnum } from "../funcs/usersPutV3UsersId.js";

export { GetV3UsersAcceptEnum } from "../funcs/usersGetV3Users.js";

export { PostV3UsersAcceptEnum } from "../funcs/usersPostV3Users.js";

export class Users extends ClientSDK {
  /**
   * Gets information about the current user. Creates a new user if no user with the email exists.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getV3UsersMe(
    request: operations.GetV3UsersMeRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3UsersMeAcceptEnum;
    },
  ): Promise<operations.GetV3UsersMeResponse> {
    return unwrapAsync(usersGetV3UsersMe(
      this,
      request,
      options,
    ));
  }

  async getV3UsersId(
    request: operations.GetV3UsersIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3UsersIdAcceptEnum;
    },
  ): Promise<operations.GetV3UsersIdResponse> {
    return unwrapAsync(usersGetV3UsersId(
      this,
      request,
      options,
    ));
  }

  async putV3UsersId(
    request: operations.PutV3UsersIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PutV3UsersIdAcceptEnum;
    },
  ): Promise<operations.PutV3UsersIdResponse> {
    return unwrapAsync(usersPutV3UsersId(
      this,
      request,
      options,
    ));
  }

  async getV3Users(
    request: operations.GetV3UsersRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetV3UsersAcceptEnum },
  ): Promise<operations.GetV3UsersResponse> {
    return unwrapAsync(usersGetV3Users(
      this,
      request,
      options,
    ));
  }

  async postV3Users(
    request: operations.PostV3UsersRequest,
    options?: RequestOptions & { acceptHeaderOverride?: PostV3UsersAcceptEnum },
  ): Promise<operations.PostV3UsersResponse> {
    return unwrapAsync(usersPostV3Users(
      this,
      request,
      options,
    ));
  }
}

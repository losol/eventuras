/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsDeleteV3EventsId } from "../funcs/eventsDeleteV3EventsId.js";
import { eventsGetV3Events } from "../funcs/eventsGetV3Events.js";
import { eventsGetV3EventsId } from "../funcs/eventsGetV3EventsId.js";
import { eventsPatchV3EventsId } from "../funcs/eventsPatchV3EventsId.js";
import { eventsPostV3Events } from "../funcs/eventsPostV3Events.js";
import { eventsPutV3EventsId } from "../funcs/eventsPutV3EventsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
  /**
   * Retrieves a list of events based on the given query.
   */
  async getV3Events(
    request: operations.GetV3EventsRequest,
    options?: RequestOptions,
  ): Promise<components.EventDtoPageResponseDto> {
    return unwrapAsync(eventsGetV3Events(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new event.
   */
  async postV3Events(
    request: operations.PostV3EventsRequest,
    options?: RequestOptions,
  ): Promise<components.EventDto> {
    return unwrapAsync(eventsPostV3Events(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves event details by ID.
   */
  async getV3EventsId(
    request: operations.GetV3EventsIdRequest,
    options?: RequestOptions,
  ): Promise<components.EventDto> {
    return unwrapAsync(eventsGetV3EventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an existing event by ID.
   */
  async putV3EventsId(
    request: operations.PutV3EventsIdRequest,
    options?: RequestOptions,
  ): Promise<components.EventDto> {
    return unwrapAsync(eventsPutV3EventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Partially updates a specific event by its ID using JSON Patch.
   */
  async patchV3EventsId(
    request: operations.PatchV3EventsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventsPatchV3EventsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an event by ID.
   */
  async deleteV3EventsId(
    request: operations.DeleteV3EventsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventsDeleteV3EventsId(
      this,
      request,
      options,
    ));
  }
}

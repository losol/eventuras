/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { registrationsDeleteV3RegistrationsId } from "../funcs/registrationsDeleteV3RegistrationsId.js";
import {
  GetV3RegistrationsAcceptEnum,
  registrationsGetV3Registrations,
} from "../funcs/registrationsGetV3Registrations.js";
import {
  GetV3RegistrationsIdAcceptEnum,
  registrationsGetV3RegistrationsId,
} from "../funcs/registrationsGetV3RegistrationsId.js";
import { registrationsPatchV3RegistrationsId } from "../funcs/registrationsPatchV3RegistrationsId.js";
import {
  PostV3RegistrationsAcceptEnum,
  registrationsPostV3Registrations,
} from "../funcs/registrationsPostV3Registrations.js";
import {
  PostV3RegistrationsMeEventIdAcceptEnum,
  registrationsPostV3RegistrationsMeEventId,
} from "../funcs/registrationsPostV3RegistrationsMeEventId.js";
import {
  PutV3RegistrationsIdAcceptEnum,
  registrationsPutV3RegistrationsId,
} from "../funcs/registrationsPutV3RegistrationsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3RegistrationsAcceptEnum } from "../funcs/registrationsGetV3Registrations.js";

export { PostV3RegistrationsAcceptEnum } from "../funcs/registrationsPostV3Registrations.js";

export { GetV3RegistrationsIdAcceptEnum } from "../funcs/registrationsGetV3RegistrationsId.js";

export { PutV3RegistrationsIdAcceptEnum } from "../funcs/registrationsPutV3RegistrationsId.js";

export { PostV3RegistrationsMeEventIdAcceptEnum } from "../funcs/registrationsPostV3RegistrationsMeEventId.js";

export class Registrations extends ClientSDK {
  /**
   * Get registrations with optional Excel export
   *
   * @remarks
   * Retrieves registrations with optional export to Excel based on the Accept header.
   */
  async getV3Registrations(
    request: operations.GetV3RegistrationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3RegistrationsAcceptEnum;
    },
  ): Promise<operations.GetV3RegistrationsResponse> {
    return unwrapAsync(registrationsGetV3Registrations(
      this,
      request,
      options,
    ));
  }

  async postV3Registrations(
    request: operations.PostV3RegistrationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PostV3RegistrationsAcceptEnum;
    },
  ): Promise<operations.PostV3RegistrationsResponse> {
    return unwrapAsync(registrationsPostV3Registrations(
      this,
      request,
      options,
    ));
  }

  async getV3RegistrationsId(
    request: operations.GetV3RegistrationsIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3RegistrationsIdAcceptEnum;
    },
  ): Promise<operations.GetV3RegistrationsIdResponse> {
    return unwrapAsync(registrationsGetV3RegistrationsId(
      this,
      request,
      options,
    ));
  }

  async putV3RegistrationsId(
    request: operations.PutV3RegistrationsIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PutV3RegistrationsIdAcceptEnum;
    },
  ): Promise<operations.PutV3RegistrationsIdResponse> {
    return unwrapAsync(registrationsPutV3RegistrationsId(
      this,
      request,
      options,
    ));
  }

  async patchV3RegistrationsId(
    request: operations.PatchV3RegistrationsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(registrationsPatchV3RegistrationsId(
      this,
      request,
      options,
    ));
  }

  async deleteV3RegistrationsId(
    request: operations.DeleteV3RegistrationsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(registrationsDeleteV3RegistrationsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Alias for POST /v3/registrations
   */
  async postV3RegistrationsMeEventId(
    request: operations.PostV3RegistrationsMeEventIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PostV3RegistrationsMeEventIdAcceptEnum;
    },
  ): Promise<operations.PostV3RegistrationsMeEventIdResponse> {
    return unwrapAsync(registrationsPostV3RegistrationsMeEventId(
      this,
      request,
      options,
    ));
  }
}

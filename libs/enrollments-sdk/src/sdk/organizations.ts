/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsDeleteV3OrganizationsOrganizationId } from "../funcs/organizationsDeleteV3OrganizationsOrganizationId.js";
import {
  GetV3OrganizationsAcceptEnum,
  organizationsGetV3Organizations,
} from "../funcs/organizationsGetV3Organizations.js";
import {
  GetV3OrganizationsOrganizationIdAcceptEnum,
  organizationsGetV3OrganizationsOrganizationId,
} from "../funcs/organizationsGetV3OrganizationsOrganizationId.js";
import {
  organizationsPostV3Organizations,
  PostV3OrganizationsAcceptEnum,
} from "../funcs/organizationsPostV3Organizations.js";
import {
  organizationsPutV3OrganizationsOrganizationId,
  PutV3OrganizationsOrganizationIdAcceptEnum,
} from "../funcs/organizationsPutV3OrganizationsOrganizationId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3OrganizationsAcceptEnum } from "../funcs/organizationsGetV3Organizations.js";

export { PostV3OrganizationsAcceptEnum } from "../funcs/organizationsPostV3Organizations.js";

export { GetV3OrganizationsOrganizationIdAcceptEnum } from "../funcs/organizationsGetV3OrganizationsOrganizationId.js";

export { PutV3OrganizationsOrganizationIdAcceptEnum } from "../funcs/organizationsPutV3OrganizationsOrganizationId.js";

export class Organizations extends ClientSDK {
  async getV3Organizations(
    request: operations.GetV3OrganizationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3OrganizationsAcceptEnum;
    },
  ): Promise<operations.GetV3OrganizationsResponse> {
    return unwrapAsync(organizationsGetV3Organizations(
      this,
      request,
      options,
    ));
  }

  async postV3Organizations(
    request: operations.PostV3OrganizationsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PostV3OrganizationsAcceptEnum;
    },
  ): Promise<operations.PostV3OrganizationsResponse> {
    return unwrapAsync(organizationsPostV3Organizations(
      this,
      request,
      options,
    ));
  }

  async getV3OrganizationsOrganizationId(
    request: operations.GetV3OrganizationsOrganizationIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3OrganizationsOrganizationIdAcceptEnum;
    },
  ): Promise<operations.GetV3OrganizationsOrganizationIdResponse> {
    return unwrapAsync(organizationsGetV3OrganizationsOrganizationId(
      this,
      request,
      options,
    ));
  }

  async putV3OrganizationsOrganizationId(
    request: operations.PutV3OrganizationsOrganizationIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PutV3OrganizationsOrganizationIdAcceptEnum;
    },
  ): Promise<operations.PutV3OrganizationsOrganizationIdResponse> {
    return unwrapAsync(organizationsPutV3OrganizationsOrganizationId(
      this,
      request,
      options,
    ));
  }

  async deleteV3OrganizationsOrganizationId(
    request: operations.DeleteV3OrganizationsOrganizationIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsDeleteV3OrganizationsOrganizationId(
      this,
      request,
      options,
    ));
  }
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventCollectionDeleteV3EventcollectionsId } from "../funcs/eventCollectionDeleteV3EventcollectionsId.js";
import {
  eventCollectionGetV3Eventcollections,
  GetV3EventcollectionsAcceptEnum,
} from "../funcs/eventCollectionGetV3Eventcollections.js";
import {
  eventCollectionGetV3EventcollectionsId,
  GetV3EventcollectionsIdAcceptEnum,
} from "../funcs/eventCollectionGetV3EventcollectionsId.js";
import {
  eventCollectionPostV3Eventcollections,
  PostV3EventcollectionsAcceptEnum,
} from "../funcs/eventCollectionPostV3Eventcollections.js";
import {
  eventCollectionPutV3EventcollectionsId,
  PutV3EventcollectionsIdAcceptEnum,
} from "../funcs/eventCollectionPutV3EventcollectionsId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3EventcollectionsAcceptEnum } from "../funcs/eventCollectionGetV3Eventcollections.js";

export { PostV3EventcollectionsAcceptEnum } from "../funcs/eventCollectionPostV3Eventcollections.js";

export { GetV3EventcollectionsIdAcceptEnum } from "../funcs/eventCollectionGetV3EventcollectionsId.js";

export { PutV3EventcollectionsIdAcceptEnum } from "../funcs/eventCollectionPutV3EventcollectionsId.js";

export class EventCollection extends ClientSDK {
  async getV3Eventcollections(
    request: operations.GetV3EventcollectionsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3EventcollectionsAcceptEnum;
    },
  ): Promise<operations.GetV3EventcollectionsResponse> {
    return unwrapAsync(eventCollectionGetV3Eventcollections(
      this,
      request,
      options,
    ));
  }

  async postV3Eventcollections(
    request: operations.PostV3EventcollectionsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PostV3EventcollectionsAcceptEnum;
    },
  ): Promise<operations.PostV3EventcollectionsResponse> {
    return unwrapAsync(eventCollectionPostV3Eventcollections(
      this,
      request,
      options,
    ));
  }

  async getV3EventcollectionsId(
    request: operations.GetV3EventcollectionsIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3EventcollectionsIdAcceptEnum;
    },
  ): Promise<operations.GetV3EventcollectionsIdResponse> {
    return unwrapAsync(eventCollectionGetV3EventcollectionsId(
      this,
      request,
      options,
    ));
  }

  async putV3EventcollectionsId(
    request: operations.PutV3EventcollectionsIdRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: PutV3EventcollectionsIdAcceptEnum;
    },
  ): Promise<operations.PutV3EventcollectionsIdResponse> {
    return unwrapAsync(eventCollectionPutV3EventcollectionsId(
      this,
      request,
      options,
    ));
  }

  async deleteV3EventcollectionsId(
    request: operations.DeleteV3EventcollectionsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventCollectionDeleteV3EventcollectionsId(
      this,
      request,
      options,
    ));
  }
}

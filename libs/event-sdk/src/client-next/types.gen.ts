// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};

export type ByRegistrationStatus = {
    draft?: number;
    cancelled?: number;
    verified?: number;
    notAttended?: number;
    attended?: number;
    finished?: number;
    waitingList?: number;
};

export type ByStatus = {
    draft?: number;
    cancelled?: number;
    verified?: number;
    notAttended?: number;
    attended?: number;
    finished?: number;
    waitingList?: number;
};

export type ByType = {
    participant?: number;
    student?: number;
    staff?: number;
    lecturer?: number;
    artist?: number;
};

export type CertificateDto = {
    certificateId?: number;
    certificateGuid?: string;
    title?: string | null;
    description?: string | null;
    comment?: string | null;
    recipientName?: string | null;
    evidenceDescription?: string | null;
    issuedInCity?: string | null;
    issuingDate?: string;
    issuerOrganizationName?: string | null;
    issuerOrganizationLogoBase64?: string | null;
    issuerPersonName?: string | null;
    issuerPersonSignatureImageBase64?: string | null;
};

export const CertificateFormat = {
    JSON: 'Json',
    HTML: 'Html',
    PDF: 'Pdf'
} as const;

export type CertificateFormat = typeof CertificateFormat[keyof typeof CertificateFormat];

export type EmailNotificationDto = {
    recipients?: Array<string> | null;
    eventParticipants?: EventParticipantsFilterDto;
    subject: string;
    registrationId?: number | null;
    bodyMarkdown: string;
};

export type EventCollectionCreateDto = {
    organizationId: number;
    name: string;
    slug?: string | null;
    description?: string | null;
    featured?: boolean;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
};

export type EventCollectionDto = {
    id?: number | null;
    organizationId: number;
    name: string;
    slug?: string | null;
    description?: string | null;
    featured?: boolean;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
};

export type EventCollectionDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    pages?: number;
    data?: Array<EventCollectionDto> | null;
};

export type EventDto = {
    id?: number;
    type?: EventInfoType;
    status?: EventInfoStatus;
    title?: string | null;
    slug?: string | null;
    category?: string | null;
    description?: string | null;
    featured?: boolean;
    program?: string | null;
    practicalInformation?: string | null;
    location?: string | null;
    city?: string | null;
    onDemand?: boolean;
    dateStart?: string | null;
    dateEnd?: string | null;
    lastRegistrationDate?: string | null;
    lastCancellationDate?: string | null;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
    headline?: string | null;
    published?: boolean;
    moreInformation?: string | null;
    welcomeLetter?: string | null;
    informationRequest?: string | null;
    certificateTitle?: string | null;
    certificateDescription?: string | null;
    projectCode?: string | null;
    organizerUserId?: string | null;
    maxParticipants?: number | null;
    externalInfoPageUrl?: string | null;
};

export type EventDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    pages?: number;
    data?: Array<EventDto> | null;
};

/**
 * Data Transfer Object (DTO) for Event Information.
 * Used for API between the backend and the frontend.
 */
export type EventFormDto = {
    title: string;
    slug: string;
    id?: number | null;
    type?: EventInfoType;
    status?: EventInfoStatus;
    organizationId?: number;
    headline?: string | null;
    moreInformation?: string | null;
    category?: string | null;
    description?: string | null;
    manageRegistrations?: boolean;
    onDemand?: boolean;
    featured?: boolean;
    program?: string | null;
    practicalInformation?: string | null;
    location?: string | null;
    city?: string | null;
    dateStart?: string | null;
    dateEnd?: string | null;
    welcomeLetter?: string | null;
    published?: boolean;
    externalInfoPageUrl?: string | null;
    externalRegistrationsUrl?: string | null;
    informationRequest?: string | null;
    lastRegistrationDate?: string | null;
    lastCancellationDate?: string | null;
    maxParticipants?: number | null;
    certificateTitle?: string | null;
    certificateDescription?: string | null;
    featuredImageUrl?: string | null;
    featuredImageCaption?: string | null;
    projectCode?: string | null;
    organizerUserId?: string | null;
    options?: EventInfoOptionsDto;
};

export type EventFormDtoJsonPatchDocument = {
    operations?: Array<EventFormDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type EventFormDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type EventInfoOptionsDto = {
    registrationPolicy?: EventInfoRegistrationPolicyDto;
};

export type EventInfoRegistrationPolicyDto = {
    allowedRegistrationEditHours?: number | null;
    allowModificationsAfterCancellationDue?: boolean;
};

export const EventInfoStatus = {
    DRAFT: 'Draft',
    PLANNED: 'Planned',
    REGISTRATIONS_OPEN: 'RegistrationsOpen',
    WAITING_LIST: 'WaitingList',
    REGISTRATIONS_CLOSED: 'RegistrationsClosed',
    FINISHED: 'Finished',
    ARCHIVED: 'Archived',
    CANCELLED: 'Cancelled'
} as const;

export type EventInfoStatus = typeof EventInfoStatus[keyof typeof EventInfoStatus];

export const EventInfoType = {
    COURSE: 'Course',
    CONFERENCE: 'Conference',
    ONLINE_COURSE: 'OnlineCourse',
    SOCIAL: 'Social',
    OTHER: 'Other'
} as const;

export type EventInfoType = typeof EventInfoType[keyof typeof EventInfoType];

export type EventParticipantsFilterDto = {
    eventId?: number | null;
    productId?: number | null;
    registrationStatuses?: Array<RegistrationStatus> | null;
    registrationTypes?: Array<RegistrationType> | null;
    isDefined?: boolean;
};

export type EventStatisticsDto = {
    byStatus?: ByStatus;
    byType?: ByType;
};

export type IContractResolver = {
    [key: string]: never;
};

export type Instant = {
    [key: string]: never;
};

export type InvoiceDto = {
    invoiceId?: number;
    externalInvoiceId?: string | null;
    paid?: boolean;
    orderIds?: Array<number> | null;
};

export type InvoiceRequestDto = {
    orderIds?: Array<number> | null;
};

export type NewOrderRequestDto = {
    lines: Array<OrderLineModel>;
    registrationId: number;
};

export type NewProductDto = {
    name: string;
    description?: string | null;
    more?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
};

export type NewProductVariantDto = {
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
};

export type NewRegistrationDto = {
    customer?: RegistrationCustomerInfoDto;
    notes?: string | null;
    type?: RegistrationType;
    paymentMethod?: PaymentProvider;
    empty?: boolean;
    userId: string;
    eventId: number;
    createOrder?: boolean;
    sendWelcomeLetter?: boolean;
};

export type NewRegistrationOrderDto = {
    items: Array<OrderLineModel>;
};

export type NotificationDto = {
    notificationId?: number;
    organizationId?: number | null;
    eventId?: number | null;
    productId?: number | null;
    registrationId?: number | null;
    message?: string | null;
    created?: Instant;
    statusUpdated?: Instant;
    type?: NotificationType;
    status?: NotificationStatus;
    statistics?: NotificationStatisticsDto;
};

export const NotificationListOrder = {
    CREATED: 'Created',
    STATUS_UPDATED: 'StatusUpdated'
} as const;

export type NotificationListOrder = typeof NotificationListOrder[keyof typeof NotificationListOrder];

export const NotificationRecipientListOrder = {
    CREATED: 'Created',
    SENT: 'Sent',
    NAME: 'Name',
    IDENTIFIER: 'Identifier'
} as const;

export type NotificationRecipientListOrder = typeof NotificationRecipientListOrder[keyof typeof NotificationRecipientListOrder];

export type NotificationStatisticsDto = {
    sent?: number;
    errors?: number;
    recipients?: number;
};

export const NotificationStatus = {
    NEW: 'New',
    QUEUED: 'Queued',
    STARTED: 'Started',
    CANCELLED: 'Cancelled',
    FAILED: 'Failed',
    SENT: 'Sent'
} as const;

export type NotificationStatus = typeof NotificationStatus[keyof typeof NotificationStatus];

export const NotificationType = {
    EMAIL: 'Email',
    SMS: 'Sms'
} as const;

export type NotificationType = typeof NotificationType[keyof typeof NotificationType];

export type OnlineCourseDto = {
    id?: number;
    name?: string | null;
    description?: string | null;
    slug?: string | null;
    featured?: boolean;
    onDemand?: boolean;
};

export const OperationType = {
    ADD: 'Add',
    REMOVE: 'Remove',
    REPLACE: 'Replace',
    MOVE: 'Move',
    COPY: 'Copy',
    TEST: 'Test',
    INVALID: 'Invalid'
} as const;

export type OperationType = typeof OperationType[keyof typeof OperationType];

export type OrderDto = {
    orderId?: number;
    status?: OrderStatus;
    time?: string;
    userId?: string | null;
    registrationId?: number;
    paymentMethod?: PaymentProvider;
    comments?: string | null;
    log?: string | null;
    items?: Array<OrderLineDto> | null;
    registration?: RegistrationDto;
    user?: UserDto;
};

export type OrderDtoJsonPatchDocument = {
    operations?: Array<OrderDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type OrderDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type OrderLineDto = {
    orderLineId?: number;
    product?: ProductDto;
    productVariant?: ProductVariantDto;
    quantity?: number;
};

export type OrderLineModel = {
    productId?: number;
    productVariantId?: number | null;
    quantity?: number;
};

export const OrderStatus = {
    DRAFT: 'Draft',
    VERIFIED: 'Verified',
    INVOICED: 'Invoiced',
    CANCELLED: 'Cancelled',
    REFUNDED: 'Refunded'
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];

export type OrderUpdateRequestDto = {
    lines: Array<OrderLineModel>;
};

export type OrganizationDto = {
    organizationId?: number;
    name?: string | null;
    description?: string | null;
    url?: string | null;
    phone?: string | null;
    email?: string | null;
    logoUrl?: string | null;
    logoBase64?: string | null;
};

export type OrganizationFormDto = {
    name: string;
    description?: string | null;
    url?: string | null;
    phone?: string | null;
    email?: string | null;
    logoUrl?: string | null;
    logoBase64?: string | null;
};

export type OrganizationMemberDto = {
    id?: number;
    userId?: string | null;
    organizationId?: number;
    roles?: Array<OrganizationMemberRoleDto> | null;
};

export type OrganizationMemberRoleDto = {
    organizationMemberId?: number;
    role?: string | null;
};

export type OrganizationSettingDto = {
    name?: string | null;
    section?: string | null;
    description?: string | null;
    type?: OrganizationSettingType;
    value?: string | null;
};

export const OrganizationSettingType = {
    STRING: 'String',
    NUMBER: 'Number',
    URL: 'Url',
    EMAIL: 'Email',
    BOOLEAN: 'Boolean'
} as const;

export type OrganizationSettingType = typeof OrganizationSettingType[keyof typeof OrganizationSettingType];

export type OrganizationSettingValueDto = {
    name: string;
    value?: string | null;
};

export const PaymentProvider = {
    EMAIL_INVOICE: 'EmailInvoice',
    POWER_OFFICE_EMAIL_INVOICE: 'PowerOfficeEmailInvoice',
    POWER_OFFICE_EHF_INVOICE: 'PowerOfficeEHFInvoice',
    STRIPE_INVOICE: 'StripeInvoice',
    STRIPE_DIRECT: 'StripeDirect',
    VIPPS_INVOICE: 'VippsInvoice',
    VIPPS_DIRECT: 'VippsDirect'
} as const;

export type PaymentProvider = typeof PaymentProvider[keyof typeof PaymentProvider];

export const PeriodMatchingKind = {
    MATCH: 'Match',
    INTERSECT: 'Intersect',
    CONTAIN: 'Contain'
} as const;

export type PeriodMatchingKind = typeof PeriodMatchingKind[keyof typeof PeriodMatchingKind];

export type ProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    [key: string]: unknown | string | null | string | null | number | null | string | null | string | null | undefined;
};

export type ProductDeliverySummaryDto = {
    product?: ProductSummaryDto;
    orderSummary?: Array<ProductOrdersSummaryDto> | null;
    statistics?: ProductStatisticsDto;
};

export type ProductDto = {
    productId?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
    inventory?: number | null;
    published?: boolean | null;
    variants?: Array<ProductVariantDto> | null;
    minimumQuantity?: number;
    isMandatory?: boolean;
    enableQuantity?: boolean;
};

export type ProductFormDto = {
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
    enableQuantity?: boolean;
    minimumQuantity?: number;
    inventory?: number | null;
    published?: boolean | null;
    visibility?: ProductVisibility;
};

export type ProductOrderDto = {
    productId?: number;
    productVariantId?: number | null;
    product?: ProductDto;
    productVariant?: ProductVariantDto;
    quantity?: number;
};

export type ProductOrdersSummaryDto = {
    registrationId?: number;
    registrationStatus?: RegistrationStatus;
    user?: UserSummaryDto;
    orderIds?: Array<number> | null;
    sumQuantity?: number;
};

export type ProductStatisticsDto = {
    byRegistrationStatus?: ByRegistrationStatus;
};

export type ProductSummaryDto = {
    productId?: number | null;
    eventId?: number | null;
    name?: string | null;
    description?: string | null;
    more?: string | null;
    price?: number;
    vatPercent?: number;
    visibility?: ProductVisibility;
    minimumQuantity?: number;
    isMandatory?: boolean | null;
    enableQuantity?: boolean;
};

export type ProductVariantDto = {
    productVariantId?: number;
    name?: string | null;
    description?: string | null;
    price?: number;
    vatPercent?: number;
};

export const ProductVisibility = {
    EVENT: 'Event',
    COLLECTION: 'Collection'
} as const;

export type ProductVisibility = typeof ProductVisibility[keyof typeof ProductVisibility];

export type RegistrationCustomerInfoDto = {
    vatNumber?: string | null;
    name?: string | null;
    email?: string | null;
    zip?: string | null;
    city?: string | null;
    country?: string | null;
    invoiceReference?: string | null;
};

export type RegistrationDto = {
    registrationId?: number;
    eventId?: number;
    userId?: string | null;
    status?: RegistrationStatus;
    type?: RegistrationType;
    certificateId?: number | null;
    notes?: string | null;
    log?: string | null;
    user?: UserDto;
    event?: EventDto;
    products?: Array<ProductOrderDto> | null;
    orders?: Array<OrderDto> | null;
};

export type RegistrationDtoJsonPatchDocument = {
    operations?: Array<RegistrationDtoOperation> | null;
    contractResolver?: IContractResolver;
};

export type RegistrationDtoOperation = {
    operationType?: OperationType;
    path?: string | null;
    op?: string | null;
    from?: string | null;
    value?: unknown;
};

export type RegistrationDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    pages?: number;
    data?: Array<RegistrationDto> | null;
};

export const RegistrationStatus = {
    DRAFT: 'Draft',
    CANCELLED: 'Cancelled',
    VERIFIED: 'Verified',
    NOT_ATTENDED: 'NotAttended',
    ATTENDED: 'Attended',
    FINISHED: 'Finished',
    WAITING_LIST: 'WaitingList'
} as const;

export type RegistrationStatus = typeof RegistrationStatus[keyof typeof RegistrationStatus];

export const RegistrationType = {
    PARTICIPANT: 'Participant',
    STUDENT: 'Student',
    STAFF: 'Staff',
    LECTURER: 'Lecturer',
    ARTIST: 'Artist'
} as const;

export type RegistrationType = typeof RegistrationType[keyof typeof RegistrationType];

export type RegistrationUpdateDto = {
    status?: RegistrationStatus;
    type?: RegistrationType;
    notes?: string | null;
    customer?: RegistrationCustomerInfoDto;
    paymentMethod?: PaymentProvider;
};

export type RoleRequestDto = {
    role: string;
};

export type SmsNotificationDto = {
    recipients?: Array<string> | null;
    eventParticipants?: EventParticipantsFilterDto;
    registrationId?: number | null;
    message: string;
};

export type UserDto = {
    id?: string | null;
    name?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    givenName?: string | null;
    middleName?: string | null;
    familyName?: string | null;
    nameVerified?: boolean;
    pictureUrl?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    birthDate?: string | null;
    birthDateVerified?: boolean;
    profession?: string | null;
    jobRole?: string | null;
    employer?: string | null;
    employerIdentificationNumber?: string | null;
    professionalIdentityNumber?: string | null;
    professionalIdentityNumberVerified?: boolean;
    supplementaryInformation?: string | null;
    organizationMembership?: Array<OrganizationMemberDto> | null;
    archived?: boolean;
};

export type UserDtoPageResponseDto = {
    page?: number;
    count?: number;
    total?: number;
    pages?: number;
    data?: Array<UserDto> | null;
};

export type UserFormDto = {
    email: string;
    phoneNumber?: string | null;
    givenName?: string | null;
    middleName?: string | null;
    familyName?: string | null;
    nameVerified?: boolean;
    pictureUrl?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    zipCode?: string | null;
    city?: string | null;
    country?: string | null;
    birthDate?: string | null;
    birthDateVerified?: boolean;
    profession?: string | null;
    jobRole?: string | null;
    employer?: string | null;
    employerIdentificationNumber?: string | null;
    professionalIdentityNumber?: string | null;
    professionalIdentityNumberVerified?: boolean;
    supplementaryInformation?: string | null;
    archived?: boolean;
};

export const UserListOrder = {
    GIVEN_NAME: 'GivenName',
    FAMILY_NAME: 'FamilyName',
    EMAIL: 'Email',
    PHONE: 'Phone'
} as const;

export type UserListOrder = typeof UserListOrder[keyof typeof UserListOrder];

export type UserSummaryDto = {
    userId?: string | null;
    name?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
};

export type GetV3CertificatesByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        format?: CertificateFormat;
    };
    url: '/v3/certificates/{id}';
};

export type GetV3CertificatesByIdResponses = {
    /**
     * OK
     */
    200: CertificateDto;
};

export type GetV3CertificatesByIdResponse = GetV3CertificatesByIdResponses[keyof GetV3CertificatesByIdResponses];

export type GetV3EventByIdCertificatesData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/event/{id}/certificates';
};

export type GetV3EventByIdCertificatesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventByIdCertificatesPreviewData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/event/{id}/certificates/preview';
};

export type GetV3EventByIdCertificatesPreviewResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostV3EventByIdCertificatesIssueData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        send?: boolean;
    };
    url: '/v3/event/{id}/certificates/issue';
};

export type PostV3EventByIdCertificatesIssueResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostV3EventByIdCertificatesUpdateData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/event/{id}/certificates/update';
};

export type PostV3EventByIdCertificatesUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventcollectionsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/eventcollections';
};

export type GetV3EventcollectionsResponses = {
    /**
     * OK
     */
    200: EventCollectionDtoPageResponseDto;
};

export type GetV3EventcollectionsResponse = GetV3EventcollectionsResponses[keyof GetV3EventcollectionsResponses];

export type PostV3EventcollectionsData = {
    body?: EventCollectionCreateDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/eventcollections';
};

export type PostV3EventcollectionsResponses = {
    /**
     * OK
     */
    200: EventCollectionDto;
};

export type PostV3EventcollectionsResponse = PostV3EventcollectionsResponses[keyof PostV3EventcollectionsResponses];

export type DeleteV3EventcollectionsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/eventcollections/{id}';
};

export type DeleteV3EventcollectionsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventcollectionsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/eventcollections/{id}';
};

export type GetV3EventcollectionsByIdResponses = {
    /**
     * OK
     */
    200: EventCollectionDto;
};

export type GetV3EventcollectionsByIdResponse = GetV3EventcollectionsByIdResponses[keyof GetV3EventcollectionsByIdResponses];

export type PutV3EventcollectionsByIdData = {
    body?: EventCollectionDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/eventcollections/{id}';
};

export type PutV3EventcollectionsByIdResponses = {
    /**
     * OK
     */
    200: EventCollectionDto;
};

export type PutV3EventcollectionsByIdResponse = PutV3EventcollectionsByIdResponses[keyof PutV3EventcollectionsByIdResponses];

export type DeleteV3EventsByEventIdCollectionsByCollectionIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        collectionId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/collections/{collectionId}';
};

export type DeleteV3EventsByEventIdCollectionsByCollectionIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3EventsByEventIdCollectionsByCollectionIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        collectionId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/collections/{collectionId}';
};

export type PutV3EventsByEventIdCollectionsByCollectionIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventsByEventIdProductsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
    };
    query?: {
        Visibility?: ProductVisibility;
    };
    url: '/v3/events/{eventId}/products';
};

export type GetV3EventsByEventIdProductsResponses = {
    /**
     * OK
     */
    200: Array<ProductDto>;
};

export type GetV3EventsByEventIdProductsResponse = GetV3EventsByEventIdProductsResponses[keyof GetV3EventsByEventIdProductsResponses];

export type PostV3EventsByEventIdProductsData = {
    body?: NewProductDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products';
};

export type PostV3EventsByEventIdProductsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteV3EventsByEventIdProductsByProductIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        productId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products/{productId}';
};

export type DeleteV3EventsByEventIdProductsByProductIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3EventsByEventIdProductsByProductIdData = {
    body?: ProductFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        productId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products/{productId}';
};

export type PutV3EventsByEventIdProductsByProductIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventsByEventIdProductsByProductIdVariantsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        productId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products/{productId}/variants';
};

export type GetV3EventsByEventIdProductsByProductIdVariantsResponses = {
    /**
     * OK
     */
    200: Array<ProductVariantDto>;
};

export type GetV3EventsByEventIdProductsByProductIdVariantsResponse = GetV3EventsByEventIdProductsByProductIdVariantsResponses[keyof GetV3EventsByEventIdProductsByProductIdVariantsResponses];

export type PostV3EventsByEventIdProductsByProductIdVariantsData = {
    body?: NewProductVariantDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        productId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products/{productId}/variants';
};

export type PostV3EventsByEventIdProductsByProductIdVariantsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
        productId: number;
        id: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/products/{productId}/variants/{id}';
};

export type DeleteV3EventsByEventIdProductsByProductIdVariantsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        Type?: EventInfoType;
        Start?: string;
        End?: string;
        Period?: PeriodMatchingKind;
        IncludePastEvents?: boolean;
        IncludeDraftEvents?: boolean;
        OrganizationId?: number;
        CollectionId?: number;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/events';
};

export type GetV3EventsResponses = {
    /**
     * OK
     */
    200: EventDtoPageResponseDto;
};

export type GetV3EventsResponse = GetV3EventsResponses[keyof GetV3EventsResponses];

export type PostV3EventsData = {
    /**
     * Event information.
     */
    body?: EventFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/events';
};

export type PostV3EventsResponses = {
    /**
     * OK
     */
    200: EventDto;
};

export type PostV3EventsResponse = PostV3EventsResponses[keyof PostV3EventsResponses];

export type DeleteV3EventsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        /**
         * The ID of the event to delete.
         */
        id: number;
    };
    query?: never;
    url: '/v3/events/{id}';
};

export type DeleteV3EventsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3EventsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        /**
         * The ID of the event.
         */
        id: number;
    };
    query?: never;
    url: '/v3/events/{id}';
};

export type GetV3EventsByIdResponses = {
    /**
     * OK
     */
    200: EventDto;
};

export type GetV3EventsByIdResponse = GetV3EventsByIdResponses[keyof GetV3EventsByIdResponses];

export type PatchV3EventsByIdData = {
    /**
     * The JSON Patch document with updates.
     */
    body?: EventFormDtoJsonPatchDocument;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        /**
         * The ID of the event to update.
         */
        id: number;
    };
    query?: never;
    url: '/v3/events/{id}';
};

export type PatchV3EventsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3EventsByIdData = {
    /**
     * Updated event information.
     */
    body?: EventFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        /**
         * The ID of the event.
         */
        id: number;
    };
    query?: never;
    url: '/v3/events/{id}';
};

export type PutV3EventsByIdResponses = {
    /**
     * OK
     */
    200: EventDto;
};

export type PutV3EventsByIdResponse = PutV3EventsByIdResponses[keyof PutV3EventsByIdResponses];

export type GetV3EventsByEventIdStatisticsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
    };
    query?: never;
    url: '/v3/events/{eventId}/statistics';
};

export type GetV3EventsByEventIdStatisticsResponses = {
    /**
     * OK
     */
    200: EventStatisticsDto;
};

export type GetV3EventsByEventIdStatisticsResponse = GetV3EventsByEventIdStatisticsResponses[keyof GetV3EventsByEventIdStatisticsResponses];

export type GetV3InvoicesByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/invoices/{id}';
};

export type GetV3InvoicesByIdResponses = {
    /**
     * OK
     */
    200: InvoiceDto;
};

export type GetV3InvoicesByIdResponse = GetV3InvoicesByIdResponses[keyof GetV3InvoicesByIdResponses];

export type PostV3InvoicesData = {
    body?: InvoiceRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/invoices';
};

export type PostV3InvoicesResponses = {
    /**
     * OK
     */
    200: InvoiceDto;
};

export type PostV3InvoicesResponse = PostV3InvoicesResponses[keyof PostV3InvoicesResponses];

export type GetV3NotificationsByIdRecipientsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        Query?: string;
        SentOnly?: boolean;
        ErrorsOnly?: boolean;
        Order?: NotificationRecipientListOrder;
        Desc?: boolean;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/notifications/{id}/recipients';
};

export type GetV3NotificationsByIdRecipientsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3NotificationsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        includeStatistics?: boolean;
    };
    url: '/v3/notifications/{id}';
};

export type GetV3NotificationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3NotificationsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        EventId?: number;
        ProductId?: number;
        Status?: NotificationStatus;
        Type?: NotificationType;
        RecipientUserId?: string;
        Order?: NotificationListOrder;
        Desc?: boolean;
        /**
         * Whether to include delivery statistics into response.
         */
        IncludeStatistics?: boolean;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/notifications';
};

export type GetV3NotificationsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostV3NotificationsEmailData = {
    body?: EmailNotificationDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/notifications/email';
};

export type PostV3NotificationsEmailResponses = {
    /**
     * OK
     */
    200: NotificationDto;
};

export type PostV3NotificationsEmailResponse = PostV3NotificationsEmailResponses[keyof PostV3NotificationsEmailResponses];

export type PostV3NotificationsSmsData = {
    body?: SmsNotificationDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/notifications/sms';
};

export type PostV3NotificationsSmsResponses = {
    /**
     * OK
     */
    200: NotificationDto;
};

export type PostV3NotificationsSmsResponse = PostV3NotificationsSmsResponses[keyof PostV3NotificationsSmsResponses];

export type GetV3OnlinecoursesData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/onlinecourses';
};

export type GetV3OnlinecoursesResponses = {
    /**
     * OK
     */
    200: Array<OnlineCourseDto>;
};

export type GetV3OnlinecoursesResponse = GetV3OnlinecoursesResponses[keyof GetV3OnlinecoursesResponses];

export type GetV3OnlinecoursesByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/onlinecourses/{id}';
};

export type GetV3OnlinecoursesByIdResponses = {
    /**
     * OK
     */
    200: OnlineCourseDto;
};

export type GetV3OnlinecoursesByIdResponse = GetV3OnlinecoursesByIdResponses[keyof GetV3OnlinecoursesByIdResponses];

export type DeleteV3OrdersByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/orders/{id}';
};

export type DeleteV3OrdersByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3OrdersByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        IncludeUser?: boolean;
        IncludeRegistration?: boolean;
    };
    url: '/v3/orders/{id}';
};

export type GetV3OrdersByIdResponses = {
    /**
     * OK
     */
    200: OrderDto;
};

export type GetV3OrdersByIdResponse = GetV3OrdersByIdResponses[keyof GetV3OrdersByIdResponses];

export type PatchV3OrdersByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/orders/{id}';
};

export type PatchV3OrdersByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3OrdersByIdData = {
    body?: OrderUpdateRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/orders/{id}';
};

export type PutV3OrdersByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3OrdersData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        UserId?: string;
        EventId?: number;
        RegistrationId?: number;
        Status?: OrderStatus;
        IncludeUser?: boolean;
        IncludeRegistration?: boolean;
        OrganizationId?: number;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/orders';
};

export type GetV3OrdersResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostV3OrdersData = {
    body?: NewOrderRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/orders';
};

export type PostV3OrdersResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    body?: RoleRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
        userId: string;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/members/{userId}/roles';
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses[keyof DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses];

export type GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
        userId: string;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/members/{userId}/roles';
};

export type GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses[keyof GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses];

export type PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData = {
    body?: RoleRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
        userId: string;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/members/{userId}/roles';
};

export type PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses = {
    /**
     * OK
     */
    200: Array<string>;
};

export type PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse = PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses[keyof PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponses];

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
        userId: string;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/members/{userId}';
};

export type DeleteV3OrganizationsByOrganizationIdMembersByUserIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3OrganizationsByOrganizationIdMembersByUserIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
        userId: string;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/members/{userId}';
};

export type PutV3OrganizationsByOrganizationIdMembersByUserIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3OrganizationsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/organizations';
};

export type GetV3OrganizationsResponses = {
    /**
     * OK
     */
    200: Array<OrganizationDto>;
};

export type GetV3OrganizationsResponse = GetV3OrganizationsResponses[keyof GetV3OrganizationsResponses];

export type PostV3OrganizationsData = {
    body?: OrganizationFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/organizations';
};

export type PostV3OrganizationsResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type PostV3OrganizationsResponse = PostV3OrganizationsResponses[keyof PostV3OrganizationsResponses];

export type DeleteV3OrganizationsByOrganizationIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}';
};

export type DeleteV3OrganizationsByOrganizationIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3OrganizationsByOrganizationIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}';
};

export type GetV3OrganizationsByOrganizationIdResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type GetV3OrganizationsByOrganizationIdResponse = GetV3OrganizationsByOrganizationIdResponses[keyof GetV3OrganizationsByOrganizationIdResponses];

export type PutV3OrganizationsByOrganizationIdData = {
    body?: OrganizationFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}';
};

export type PutV3OrganizationsByOrganizationIdResponses = {
    /**
     * OK
     */
    200: OrganizationDto;
};

export type PutV3OrganizationsByOrganizationIdResponse = PutV3OrganizationsByOrganizationIdResponses[keyof PutV3OrganizationsByOrganizationIdResponses];

export type GetV3OrganizationsByOrganizationIdSettingsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/settings';
};

export type GetV3OrganizationsByOrganizationIdSettingsResponses = {
    /**
     * OK
     */
    200: Array<OrganizationSettingDto>;
};

export type GetV3OrganizationsByOrganizationIdSettingsResponse = GetV3OrganizationsByOrganizationIdSettingsResponses[keyof GetV3OrganizationsByOrganizationIdSettingsResponses];

export type PostV3OrganizationsByOrganizationIdSettingsData = {
    body: Array<OrganizationSettingValueDto>;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/settings';
};

export type PostV3OrganizationsByOrganizationIdSettingsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3OrganizationsByOrganizationIdSettingsData = {
    body?: OrganizationSettingValueDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        organizationId: number;
    };
    query?: never;
    url: '/v3/organizations/{organizationId}/settings';
};

export type PutV3OrganizationsByOrganizationIdSettingsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3ProductsByProductIdSummaryData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        productId: number;
    };
    query?: never;
    url: '/v3/products/{productId}/summary';
};

export type GetV3ProductsByProductIdSummaryResponses = {
    /**
     * OK
     */
    200: ProductDeliverySummaryDto;
};

export type GetV3ProductsByProductIdSummaryResponse = GetV3ProductsByProductIdSummaryResponses[keyof GetV3ProductsByProductIdSummaryResponses];

export type PostV3RegistrationsByIdCertificateSendData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}/certificate/send';
};

export type PostV3RegistrationsByIdCertificateSendResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3RegistrationsByIdOrdersData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}/orders';
};

export type GetV3RegistrationsByIdOrdersResponses = {
    /**
     * OK
     */
    200: Array<OrderDto>;
};

export type GetV3RegistrationsByIdOrdersResponse = GetV3RegistrationsByIdOrdersResponses[keyof GetV3RegistrationsByIdOrdersResponses];

export type PostV3RegistrationsByIdOrdersData = {
    body?: NewRegistrationOrderDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}/orders';
};

export type PostV3RegistrationsByIdOrdersResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostV3RegistrationsByIdProductsData = {
    body?: OrderUpdateRequestDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}/products';
};

export type PostV3RegistrationsByIdProductsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3RegistrationsData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        EventId?: number;
        UserId?: string;
        IncludeEventInfo?: boolean;
        IncludeUserInfo?: boolean;
        IncludeProducts?: boolean;
        IncludeOrders?: boolean;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/registrations';
};

export type GetV3RegistrationsErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
};

export type GetV3RegistrationsError = GetV3RegistrationsErrors[keyof GetV3RegistrationsErrors];

export type GetV3RegistrationsResponses = {
    /**
     * OK
     */
    200: RegistrationDtoPageResponseDto;
};

export type GetV3RegistrationsResponse = GetV3RegistrationsResponses[keyof GetV3RegistrationsResponses];

export type PostV3RegistrationsData = {
    body?: NewRegistrationDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/registrations';
};

export type PostV3RegistrationsResponses = {
    /**
     * OK
     */
    200: RegistrationDto;
};

export type PostV3RegistrationsResponse = PostV3RegistrationsResponses[keyof PostV3RegistrationsResponses];

export type DeleteV3RegistrationsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}';
};

export type DeleteV3RegistrationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetV3RegistrationsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: {
        EventId?: number;
        UserId?: string;
        IncludeEventInfo?: boolean;
        IncludeUserInfo?: boolean;
        IncludeProducts?: boolean;
        IncludeOrders?: boolean;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/registrations/{id}';
};

export type GetV3RegistrationsByIdResponses = {
    /**
     * OK
     */
    200: RegistrationDto;
};

export type GetV3RegistrationsByIdResponse = GetV3RegistrationsByIdResponses[keyof GetV3RegistrationsByIdResponses];

export type PatchV3RegistrationsByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}';
};

export type PatchV3RegistrationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PutV3RegistrationsByIdData = {
    body?: RegistrationUpdateDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: number;
    };
    query?: never;
    url: '/v3/registrations/{id}';
};

export type PutV3RegistrationsByIdResponses = {
    /**
     * OK
     */
    200: RegistrationDto;
};

export type PutV3RegistrationsByIdResponse = PutV3RegistrationsByIdResponses[keyof PutV3RegistrationsByIdResponses];

export type PostV3RegistrationsMeByEventIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        eventId: number;
    };
    query?: {
        createOrder?: boolean;
    };
    url: '/v3/registrations/me/{eventId}';
};

export type PostV3RegistrationsMeByEventIdResponses = {
    /**
     * OK
     */
    200: RegistrationDto;
};

export type PostV3RegistrationsMeByEventIdResponse = PostV3RegistrationsMeByEventIdResponses[keyof PostV3RegistrationsMeByEventIdResponses];

export type GetV3UserprofileData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/userprofile';
};

export type GetV3UserprofileResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type GetV3UserprofileResponse = GetV3UserprofileResponses[keyof GetV3UserprofileResponses];

export type PutV3UserprofileData = {
    body?: UserFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        id?: string;
    };
    url: '/v3/userprofile';
};

export type PutV3UserprofileResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type PutV3UserprofileResponse = PutV3UserprofileResponses[keyof PutV3UserprofileResponses];

export type GetV3UsersMeData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/users/me';
};

export type GetV3UsersMeResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type GetV3UsersMeResponse = GetV3UsersMeResponses[keyof GetV3UsersMeResponses];

export type GetV3UsersByIdData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/v3/users/{id}';
};

export type GetV3UsersByIdResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type GetV3UsersByIdResponse = GetV3UsersByIdResponses[keyof GetV3UsersByIdResponses];

export type PutV3UsersByIdData = {
    body?: UserFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/v3/users/{id}';
};

export type PutV3UsersByIdResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type PutV3UsersByIdResponse = PutV3UsersByIdResponses[keyof PutV3UsersByIdResponses];

export type GetV3UsersData = {
    body?: never;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: {
        Query?: string;
        OrganizationId?: number;
        IncludeOrgMembership?: boolean;
        Order?: UserListOrder;
        Descending?: boolean;
        Page?: number;
        Count?: number;
        Limit?: number;
        Offset?: number;
        Ordering?: Array<string>;
    };
    url: '/v3/users';
};

export type GetV3UsersResponses = {
    /**
     * OK
     */
    200: UserDtoPageResponseDto;
};

export type GetV3UsersResponse = GetV3UsersResponses[keyof GetV3UsersResponses];

export type PostV3UsersData = {
    body?: UserFormDto;
    headers?: {
        /**
         * Optional organization Id. Will be required in API version 4.
         */
        'Eventuras-Org-Id'?: number;
    };
    path?: never;
    query?: never;
    url: '/v3/users';
};

export type PostV3UsersResponses = {
    /**
     * OK
     */
    200: UserDto;
};

export type PostV3UsersResponse = PostV3UsersResponses[keyof PostV3UsersResponses];

// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-next';
import type { GetV3CertificatesByIdData, GetV3CertificatesByIdResponse, GetV3EventByIdCertificatesData, GetV3EventByIdCertificatesPreviewData, PostV3EventByIdCertificatesIssueData, PostV3EventByIdCertificatesUpdateData, GetV3EventcollectionsData, GetV3EventcollectionsResponse, PostV3EventcollectionsData, PostV3EventcollectionsResponse, DeleteV3EventcollectionsByIdData, GetV3EventcollectionsByIdData, GetV3EventcollectionsByIdResponse, PutV3EventcollectionsByIdData, PutV3EventcollectionsByIdResponse, DeleteV3EventsByEventIdCollectionsByCollectionIdData, PutV3EventsByEventIdCollectionsByCollectionIdData, GetV3EventsByEventIdProductsData, GetV3EventsByEventIdProductsResponse, PostV3EventsByEventIdProductsData, DeleteV3EventsByEventIdProductsByProductIdData, PutV3EventsByEventIdProductsByProductIdData, GetV3EventsByEventIdProductsByProductIdVariantsData, GetV3EventsByEventIdProductsByProductIdVariantsResponse, PostV3EventsByEventIdProductsByProductIdVariantsData, DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData, GetV3EventsData, GetV3EventsResponse, PostV3EventsData, PostV3EventsResponse, DeleteV3EventsByIdData, GetV3EventsByIdData, GetV3EventsByIdResponse, PatchV3EventsByIdData, PutV3EventsByIdData, PutV3EventsByIdResponse, GetV3EventsByEventIdStatisticsData, GetV3EventsByEventIdStatisticsResponse, GetV3InvoicesByIdData, GetV3InvoicesByIdResponse, PostV3InvoicesData, PostV3InvoicesResponse, GetV3NotificationsByIdRecipientsData, GetV3NotificationsByIdData, GetV3NotificationsData, PostV3NotificationsEmailData, PostV3NotificationsEmailResponse, PostV3NotificationsSmsData, PostV3NotificationsSmsResponse, GetV3OnlinecoursesData, GetV3OnlinecoursesResponse, GetV3OnlinecoursesByIdData, GetV3OnlinecoursesByIdResponse, DeleteV3OrdersByIdData, GetV3OrdersByIdData, GetV3OrdersByIdResponse, PatchV3OrdersByIdData, PutV3OrdersByIdData, GetV3OrdersData, PostV3OrdersData, DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData, DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData, GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData, PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, DeleteV3OrganizationsByOrganizationIdMembersByUserIdData, PutV3OrganizationsByOrganizationIdMembersByUserIdData, GetV3OrganizationsData, GetV3OrganizationsResponse, PostV3OrganizationsData, PostV3OrganizationsResponse, DeleteV3OrganizationsByOrganizationIdData, GetV3OrganizationsByOrganizationIdData, GetV3OrganizationsByOrganizationIdResponse, PutV3OrganizationsByOrganizationIdData, PutV3OrganizationsByOrganizationIdResponse, GetV3OrganizationsByOrganizationIdSettingsData, GetV3OrganizationsByOrganizationIdSettingsResponse, PostV3OrganizationsByOrganizationIdSettingsData, PutV3OrganizationsByOrganizationIdSettingsData, GetV3ProductsByProductIdSummaryData, GetV3ProductsByProductIdSummaryResponse, PostV3RegistrationsByIdCertificateSendData, GetV3RegistrationsByIdOrdersData, GetV3RegistrationsByIdOrdersResponse, PostV3RegistrationsByIdOrdersData, PostV3RegistrationsByIdProductsData, GetV3RegistrationsData, GetV3RegistrationsResponse, GetV3RegistrationsError, PostV3RegistrationsData, PostV3RegistrationsResponse, DeleteV3RegistrationsByIdData, GetV3RegistrationsByIdData, GetV3RegistrationsByIdResponse, PatchV3RegistrationsByIdData, PutV3RegistrationsByIdData, PutV3RegistrationsByIdResponse, PostV3RegistrationsMeByEventIdData, PostV3RegistrationsMeByEventIdResponse, GetV3UserprofileData, GetV3UserprofileResponse, PutV3UserprofileData, PutV3UserprofileResponse, GetV3UsersMeData, GetV3UsersMeResponse, GetV3UsersByIdData, GetV3UsersByIdResponse, PutV3UsersByIdData, PutV3UsersByIdResponse, GetV3UsersData, GetV3UsersResponse, PostV3UsersData, PostV3UsersResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getV3CertificatesById = <ThrowOnError extends boolean = false>(options: Options<GetV3CertificatesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3CertificatesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/certificates/{id}',
        ...options
    });
};

export const getV3EventByIdCertificates = <ThrowOnError extends boolean = false>(options: Options<GetV3EventByIdCertificatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/event/{id}/certificates',
        ...options
    });
};

export const getV3EventByIdCertificatesPreview = <ThrowOnError extends boolean = false>(options: Options<GetV3EventByIdCertificatesPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/event/{id}/certificates/preview',
        ...options
    });
};

export const postV3EventByIdCertificatesIssue = <ThrowOnError extends boolean = false>(options: Options<PostV3EventByIdCertificatesIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/event/{id}/certificates/issue',
        ...options
    });
};

export const postV3EventByIdCertificatesUpdate = <ThrowOnError extends boolean = false>(options: Options<PostV3EventByIdCertificatesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/event/{id}/certificates/update',
        ...options
    });
};

export const getV3Eventcollections = <ThrowOnError extends boolean = false>(options?: Options<GetV3EventcollectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3EventcollectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/eventcollections',
        ...options
    });
};

export const postV3Eventcollections = <ThrowOnError extends boolean = false>(options?: Options<PostV3EventcollectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3EventcollectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/eventcollections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3EventcollectionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteV3EventcollectionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/eventcollections/{id}',
        ...options
    });
};

export const getV3EventcollectionsById = <ThrowOnError extends boolean = false>(options: Options<GetV3EventcollectionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3EventcollectionsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/eventcollections/{id}',
        ...options
    });
};

export const putV3EventcollectionsById = <ThrowOnError extends boolean = false>(options: Options<PutV3EventcollectionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV3EventcollectionsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/eventcollections/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3EventsByEventIdCollectionsByCollectionId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3EventsByEventIdCollectionsByCollectionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/collections/{collectionId}',
        ...options
    });
};

export const putV3EventsByEventIdCollectionsByCollectionId = <ThrowOnError extends boolean = false>(options: Options<PutV3EventsByEventIdCollectionsByCollectionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/collections/{collectionId}',
        ...options
    });
};

export const getV3EventsByEventIdProducts = <ThrowOnError extends boolean = false>(options: Options<GetV3EventsByEventIdProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3EventsByEventIdProductsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products',
        ...options
    });
};

export const postV3EventsByEventIdProducts = <ThrowOnError extends boolean = false>(options: Options<PostV3EventsByEventIdProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3EventsByEventIdProductsByProductId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3EventsByEventIdProductsByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products/{productId}',
        ...options
    });
};

export const putV3EventsByEventIdProductsByProductId = <ThrowOnError extends boolean = false>(options: Options<PutV3EventsByEventIdProductsByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products/{productId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3EventsByEventIdProductsByProductIdVariants = <ThrowOnError extends boolean = false>(options: Options<GetV3EventsByEventIdProductsByProductIdVariantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3EventsByEventIdProductsByProductIdVariantsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products/{productId}/variants',
        ...options
    });
};

export const postV3EventsByEventIdProductsByProductIdVariants = <ThrowOnError extends boolean = false>(options: Options<PostV3EventsByEventIdProductsByProductIdVariantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products/{productId}/variants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3EventsByEventIdProductsByProductIdVariantsById = <ThrowOnError extends boolean = false>(options: Options<DeleteV3EventsByEventIdProductsByProductIdVariantsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/products/{productId}/variants/{id}',
        ...options
    });
};

/**
 * Retrieves a list of events based on the given query.
 */
export const getV3Events = <ThrowOnError extends boolean = false>(options?: Options<GetV3EventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3EventsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events',
        ...options
    });
};

/**
 * Creates a new event.
 */
export const postV3Events = <ThrowOnError extends boolean = false>(options?: Options<PostV3EventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3EventsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes an event by ID.
 */
export const deleteV3EventsById = <ThrowOnError extends boolean = false>(options: Options<DeleteV3EventsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{id}',
        ...options
    });
};

/**
 * Retrieves event details by ID.
 */
export const getV3EventsById = <ThrowOnError extends boolean = false>(options: Options<GetV3EventsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3EventsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{id}',
        ...options
    });
};

/**
 * Partially updates a specific event by its ID using JSON Patch.
 */
export const patchV3EventsById = <ThrowOnError extends boolean = false>(options: Options<PatchV3EventsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates an existing event by ID.
 */
export const putV3EventsById = <ThrowOnError extends boolean = false>(options: Options<PutV3EventsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV3EventsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Event statistics
 * Returns a summary of the registrations for the event.
 */
export const getV3EventsByEventIdStatistics = <ThrowOnError extends boolean = false>(options: Options<GetV3EventsByEventIdStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3EventsByEventIdStatisticsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/events/{eventId}/statistics',
        ...options
    });
};

export const getV3InvoicesById = <ThrowOnError extends boolean = false>(options: Options<GetV3InvoicesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3InvoicesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/invoices/{id}',
        ...options
    });
};

export const postV3Invoices = <ThrowOnError extends boolean = false>(options?: Options<PostV3InvoicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3InvoicesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/invoices',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3NotificationsByIdRecipients = <ThrowOnError extends boolean = false>(options: Options<GetV3NotificationsByIdRecipientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/notifications/{id}/recipients',
        ...options
    });
};

export const getV3NotificationsById = <ThrowOnError extends boolean = false>(options: Options<GetV3NotificationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/notifications/{id}',
        ...options
    });
};

export const getV3Notifications = <ThrowOnError extends boolean = false>(options?: Options<GetV3NotificationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/notifications',
        ...options
    });
};

export const postV3NotificationsEmail = <ThrowOnError extends boolean = false>(options?: Options<PostV3NotificationsEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3NotificationsEmailResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/notifications/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postV3NotificationsSms = <ThrowOnError extends boolean = false>(options?: Options<PostV3NotificationsSmsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3NotificationsSmsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/notifications/sms',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3Onlinecourses = <ThrowOnError extends boolean = false>(options?: Options<GetV3OnlinecoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3OnlinecoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/onlinecourses',
        ...options
    });
};

export const getV3OnlinecoursesById = <ThrowOnError extends boolean = false>(options: Options<GetV3OnlinecoursesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3OnlinecoursesByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/onlinecourses/{id}',
        ...options
    });
};

export const deleteV3OrdersById = <ThrowOnError extends boolean = false>(options: Options<DeleteV3OrdersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders/{id}',
        ...options
    });
};

export const getV3OrdersById = <ThrowOnError extends boolean = false>(options: Options<GetV3OrdersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3OrdersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders/{id}',
        ...options
    });
};

export const patchV3OrdersById = <ThrowOnError extends boolean = false>(options: Options<PatchV3OrdersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders/{id}',
        ...options
    });
};

export const putV3OrdersById = <ThrowOnError extends boolean = false>(options: Options<PutV3OrdersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3Orders = <ThrowOnError extends boolean = false>(options?: Options<GetV3OrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders',
        ...options
    });
};

export const postV3Orders = <ThrowOnError extends boolean = false>(options?: Options<PostV3OrdersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3OrganizationsByOrganizationIdMembersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/members/{userId}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3OrganizationsByOrganizationIdMembersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<GetV3OrganizationsByOrganizationIdMembersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/members/{userId}/roles',
        ...options
    });
};

export const postV3OrganizationsByOrganizationIdMembersByUserIdRoles = <ThrowOnError extends boolean = false>(options: Options<PostV3OrganizationsByOrganizationIdMembersByUserIdRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV3OrganizationsByOrganizationIdMembersByUserIdRolesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/members/{userId}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3OrganizationsByOrganizationIdMembersByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3OrganizationsByOrganizationIdMembersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/members/{userId}',
        ...options
    });
};

export const putV3OrganizationsByOrganizationIdMembersByUserId = <ThrowOnError extends boolean = false>(options: Options<PutV3OrganizationsByOrganizationIdMembersByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/members/{userId}',
        ...options
    });
};

export const getV3Organizations = <ThrowOnError extends boolean = false>(options?: Options<GetV3OrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3OrganizationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations',
        ...options
    });
};

export const postV3Organizations = <ThrowOnError extends boolean = false>(options?: Options<PostV3OrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3OrganizationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3OrganizationsByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3OrganizationsByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}',
        ...options
    });
};

export const getV3OrganizationsByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetV3OrganizationsByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3OrganizationsByOrganizationIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}',
        ...options
    });
};

export const putV3OrganizationsByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<PutV3OrganizationsByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV3OrganizationsByOrganizationIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3OrganizationsByOrganizationIdSettings = <ThrowOnError extends boolean = false>(options: Options<GetV3OrganizationsByOrganizationIdSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3OrganizationsByOrganizationIdSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/settings',
        ...options
    });
};

export const postV3OrganizationsByOrganizationIdSettings = <ThrowOnError extends boolean = false>(options: Options<PostV3OrganizationsByOrganizationIdSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const putV3OrganizationsByOrganizationIdSettings = <ThrowOnError extends boolean = false>(options: Options<PutV3OrganizationsByOrganizationIdSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/organizations/{organizationId}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3ProductsByProductIdSummary = <ThrowOnError extends boolean = false>(options: Options<GetV3ProductsByProductIdSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3ProductsByProductIdSummaryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/products/{productId}/summary',
        ...options
    });
};

export const postV3RegistrationsByIdCertificateSend = <ThrowOnError extends boolean = false>(options: Options<PostV3RegistrationsByIdCertificateSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}/certificate/send',
        ...options
    });
};

export const getV3RegistrationsByIdOrders = <ThrowOnError extends boolean = false>(options: Options<GetV3RegistrationsByIdOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3RegistrationsByIdOrdersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}/orders',
        ...options
    });
};

export const postV3RegistrationsByIdOrders = <ThrowOnError extends boolean = false>(options: Options<PostV3RegistrationsByIdOrdersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}/orders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postV3RegistrationsByIdProducts = <ThrowOnError extends boolean = false>(options: Options<PostV3RegistrationsByIdProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get registrations with optional Excel export
 * Retrieves registrations with optional export to Excel based on the Accept header.
 */
export const getV3Registrations = <ThrowOnError extends boolean = false>(options?: Options<GetV3RegistrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3RegistrationsResponse, GetV3RegistrationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations',
        ...options
    });
};

export const postV3Registrations = <ThrowOnError extends boolean = false>(options?: Options<PostV3RegistrationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3RegistrationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteV3RegistrationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteV3RegistrationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}',
        ...options
    });
};

export const getV3RegistrationsById = <ThrowOnError extends boolean = false>(options: Options<GetV3RegistrationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3RegistrationsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}',
        ...options
    });
};

export const patchV3RegistrationsById = <ThrowOnError extends boolean = false>(options: Options<PatchV3RegistrationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}',
        ...options
    });
};

export const putV3RegistrationsById = <ThrowOnError extends boolean = false>(options: Options<PutV3RegistrationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV3RegistrationsByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Alias for POST /v3/registrations
 */
export const postV3RegistrationsMeByEventId = <ThrowOnError extends boolean = false>(options: Options<PostV3RegistrationsMeByEventIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostV3RegistrationsMeByEventIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/registrations/me/{eventId}',
        ...options
    });
};

/**
 * Gets information about the current user. Creates a new user if no user with the email exists.
 */
export const getV3Userprofile = <ThrowOnError extends boolean = false>(options?: Options<GetV3UserprofileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3UserprofileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/userprofile',
        ...options
    });
};

export const putV3Userprofile = <ThrowOnError extends boolean = false>(options?: Options<PutV3UserprofileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutV3UserprofileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/userprofile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Gets information about the current user. Creates a new user if no user with the email exists.
 */
export const getV3UsersMe = <ThrowOnError extends boolean = false>(options?: Options<GetV3UsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3UsersMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/me',
        ...options
    });
};

export const getV3UsersById = <ThrowOnError extends boolean = false>(options: Options<GetV3UsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV3UsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/{id}',
        ...options
    });
};

export const putV3UsersById = <ThrowOnError extends boolean = false>(options: Options<PutV3UsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutV3UsersByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getV3Users = <ThrowOnError extends boolean = false>(options?: Options<GetV3UsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetV3UsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users',
        ...options
    });
};

export const postV3Users = <ThrowOnError extends boolean = false>(options?: Options<PostV3UsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostV3UsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
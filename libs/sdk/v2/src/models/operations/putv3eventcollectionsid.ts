/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV3EventcollectionsIdRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  eventCollectionDto?: components.EventCollectionDto | undefined;
};

export type PutV3EventcollectionsIdResponse =
  | components.EventCollectionDto
  | string;

/** @internal */
export const PutV3EventcollectionsIdRequest$inboundSchema: z.ZodType<
  PutV3EventcollectionsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
  EventCollectionDto: components.EventCollectionDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "EventCollectionDto": "eventCollectionDto",
  });
});

/** @internal */
export type PutV3EventcollectionsIdRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
  EventCollectionDto?: components.EventCollectionDto$Outbound | undefined;
};

/** @internal */
export const PutV3EventcollectionsIdRequest$outboundSchema: z.ZodType<
  PutV3EventcollectionsIdRequest$Outbound,
  z.ZodTypeDef,
  PutV3EventcollectionsIdRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
  eventCollectionDto: components.EventCollectionDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    eventCollectionDto: "EventCollectionDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3EventcollectionsIdRequest$ {
  /** @deprecated use `PutV3EventcollectionsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutV3EventcollectionsIdRequest$inboundSchema;
  /** @deprecated use `PutV3EventcollectionsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutV3EventcollectionsIdRequest$outboundSchema;
  /** @deprecated use `PutV3EventcollectionsIdRequest$Outbound` instead. */
  export type Outbound = PutV3EventcollectionsIdRequest$Outbound;
}

export function putV3EventcollectionsIdRequestToJSON(
  putV3EventcollectionsIdRequest: PutV3EventcollectionsIdRequest,
): string {
  return JSON.stringify(
    PutV3EventcollectionsIdRequest$outboundSchema.parse(
      putV3EventcollectionsIdRequest,
    ),
  );
}

export function putV3EventcollectionsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV3EventcollectionsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3EventcollectionsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3EventcollectionsIdRequest' from JSON`,
  );
}

/** @internal */
export const PutV3EventcollectionsIdResponse$inboundSchema: z.ZodType<
  PutV3EventcollectionsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.EventCollectionDto$inboundSchema, z.string()]);

/** @internal */
export type PutV3EventcollectionsIdResponse$Outbound =
  | components.EventCollectionDto$Outbound
  | string;

/** @internal */
export const PutV3EventcollectionsIdResponse$outboundSchema: z.ZodType<
  PutV3EventcollectionsIdResponse$Outbound,
  z.ZodTypeDef,
  PutV3EventcollectionsIdResponse
> = z.union([components.EventCollectionDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3EventcollectionsIdResponse$ {
  /** @deprecated use `PutV3EventcollectionsIdResponse$inboundSchema` instead. */
  export const inboundSchema = PutV3EventcollectionsIdResponse$inboundSchema;
  /** @deprecated use `PutV3EventcollectionsIdResponse$outboundSchema` instead. */
  export const outboundSchema = PutV3EventcollectionsIdResponse$outboundSchema;
  /** @deprecated use `PutV3EventcollectionsIdResponse$Outbound` instead. */
  export type Outbound = PutV3EventcollectionsIdResponse$Outbound;
}

export function putV3EventcollectionsIdResponseToJSON(
  putV3EventcollectionsIdResponse: PutV3EventcollectionsIdResponse,
): string {
  return JSON.stringify(
    PutV3EventcollectionsIdResponse$outboundSchema.parse(
      putV3EventcollectionsIdResponse,
    ),
  );
}

export function putV3EventcollectionsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV3EventcollectionsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3EventcollectionsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3EventcollectionsIdResponse' from JSON`,
  );
}

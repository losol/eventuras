/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3EventIdCertificatesPreviewRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const GetV3EventIdCertificatesPreviewRequest$inboundSchema: z.ZodType<
  GetV3EventIdCertificatesPreviewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3EventIdCertificatesPreviewRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3EventIdCertificatesPreviewRequest$outboundSchema: z.ZodType<
  GetV3EventIdCertificatesPreviewRequest$Outbound,
  z.ZodTypeDef,
  GetV3EventIdCertificatesPreviewRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventIdCertificatesPreviewRequest$ {
  /** @deprecated use `GetV3EventIdCertificatesPreviewRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3EventIdCertificatesPreviewRequest$inboundSchema;
  /** @deprecated use `GetV3EventIdCertificatesPreviewRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventIdCertificatesPreviewRequest$outboundSchema;
  /** @deprecated use `GetV3EventIdCertificatesPreviewRequest$Outbound` instead. */
  export type Outbound = GetV3EventIdCertificatesPreviewRequest$Outbound;
}

export function getV3EventIdCertificatesPreviewRequestToJSON(
  getV3EventIdCertificatesPreviewRequest:
    GetV3EventIdCertificatesPreviewRequest,
): string {
  return JSON.stringify(
    GetV3EventIdCertificatesPreviewRequest$outboundSchema.parse(
      getV3EventIdCertificatesPreviewRequest,
    ),
  );
}

export function getV3EventIdCertificatesPreviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventIdCertificatesPreviewRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventIdCertificatesPreviewRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventIdCertificatesPreviewRequest' from JSON`,
  );
}

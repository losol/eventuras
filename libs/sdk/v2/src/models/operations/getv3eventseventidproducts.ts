/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3EventsEventIdProductsRequest = {
  eventId: number;
  visibility?: components.ProductVisibility | undefined;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3EventsEventIdProductsResponse =
  | string
  | Array<components.ProductDto>
  | Array<components.ProductDto>;

/** @internal */
export const GetV3EventsEventIdProductsRequest$inboundSchema: z.ZodType<
  GetV3EventsEventIdProductsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.number().int(),
  Visibility: components.ProductVisibility$inboundSchema.optional(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Visibility": "visibility",
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3EventsEventIdProductsRequest$Outbound = {
  eventId: number;
  Visibility?: string | undefined;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3EventsEventIdProductsRequest$outboundSchema: z.ZodType<
  GetV3EventsEventIdProductsRequest$Outbound,
  z.ZodTypeDef,
  GetV3EventsEventIdProductsRequest
> = z.object({
  eventId: z.number().int(),
  visibility: components.ProductVisibility$outboundSchema.optional(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    visibility: "Visibility",
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdProductsRequest$ {
  /** @deprecated use `GetV3EventsEventIdProductsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3EventsEventIdProductsRequest$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdProductsRequest$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsRequest$Outbound` instead. */
  export type Outbound = GetV3EventsEventIdProductsRequest$Outbound;
}

export function getV3EventsEventIdProductsRequestToJSON(
  getV3EventsEventIdProductsRequest: GetV3EventsEventIdProductsRequest,
): string {
  return JSON.stringify(
    GetV3EventsEventIdProductsRequest$outboundSchema.parse(
      getV3EventsEventIdProductsRequest,
    ),
  );
}

export function getV3EventsEventIdProductsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventsEventIdProductsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3EventsEventIdProductsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventsEventIdProductsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3EventsEventIdProductsResponse$inboundSchema: z.ZodType<
  GetV3EventsEventIdProductsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.ProductDto$inboundSchema),
  z.array(components.ProductDto$inboundSchema),
]);

/** @internal */
export type GetV3EventsEventIdProductsResponse$Outbound =
  | string
  | Array<components.ProductDto$Outbound>
  | Array<components.ProductDto$Outbound>;

/** @internal */
export const GetV3EventsEventIdProductsResponse$outboundSchema: z.ZodType<
  GetV3EventsEventIdProductsResponse$Outbound,
  z.ZodTypeDef,
  GetV3EventsEventIdProductsResponse
> = z.union([
  z.string(),
  z.array(components.ProductDto$outboundSchema),
  z.array(components.ProductDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3EventsEventIdProductsResponse$ {
  /** @deprecated use `GetV3EventsEventIdProductsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3EventsEventIdProductsResponse$inboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3EventsEventIdProductsResponse$outboundSchema;
  /** @deprecated use `GetV3EventsEventIdProductsResponse$Outbound` instead. */
  export type Outbound = GetV3EventsEventIdProductsResponse$Outbound;
}

export function getV3EventsEventIdProductsResponseToJSON(
  getV3EventsEventIdProductsResponse: GetV3EventsEventIdProductsResponse,
): string {
  return JSON.stringify(
    GetV3EventsEventIdProductsResponse$outboundSchema.parse(
      getV3EventsEventIdProductsResponse,
    ),
  );
}

export function getV3EventsEventIdProductsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3EventsEventIdProductsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3EventsEventIdProductsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3EventsEventIdProductsResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3OrdersRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  newOrderRequestDto?: components.NewOrderRequestDto | undefined;
};

/** @internal */
export const PostV3OrdersRequest$inboundSchema: z.ZodType<
  PostV3OrdersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  NewOrderRequestDto: components.NewOrderRequestDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "NewOrderRequestDto": "newOrderRequestDto",
  });
});

/** @internal */
export type PostV3OrdersRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  NewOrderRequestDto?: components.NewOrderRequestDto$Outbound | undefined;
};

/** @internal */
export const PostV3OrdersRequest$outboundSchema: z.ZodType<
  PostV3OrdersRequest$Outbound,
  z.ZodTypeDef,
  PostV3OrdersRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  newOrderRequestDto: components.NewOrderRequestDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    newOrderRequestDto: "NewOrderRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3OrdersRequest$ {
  /** @deprecated use `PostV3OrdersRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3OrdersRequest$inboundSchema;
  /** @deprecated use `PostV3OrdersRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3OrdersRequest$outboundSchema;
  /** @deprecated use `PostV3OrdersRequest$Outbound` instead. */
  export type Outbound = PostV3OrdersRequest$Outbound;
}

export function postV3OrdersRequestToJSON(
  postV3OrdersRequest: PostV3OrdersRequest,
): string {
  return JSON.stringify(
    PostV3OrdersRequest$outboundSchema.parse(postV3OrdersRequest),
  );
}

export function postV3OrdersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3OrdersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3OrdersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3OrdersRequest' from JSON`,
  );
}

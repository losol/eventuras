/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV3EventsIdRequest = {
  /**
   * The ID of the event.
   */
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  /**
   * Updated event information.
   */
  eventFormDto?: components.EventFormDto | undefined;
};

/** @internal */
export const PutV3EventsIdRequest$inboundSchema: z.ZodType<
  PutV3EventsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
  EventFormDto: components.EventFormDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "EventFormDto": "eventFormDto",
  });
});

/** @internal */
export type PutV3EventsIdRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
  EventFormDto?: components.EventFormDto$Outbound | undefined;
};

/** @internal */
export const PutV3EventsIdRequest$outboundSchema: z.ZodType<
  PutV3EventsIdRequest$Outbound,
  z.ZodTypeDef,
  PutV3EventsIdRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
  eventFormDto: components.EventFormDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    eventFormDto: "EventFormDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3EventsIdRequest$ {
  /** @deprecated use `PutV3EventsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutV3EventsIdRequest$inboundSchema;
  /** @deprecated use `PutV3EventsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PutV3EventsIdRequest$outboundSchema;
  /** @deprecated use `PutV3EventsIdRequest$Outbound` instead. */
  export type Outbound = PutV3EventsIdRequest$Outbound;
}

export function putV3EventsIdRequestToJSON(
  putV3EventsIdRequest: PutV3EventsIdRequest,
): string {
  return JSON.stringify(
    PutV3EventsIdRequest$outboundSchema.parse(putV3EventsIdRequest),
  );
}

export function putV3EventsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV3EventsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV3EventsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV3EventsIdRequest' from JSON`,
  );
}

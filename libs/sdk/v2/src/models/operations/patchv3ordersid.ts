/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV3OrdersIdRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const PatchV3OrdersIdRequest$inboundSchema: z.ZodType<
  PatchV3OrdersIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type PatchV3OrdersIdRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const PatchV3OrdersIdRequest$outboundSchema: z.ZodType<
  PatchV3OrdersIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV3OrdersIdRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV3OrdersIdRequest$ {
  /** @deprecated use `PatchV3OrdersIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV3OrdersIdRequest$inboundSchema;
  /** @deprecated use `PatchV3OrdersIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV3OrdersIdRequest$outboundSchema;
  /** @deprecated use `PatchV3OrdersIdRequest$Outbound` instead. */
  export type Outbound = PatchV3OrdersIdRequest$Outbound;
}

export function patchV3OrdersIdRequestToJSON(
  patchV3OrdersIdRequest: PatchV3OrdersIdRequest,
): string {
  return JSON.stringify(
    PatchV3OrdersIdRequest$outboundSchema.parse(patchV3OrdersIdRequest),
  );
}

export function patchV3OrdersIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV3OrdersIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV3OrdersIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV3OrdersIdRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3RegistrationsIdCertificateSendRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

/** @internal */
export const PostV3RegistrationsIdCertificateSendRequest$inboundSchema:
  z.ZodType<
    PostV3RegistrationsIdCertificateSendRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number().int(),
    "Eventuras-Org-Id": z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Eventuras-Org-Id": "eventurasOrgId",
    });
  });

/** @internal */
export type PostV3RegistrationsIdCertificateSendRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const PostV3RegistrationsIdCertificateSendRequest$outboundSchema:
  z.ZodType<
    PostV3RegistrationsIdCertificateSendRequest$Outbound,
    z.ZodTypeDef,
    PostV3RegistrationsIdCertificateSendRequest
  > = z.object({
    id: z.number().int(),
    eventurasOrgId: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3RegistrationsIdCertificateSendRequest$ {
  /** @deprecated use `PostV3RegistrationsIdCertificateSendRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV3RegistrationsIdCertificateSendRequest$inboundSchema;
  /** @deprecated use `PostV3RegistrationsIdCertificateSendRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV3RegistrationsIdCertificateSendRequest$outboundSchema;
  /** @deprecated use `PostV3RegistrationsIdCertificateSendRequest$Outbound` instead. */
  export type Outbound = PostV3RegistrationsIdCertificateSendRequest$Outbound;
}

export function postV3RegistrationsIdCertificateSendRequestToJSON(
  postV3RegistrationsIdCertificateSendRequest:
    PostV3RegistrationsIdCertificateSendRequest,
): string {
  return JSON.stringify(
    PostV3RegistrationsIdCertificateSendRequest$outboundSchema.parse(
      postV3RegistrationsIdCertificateSendRequest,
    ),
  );
}

export function postV3RegistrationsIdCertificateSendRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV3RegistrationsIdCertificateSendRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3RegistrationsIdCertificateSendRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV3RegistrationsIdCertificateSendRequest' from JSON`,
  );
}

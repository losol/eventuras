/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3EventcollectionsRequest = {
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  eventCollectionCreateDto?: components.EventCollectionCreateDto | undefined;
};

export type PostV3EventcollectionsResponse =
  | components.EventCollectionDto
  | string;

/** @internal */
export const PostV3EventcollectionsRequest$inboundSchema: z.ZodType<
  PostV3EventcollectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Eventuras-Org-Id": z.number().int().optional(),
  EventCollectionCreateDto: components.EventCollectionCreateDto$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "EventCollectionCreateDto": "eventCollectionCreateDto",
  });
});

/** @internal */
export type PostV3EventcollectionsRequest$Outbound = {
  "Eventuras-Org-Id"?: number | undefined;
  EventCollectionCreateDto?:
    | components.EventCollectionCreateDto$Outbound
    | undefined;
};

/** @internal */
export const PostV3EventcollectionsRequest$outboundSchema: z.ZodType<
  PostV3EventcollectionsRequest$Outbound,
  z.ZodTypeDef,
  PostV3EventcollectionsRequest
> = z.object({
  eventurasOrgId: z.number().int().optional(),
  eventCollectionCreateDto: components.EventCollectionCreateDto$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    eventCollectionCreateDto: "EventCollectionCreateDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventcollectionsRequest$ {
  /** @deprecated use `PostV3EventcollectionsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3EventcollectionsRequest$inboundSchema;
  /** @deprecated use `PostV3EventcollectionsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV3EventcollectionsRequest$outboundSchema;
  /** @deprecated use `PostV3EventcollectionsRequest$Outbound` instead. */
  export type Outbound = PostV3EventcollectionsRequest$Outbound;
}

export function postV3EventcollectionsRequestToJSON(
  postV3EventcollectionsRequest: PostV3EventcollectionsRequest,
): string {
  return JSON.stringify(
    PostV3EventcollectionsRequest$outboundSchema.parse(
      postV3EventcollectionsRequest,
    ),
  );
}

export function postV3EventcollectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3EventcollectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3EventcollectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3EventcollectionsRequest' from JSON`,
  );
}

/** @internal */
export const PostV3EventcollectionsResponse$inboundSchema: z.ZodType<
  PostV3EventcollectionsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.EventCollectionDto$inboundSchema, z.string()]);

/** @internal */
export type PostV3EventcollectionsResponse$Outbound =
  | components.EventCollectionDto$Outbound
  | string;

/** @internal */
export const PostV3EventcollectionsResponse$outboundSchema: z.ZodType<
  PostV3EventcollectionsResponse$Outbound,
  z.ZodTypeDef,
  PostV3EventcollectionsResponse
> = z.union([components.EventCollectionDto$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventcollectionsResponse$ {
  /** @deprecated use `PostV3EventcollectionsResponse$inboundSchema` instead. */
  export const inboundSchema = PostV3EventcollectionsResponse$inboundSchema;
  /** @deprecated use `PostV3EventcollectionsResponse$outboundSchema` instead. */
  export const outboundSchema = PostV3EventcollectionsResponse$outboundSchema;
  /** @deprecated use `PostV3EventcollectionsResponse$Outbound` instead. */
  export type Outbound = PostV3EventcollectionsResponse$Outbound;
}

export function postV3EventcollectionsResponseToJSON(
  postV3EventcollectionsResponse: PostV3EventcollectionsResponse,
): string {
  return JSON.stringify(
    PostV3EventcollectionsResponse$outboundSchema.parse(
      postV3EventcollectionsResponse,
    ),
  );
}

export function postV3EventcollectionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV3EventcollectionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV3EventcollectionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3EventcollectionsResponse' from JSON`,
  );
}

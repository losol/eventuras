/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest = {
  organizationId: number;
  userId: string;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse =
  | string
  | Array<string>
  | Array<string>;

/** @internal */
export const GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$inboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organizationId: z.number().int(),
    userId: z.string(),
    "Eventuras-Org-Id": z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Eventuras-Org-Id": "eventurasOrgId",
    });
  });

/** @internal */
export type GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$Outbound =
  {
    organizationId: number;
    userId: string;
    "Eventuras-Org-Id"?: number | undefined;
  };

/** @internal */
export const GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$outboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$Outbound,
    z.ZodTypeDef,
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest
  > = z.object({
    organizationId: z.number().int(),
    userId: z.string(),
    eventurasOrgId: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$Outbound` instead. */
  export type Outbound =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$Outbound;
}

export function getV3OrganizationsOrganizationIdMembersUserIdRolesRequestToJSON(
  getV3OrganizationsOrganizationIdMembersUserIdRolesRequest:
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$outboundSchema
      .parse(getV3OrganizationsOrganizationIdMembersUserIdRolesRequest),
  );
}

export function getV3OrganizationsOrganizationIdMembersUserIdRolesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV3OrganizationsOrganizationIdMembersUserIdRolesRequest' from JSON`,
  );
}

/** @internal */
export const GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$inboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string()), z.array(z.string())]);

/** @internal */
export type GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$Outbound =
  | string
  | Array<string>
  | Array<string>;

/** @internal */
export const GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$outboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$Outbound,
    z.ZodTypeDef,
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse
  > = z.union([z.string(), z.array(z.string()), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$Outbound` instead. */
  export type Outbound =
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$Outbound;
}

export function getV3OrganizationsOrganizationIdMembersUserIdRolesResponseToJSON(
  getV3OrganizationsOrganizationIdMembersUserIdRolesResponse:
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$outboundSchema
      .parse(getV3OrganizationsOrganizationIdMembersUserIdRolesResponse),
  );
}

export function getV3OrganizationsOrganizationIdMembersUserIdRolesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV3OrganizationsOrganizationIdMembersUserIdRolesResponse' from JSON`,
  );
}

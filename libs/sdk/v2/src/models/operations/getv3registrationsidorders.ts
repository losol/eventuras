/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3RegistrationsIdOrdersRequest = {
  id: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3RegistrationsIdOrdersResponse =
  | string
  | Array<components.OrderDto>
  | Array<components.OrderDto>;

/** @internal */
export const GetV3RegistrationsIdOrdersRequest$inboundSchema: z.ZodType<
  GetV3RegistrationsIdOrdersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
  });
});

/** @internal */
export type GetV3RegistrationsIdOrdersRequest$Outbound = {
  id: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3RegistrationsIdOrdersRequest$outboundSchema: z.ZodType<
  GetV3RegistrationsIdOrdersRequest$Outbound,
  z.ZodTypeDef,
  GetV3RegistrationsIdOrdersRequest
> = z.object({
  id: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3RegistrationsIdOrdersRequest$ {
  /** @deprecated use `GetV3RegistrationsIdOrdersRequest$inboundSchema` instead. */
  export const inboundSchema = GetV3RegistrationsIdOrdersRequest$inboundSchema;
  /** @deprecated use `GetV3RegistrationsIdOrdersRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3RegistrationsIdOrdersRequest$outboundSchema;
  /** @deprecated use `GetV3RegistrationsIdOrdersRequest$Outbound` instead. */
  export type Outbound = GetV3RegistrationsIdOrdersRequest$Outbound;
}

export function getV3RegistrationsIdOrdersRequestToJSON(
  getV3RegistrationsIdOrdersRequest: GetV3RegistrationsIdOrdersRequest,
): string {
  return JSON.stringify(
    GetV3RegistrationsIdOrdersRequest$outboundSchema.parse(
      getV3RegistrationsIdOrdersRequest,
    ),
  );
}

export function getV3RegistrationsIdOrdersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV3RegistrationsIdOrdersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV3RegistrationsIdOrdersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3RegistrationsIdOrdersRequest' from JSON`,
  );
}

/** @internal */
export const GetV3RegistrationsIdOrdersResponse$inboundSchema: z.ZodType<
  GetV3RegistrationsIdOrdersResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(components.OrderDto$inboundSchema),
  z.array(components.OrderDto$inboundSchema),
]);

/** @internal */
export type GetV3RegistrationsIdOrdersResponse$Outbound =
  | string
  | Array<components.OrderDto$Outbound>
  | Array<components.OrderDto$Outbound>;

/** @internal */
export const GetV3RegistrationsIdOrdersResponse$outboundSchema: z.ZodType<
  GetV3RegistrationsIdOrdersResponse$Outbound,
  z.ZodTypeDef,
  GetV3RegistrationsIdOrdersResponse
> = z.union([
  z.string(),
  z.array(components.OrderDto$outboundSchema),
  z.array(components.OrderDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3RegistrationsIdOrdersResponse$ {
  /** @deprecated use `GetV3RegistrationsIdOrdersResponse$inboundSchema` instead. */
  export const inboundSchema = GetV3RegistrationsIdOrdersResponse$inboundSchema;
  /** @deprecated use `GetV3RegistrationsIdOrdersResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3RegistrationsIdOrdersResponse$outboundSchema;
  /** @deprecated use `GetV3RegistrationsIdOrdersResponse$Outbound` instead. */
  export type Outbound = GetV3RegistrationsIdOrdersResponse$Outbound;
}

export function getV3RegistrationsIdOrdersResponseToJSON(
  getV3RegistrationsIdOrdersResponse: GetV3RegistrationsIdOrdersResponse,
): string {
  return JSON.stringify(
    GetV3RegistrationsIdOrdersResponse$outboundSchema.parse(
      getV3RegistrationsIdOrdersResponse,
    ),
  );
}

export function getV3RegistrationsIdOrdersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV3RegistrationsIdOrdersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3RegistrationsIdOrdersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV3RegistrationsIdOrdersResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV3EventsEventIdProductsProductIdRequest = {
  eventId: number;
  productId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  productFormDto?: components.ProductFormDto | undefined;
};

/** @internal */
export const PutV3EventsEventIdProductsProductIdRequest$inboundSchema:
  z.ZodType<PutV3EventsEventIdProductsProductIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      eventId: z.number().int(),
      productId: z.number().int(),
      "Eventuras-Org-Id": z.number().int().optional(),
      ProductFormDto: components.ProductFormDto$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "Eventuras-Org-Id": "eventurasOrgId",
        "ProductFormDto": "productFormDto",
      });
    });

/** @internal */
export type PutV3EventsEventIdProductsProductIdRequest$Outbound = {
  eventId: number;
  productId: number;
  "Eventuras-Org-Id"?: number | undefined;
  ProductFormDto?: components.ProductFormDto$Outbound | undefined;
};

/** @internal */
export const PutV3EventsEventIdProductsProductIdRequest$outboundSchema:
  z.ZodType<
    PutV3EventsEventIdProductsProductIdRequest$Outbound,
    z.ZodTypeDef,
    PutV3EventsEventIdProductsProductIdRequest
  > = z.object({
    eventId: z.number().int(),
    productId: z.number().int(),
    eventurasOrgId: z.number().int().optional(),
    productFormDto: components.ProductFormDto$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
      productFormDto: "ProductFormDto",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV3EventsEventIdProductsProductIdRequest$ {
  /** @deprecated use `PutV3EventsEventIdProductsProductIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV3EventsEventIdProductsProductIdRequest$inboundSchema;
  /** @deprecated use `PutV3EventsEventIdProductsProductIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV3EventsEventIdProductsProductIdRequest$outboundSchema;
  /** @deprecated use `PutV3EventsEventIdProductsProductIdRequest$Outbound` instead. */
  export type Outbound = PutV3EventsEventIdProductsProductIdRequest$Outbound;
}

export function putV3EventsEventIdProductsProductIdRequestToJSON(
  putV3EventsEventIdProductsProductIdRequest:
    PutV3EventsEventIdProductsProductIdRequest,
): string {
  return JSON.stringify(
    PutV3EventsEventIdProductsProductIdRequest$outboundSchema.parse(
      putV3EventsEventIdProductsProductIdRequest,
    ),
  );
}

export function putV3EventsEventIdProductsProductIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV3EventsEventIdProductsProductIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV3EventsEventIdProductsProductIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV3EventsEventIdProductsProductIdRequest' from JSON`,
  );
}

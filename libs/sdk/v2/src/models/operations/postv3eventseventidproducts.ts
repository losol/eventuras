/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV3EventsEventIdProductsRequest = {
  eventId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
  newProductDto?: components.NewProductDto | undefined;
};

/** @internal */
export const PostV3EventsEventIdProductsRequest$inboundSchema: z.ZodType<
  PostV3EventsEventIdProductsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.number().int(),
  "Eventuras-Org-Id": z.number().int().optional(),
  NewProductDto: components.NewProductDto$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Eventuras-Org-Id": "eventurasOrgId",
    "NewProductDto": "newProductDto",
  });
});

/** @internal */
export type PostV3EventsEventIdProductsRequest$Outbound = {
  eventId: number;
  "Eventuras-Org-Id"?: number | undefined;
  NewProductDto?: components.NewProductDto$Outbound | undefined;
};

/** @internal */
export const PostV3EventsEventIdProductsRequest$outboundSchema: z.ZodType<
  PostV3EventsEventIdProductsRequest$Outbound,
  z.ZodTypeDef,
  PostV3EventsEventIdProductsRequest
> = z.object({
  eventId: z.number().int(),
  eventurasOrgId: z.number().int().optional(),
  newProductDto: components.NewProductDto$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    eventurasOrgId: "Eventuras-Org-Id",
    newProductDto: "NewProductDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV3EventsEventIdProductsRequest$ {
  /** @deprecated use `PostV3EventsEventIdProductsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV3EventsEventIdProductsRequest$inboundSchema;
  /** @deprecated use `PostV3EventsEventIdProductsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV3EventsEventIdProductsRequest$outboundSchema;
  /** @deprecated use `PostV3EventsEventIdProductsRequest$Outbound` instead. */
  export type Outbound = PostV3EventsEventIdProductsRequest$Outbound;
}

export function postV3EventsEventIdProductsRequestToJSON(
  postV3EventsEventIdProductsRequest: PostV3EventsEventIdProductsRequest,
): string {
  return JSON.stringify(
    PostV3EventsEventIdProductsRequest$outboundSchema.parse(
      postV3EventsEventIdProductsRequest,
    ),
  );
}

export function postV3EventsEventIdProductsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV3EventsEventIdProductsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV3EventsEventIdProductsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV3EventsEventIdProductsRequest' from JSON`,
  );
}

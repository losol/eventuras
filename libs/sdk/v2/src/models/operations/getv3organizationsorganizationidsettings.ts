/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV3OrganizationsOrganizationIdSettingsRequest = {
  organizationId: number;
  /**
   * Optional organization Id. Will be required in API version 4.
   */
  eventurasOrgId?: number | undefined;
};

export type GetV3OrganizationsOrganizationIdSettingsResponse =
  | string
  | Array<components.OrganizationSettingDto>
  | Array<components.OrganizationSettingDto>;

/** @internal */
export const GetV3OrganizationsOrganizationIdSettingsRequest$inboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdSettingsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    organizationId: z.number().int(),
    "Eventuras-Org-Id": z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "Eventuras-Org-Id": "eventurasOrgId",
    });
  });

/** @internal */
export type GetV3OrganizationsOrganizationIdSettingsRequest$Outbound = {
  organizationId: number;
  "Eventuras-Org-Id"?: number | undefined;
};

/** @internal */
export const GetV3OrganizationsOrganizationIdSettingsRequest$outboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdSettingsRequest$Outbound,
    z.ZodTypeDef,
    GetV3OrganizationsOrganizationIdSettingsRequest
  > = z.object({
    organizationId: z.number().int(),
    eventurasOrgId: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      eventurasOrgId: "Eventuras-Org-Id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdSettingsRequest$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdSettingsRequest$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdSettingsRequest$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsRequest$Outbound` instead. */
  export type Outbound =
    GetV3OrganizationsOrganizationIdSettingsRequest$Outbound;
}

export function getV3OrganizationsOrganizationIdSettingsRequestToJSON(
  getV3OrganizationsOrganizationIdSettingsRequest:
    GetV3OrganizationsOrganizationIdSettingsRequest,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdSettingsRequest$outboundSchema.parse(
      getV3OrganizationsOrganizationIdSettingsRequest,
    ),
  );
}

export function getV3OrganizationsOrganizationIdSettingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdSettingsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdSettingsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3OrganizationsOrganizationIdSettingsRequest' from JSON`,
  );
}

/** @internal */
export const GetV3OrganizationsOrganizationIdSettingsResponse$inboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdSettingsResponse,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(components.OrganizationSettingDto$inboundSchema),
    z.array(components.OrganizationSettingDto$inboundSchema),
  ]);

/** @internal */
export type GetV3OrganizationsOrganizationIdSettingsResponse$Outbound =
  | string
  | Array<components.OrganizationSettingDto$Outbound>
  | Array<components.OrganizationSettingDto$Outbound>;

/** @internal */
export const GetV3OrganizationsOrganizationIdSettingsResponse$outboundSchema:
  z.ZodType<
    GetV3OrganizationsOrganizationIdSettingsResponse$Outbound,
    z.ZodTypeDef,
    GetV3OrganizationsOrganizationIdSettingsResponse
  > = z.union([
    z.string(),
    z.array(components.OrganizationSettingDto$outboundSchema),
    z.array(components.OrganizationSettingDto$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV3OrganizationsOrganizationIdSettingsResponse$ {
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV3OrganizationsOrganizationIdSettingsResponse$inboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV3OrganizationsOrganizationIdSettingsResponse$outboundSchema;
  /** @deprecated use `GetV3OrganizationsOrganizationIdSettingsResponse$Outbound` instead. */
  export type Outbound =
    GetV3OrganizationsOrganizationIdSettingsResponse$Outbound;
}

export function getV3OrganizationsOrganizationIdSettingsResponseToJSON(
  getV3OrganizationsOrganizationIdSettingsResponse:
    GetV3OrganizationsOrganizationIdSettingsResponse,
): string {
  return JSON.stringify(
    GetV3OrganizationsOrganizationIdSettingsResponse$outboundSchema.parse(
      getV3OrganizationsOrganizationIdSettingsResponse,
    ),
  );
}

export function getV3OrganizationsOrganizationIdSettingsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV3OrganizationsOrganizationIdSettingsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV3OrganizationsOrganizationIdSettingsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV3OrganizationsOrganizationIdSettingsResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RegistrationStatus,
  RegistrationStatus$inboundSchema,
  RegistrationStatus$outboundSchema,
} from "./registrationstatus.js";
import {
  RegistrationType,
  RegistrationType$inboundSchema,
  RegistrationType$outboundSchema,
} from "./registrationtype.js";

export type EventParticipantsFilterDto = {
  eventId?: number | null | undefined;
  productId?: number | null | undefined;
  registrationStatuses?: Array<RegistrationStatus> | null | undefined;
  registrationTypes?: Array<RegistrationType> | null | undefined;
};

/** @internal */
export const EventParticipantsFilterDto$inboundSchema: z.ZodType<
  EventParticipantsFilterDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventId: z.nullable(z.number().int()).optional(),
  productId: z.nullable(z.number().int()).optional(),
  registrationStatuses: z.nullable(z.array(RegistrationStatus$inboundSchema))
    .optional(),
  registrationTypes: z.nullable(z.array(RegistrationType$inboundSchema))
    .optional(),
});

/** @internal */
export type EventParticipantsFilterDto$Outbound = {
  eventId?: number | null | undefined;
  productId?: number | null | undefined;
  registrationStatuses?: Array<string> | null | undefined;
  registrationTypes?: Array<string> | null | undefined;
};

/** @internal */
export const EventParticipantsFilterDto$outboundSchema: z.ZodType<
  EventParticipantsFilterDto$Outbound,
  z.ZodTypeDef,
  EventParticipantsFilterDto
> = z.object({
  eventId: z.nullable(z.number().int()).optional(),
  productId: z.nullable(z.number().int()).optional(),
  registrationStatuses: z.nullable(z.array(RegistrationStatus$outboundSchema))
    .optional(),
  registrationTypes: z.nullable(z.array(RegistrationType$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventParticipantsFilterDto$ {
  /** @deprecated use `EventParticipantsFilterDto$inboundSchema` instead. */
  export const inboundSchema = EventParticipantsFilterDto$inboundSchema;
  /** @deprecated use `EventParticipantsFilterDto$outboundSchema` instead. */
  export const outboundSchema = EventParticipantsFilterDto$outboundSchema;
  /** @deprecated use `EventParticipantsFilterDto$Outbound` instead. */
  export type Outbound = EventParticipantsFilterDto$Outbound;
}

export function eventParticipantsFilterDtoToJSON(
  eventParticipantsFilterDto: EventParticipantsFilterDto,
): string {
  return JSON.stringify(
    EventParticipantsFilterDto$outboundSchema.parse(eventParticipantsFilterDto),
  );
}

export function eventParticipantsFilterDtoFromJSON(
  jsonString: string,
): SafeParseResult<EventParticipantsFilterDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventParticipantsFilterDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventParticipantsFilterDto' from JSON`,
  );
}

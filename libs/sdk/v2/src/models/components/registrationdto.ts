/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventDto,
  EventDto$inboundSchema,
  EventDto$Outbound,
  EventDto$outboundSchema,
} from "./eventdto.js";
import {
  OrderDto,
  OrderDto$inboundSchema,
  OrderDto$Outbound,
  OrderDto$outboundSchema,
} from "./orderdto.js";
import {
  ProductOrderDto,
  ProductOrderDto$inboundSchema,
  ProductOrderDto$Outbound,
  ProductOrderDto$outboundSchema,
} from "./productorderdto.js";
import {
  RegistrationStatus,
  RegistrationStatus$inboundSchema,
  RegistrationStatus$outboundSchema,
} from "./registrationstatus.js";
import {
  RegistrationType,
  RegistrationType$inboundSchema,
  RegistrationType$outboundSchema,
} from "./registrationtype.js";
import {
  UserDto,
  UserDto$inboundSchema,
  UserDto$Outbound,
  UserDto$outboundSchema,
} from "./userdto.js";

export type RegistrationDto = {
  registrationId?: number | undefined;
  eventId?: number | undefined;
  userId?: string | null | undefined;
  status?: RegistrationStatus | undefined;
  type?: RegistrationType | undefined;
  certificateId?: number | null | undefined;
  notes?: string | null | undefined;
  log?: string | null | undefined;
  user?: UserDto | undefined;
  event?: EventDto | undefined;
  products?: Array<ProductOrderDto> | null | undefined;
  orders?: Array<OrderDto> | null | undefined;
};

/** @internal */
export const RegistrationDto$inboundSchema: z.ZodType<
  RegistrationDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  registrationId: z.number().int().optional(),
  eventId: z.number().int().optional(),
  userId: z.nullable(z.string()).optional(),
  status: RegistrationStatus$inboundSchema.optional(),
  type: RegistrationType$inboundSchema.optional(),
  certificateId: z.nullable(z.number().int()).optional(),
  notes: z.nullable(z.string()).optional(),
  log: z.nullable(z.string()).optional(),
  user: UserDto$inboundSchema.optional(),
  event: EventDto$inboundSchema.optional(),
  products: z.nullable(z.array(ProductOrderDto$inboundSchema)).optional(),
  orders: z.nullable(z.array(z.lazy(() => OrderDto$inboundSchema))).optional(),
});

/** @internal */
export type RegistrationDto$Outbound = {
  registrationId?: number | undefined;
  eventId?: number | undefined;
  userId?: string | null | undefined;
  status?: string | undefined;
  type?: string | undefined;
  certificateId?: number | null | undefined;
  notes?: string | null | undefined;
  log?: string | null | undefined;
  user?: UserDto$Outbound | undefined;
  event?: EventDto$Outbound | undefined;
  products?: Array<ProductOrderDto$Outbound> | null | undefined;
  orders?: Array<OrderDto$Outbound> | null | undefined;
};

/** @internal */
export const RegistrationDto$outboundSchema: z.ZodType<
  RegistrationDto$Outbound,
  z.ZodTypeDef,
  RegistrationDto
> = z.object({
  registrationId: z.number().int().optional(),
  eventId: z.number().int().optional(),
  userId: z.nullable(z.string()).optional(),
  status: RegistrationStatus$outboundSchema.optional(),
  type: RegistrationType$outboundSchema.optional(),
  certificateId: z.nullable(z.number().int()).optional(),
  notes: z.nullable(z.string()).optional(),
  log: z.nullable(z.string()).optional(),
  user: UserDto$outboundSchema.optional(),
  event: EventDto$outboundSchema.optional(),
  products: z.nullable(z.array(ProductOrderDto$outboundSchema)).optional(),
  orders: z.nullable(z.array(z.lazy(() => OrderDto$outboundSchema))).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationDto$ {
  /** @deprecated use `RegistrationDto$inboundSchema` instead. */
  export const inboundSchema = RegistrationDto$inboundSchema;
  /** @deprecated use `RegistrationDto$outboundSchema` instead. */
  export const outboundSchema = RegistrationDto$outboundSchema;
  /** @deprecated use `RegistrationDto$Outbound` instead. */
  export type Outbound = RegistrationDto$Outbound;
}

export function registrationDtoToJSON(
  registrationDto: RegistrationDto,
): string {
  return JSON.stringify(RegistrationDto$outboundSchema.parse(registrationDto));
}

export function registrationDtoFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationDto' from JSON`,
  );
}

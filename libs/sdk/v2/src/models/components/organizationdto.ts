/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationDto = {
  organizationId?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  url?: string | null | undefined;
  phone?: string | null | undefined;
  email?: string | null | undefined;
  logoUrl?: string | null | undefined;
  logoBase64?: string | null | undefined;
};

/** @internal */
export const OrganizationDto$inboundSchema: z.ZodType<
  OrganizationDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationId: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  logoUrl: z.nullable(z.string()).optional(),
  logoBase64: z.nullable(z.string()).optional(),
});

/** @internal */
export type OrganizationDto$Outbound = {
  organizationId?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  url?: string | null | undefined;
  phone?: string | null | undefined;
  email?: string | null | undefined;
  logoUrl?: string | null | undefined;
  logoBase64?: string | null | undefined;
};

/** @internal */
export const OrganizationDto$outboundSchema: z.ZodType<
  OrganizationDto$Outbound,
  z.ZodTypeDef,
  OrganizationDto
> = z.object({
  organizationId: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
  logoUrl: z.nullable(z.string()).optional(),
  logoBase64: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationDto$ {
  /** @deprecated use `OrganizationDto$inboundSchema` instead. */
  export const inboundSchema = OrganizationDto$inboundSchema;
  /** @deprecated use `OrganizationDto$outboundSchema` instead. */
  export const outboundSchema = OrganizationDto$outboundSchema;
  /** @deprecated use `OrganizationDto$Outbound` instead. */
  export type Outbound = OrganizationDto$Outbound;
}

export function organizationDtoToJSON(
  organizationDto: OrganizationDto,
): string {
  return JSON.stringify(OrganizationDto$outboundSchema.parse(organizationDto));
}

export function organizationDtoFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationDto' from JSON`,
  );
}

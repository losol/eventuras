/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationMemberRoleDto = {
  organizationMemberId?: number | undefined;
  role?: string | null | undefined;
};

/** @internal */
export const OrganizationMemberRoleDto$inboundSchema: z.ZodType<
  OrganizationMemberRoleDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  organizationMemberId: z.number().int().optional(),
  role: z.nullable(z.string()).optional(),
});

/** @internal */
export type OrganizationMemberRoleDto$Outbound = {
  organizationMemberId?: number | undefined;
  role?: string | null | undefined;
};

/** @internal */
export const OrganizationMemberRoleDto$outboundSchema: z.ZodType<
  OrganizationMemberRoleDto$Outbound,
  z.ZodTypeDef,
  OrganizationMemberRoleDto
> = z.object({
  organizationMemberId: z.number().int().optional(),
  role: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationMemberRoleDto$ {
  /** @deprecated use `OrganizationMemberRoleDto$inboundSchema` instead. */
  export const inboundSchema = OrganizationMemberRoleDto$inboundSchema;
  /** @deprecated use `OrganizationMemberRoleDto$outboundSchema` instead. */
  export const outboundSchema = OrganizationMemberRoleDto$outboundSchema;
  /** @deprecated use `OrganizationMemberRoleDto$Outbound` instead. */
  export type Outbound = OrganizationMemberRoleDto$Outbound;
}

export function organizationMemberRoleDtoToJSON(
  organizationMemberRoleDto: OrganizationMemberRoleDto,
): string {
  return JSON.stringify(
    OrganizationMemberRoleDto$outboundSchema.parse(organizationMemberRoleDto),
  );
}

export function organizationMemberRoleDtoFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationMemberRoleDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationMemberRoleDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationMemberRoleDto' from JSON`,
  );
}

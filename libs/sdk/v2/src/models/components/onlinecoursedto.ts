/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OnlineCourseDto = {
  id?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  featured?: boolean | undefined;
  onDemand?: boolean | undefined;
};

/** @internal */
export const OnlineCourseDto$inboundSchema: z.ZodType<
  OnlineCourseDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  featured: z.boolean().optional(),
  onDemand: z.boolean().optional(),
});

/** @internal */
export type OnlineCourseDto$Outbound = {
  id?: number | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  slug?: string | null | undefined;
  featured?: boolean | undefined;
  onDemand?: boolean | undefined;
};

/** @internal */
export const OnlineCourseDto$outboundSchema: z.ZodType<
  OnlineCourseDto$Outbound,
  z.ZodTypeDef,
  OnlineCourseDto
> = z.object({
  id: z.number().int().optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  featured: z.boolean().optional(),
  onDemand: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnlineCourseDto$ {
  /** @deprecated use `OnlineCourseDto$inboundSchema` instead. */
  export const inboundSchema = OnlineCourseDto$inboundSchema;
  /** @deprecated use `OnlineCourseDto$outboundSchema` instead. */
  export const outboundSchema = OnlineCourseDto$outboundSchema;
  /** @deprecated use `OnlineCourseDto$Outbound` instead. */
  export type Outbound = OnlineCourseDto$Outbound;
}

export function onlineCourseDtoToJSON(
  onlineCourseDto: OnlineCourseDto,
): string {
  return JSON.stringify(OnlineCourseDto$outboundSchema.parse(onlineCourseDto));
}

export function onlineCourseDtoFromJSON(
  jsonString: string,
): SafeParseResult<OnlineCourseDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnlineCourseDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnlineCourseDto' from JSON`,
  );
}

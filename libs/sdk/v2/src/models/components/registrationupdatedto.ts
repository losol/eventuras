/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentProvider,
  PaymentProvider$inboundSchema,
  PaymentProvider$outboundSchema,
} from "./paymentprovider.js";
import {
  RegistrationCustomerInfoDto,
  RegistrationCustomerInfoDto$inboundSchema,
  RegistrationCustomerInfoDto$Outbound,
  RegistrationCustomerInfoDto$outboundSchema,
} from "./registrationcustomerinfodto.js";
import {
  RegistrationStatus,
  RegistrationStatus$inboundSchema,
  RegistrationStatus$outboundSchema,
} from "./registrationstatus.js";
import {
  RegistrationType,
  RegistrationType$inboundSchema,
  RegistrationType$outboundSchema,
} from "./registrationtype.js";

export type RegistrationUpdateDto = {
  status?: RegistrationStatus | undefined;
  type?: RegistrationType | undefined;
  notes?: string | null | undefined;
  customer?: RegistrationCustomerInfoDto | undefined;
  paymentMethod?: PaymentProvider | undefined;
};

/** @internal */
export const RegistrationUpdateDto$inboundSchema: z.ZodType<
  RegistrationUpdateDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: RegistrationStatus$inboundSchema.optional(),
  type: RegistrationType$inboundSchema.optional(),
  notes: z.nullable(z.string()).optional(),
  customer: RegistrationCustomerInfoDto$inboundSchema.optional(),
  paymentMethod: PaymentProvider$inboundSchema.optional(),
});

/** @internal */
export type RegistrationUpdateDto$Outbound = {
  status?: string | undefined;
  type?: string | undefined;
  notes?: string | null | undefined;
  customer?: RegistrationCustomerInfoDto$Outbound | undefined;
  paymentMethod?: string | undefined;
};

/** @internal */
export const RegistrationUpdateDto$outboundSchema: z.ZodType<
  RegistrationUpdateDto$Outbound,
  z.ZodTypeDef,
  RegistrationUpdateDto
> = z.object({
  status: RegistrationStatus$outboundSchema.optional(),
  type: RegistrationType$outboundSchema.optional(),
  notes: z.nullable(z.string()).optional(),
  customer: RegistrationCustomerInfoDto$outboundSchema.optional(),
  paymentMethod: PaymentProvider$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RegistrationUpdateDto$ {
  /** @deprecated use `RegistrationUpdateDto$inboundSchema` instead. */
  export const inboundSchema = RegistrationUpdateDto$inboundSchema;
  /** @deprecated use `RegistrationUpdateDto$outboundSchema` instead. */
  export const outboundSchema = RegistrationUpdateDto$outboundSchema;
  /** @deprecated use `RegistrationUpdateDto$Outbound` instead. */
  export type Outbound = RegistrationUpdateDto$Outbound;
}

export function registrationUpdateDtoToJSON(
  registrationUpdateDto: RegistrationUpdateDto,
): string {
  return JSON.stringify(
    RegistrationUpdateDto$outboundSchema.parse(registrationUpdateDto),
  );
}

export function registrationUpdateDtoFromJSON(
  jsonString: string,
): SafeParseResult<RegistrationUpdateDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RegistrationUpdateDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RegistrationUpdateDto' from JSON`,
  );
}

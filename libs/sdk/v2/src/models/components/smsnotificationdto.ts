/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventParticipantsFilterDto,
  EventParticipantsFilterDto$inboundSchema,
  EventParticipantsFilterDto$Outbound,
  EventParticipantsFilterDto$outboundSchema,
} from "./eventparticipantsfilterdto.js";

export type SmsNotificationDto = {
  recipients?: Array<string> | null | undefined;
  eventParticipants?: EventParticipantsFilterDto | undefined;
  registrationId?: number | null | undefined;
  message: string;
};

/** @internal */
export const SmsNotificationDto$inboundSchema: z.ZodType<
  SmsNotificationDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipients: z.nullable(z.array(z.string())).optional(),
  eventParticipants: EventParticipantsFilterDto$inboundSchema.optional(),
  registrationId: z.nullable(z.number().int()).optional(),
  message: z.string(),
});

/** @internal */
export type SmsNotificationDto$Outbound = {
  recipients?: Array<string> | null | undefined;
  eventParticipants?: EventParticipantsFilterDto$Outbound | undefined;
  registrationId?: number | null | undefined;
  message: string;
};

/** @internal */
export const SmsNotificationDto$outboundSchema: z.ZodType<
  SmsNotificationDto$Outbound,
  z.ZodTypeDef,
  SmsNotificationDto
> = z.object({
  recipients: z.nullable(z.array(z.string())).optional(),
  eventParticipants: EventParticipantsFilterDto$outboundSchema.optional(),
  registrationId: z.nullable(z.number().int()).optional(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SmsNotificationDto$ {
  /** @deprecated use `SmsNotificationDto$inboundSchema` instead. */
  export const inboundSchema = SmsNotificationDto$inboundSchema;
  /** @deprecated use `SmsNotificationDto$outboundSchema` instead. */
  export const outboundSchema = SmsNotificationDto$outboundSchema;
  /** @deprecated use `SmsNotificationDto$Outbound` instead. */
  export type Outbound = SmsNotificationDto$Outbound;
}

export function smsNotificationDtoToJSON(
  smsNotificationDto: SmsNotificationDto,
): string {
  return JSON.stringify(
    SmsNotificationDto$outboundSchema.parse(smsNotificationDto),
  );
}

export function smsNotificationDtoFromJSON(
  jsonString: string,
): SafeParseResult<SmsNotificationDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SmsNotificationDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SmsNotificationDto' from JSON`,
  );
}

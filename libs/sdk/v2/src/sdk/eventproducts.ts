/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventProductsDeleteV3EventsEventIdProductsProductId } from "../funcs/eventProductsDeleteV3EventsEventIdProductsProductId.js";
import {
  eventProductsGetV3EventsEventIdProducts,
  GetV3EventsEventIdProductsAcceptEnum,
} from "../funcs/eventProductsGetV3EventsEventIdProducts.js";
import { eventProductsPostV3EventsEventIdProducts } from "../funcs/eventProductsPostV3EventsEventIdProducts.js";
import { eventProductsPutV3EventsEventIdProductsProductId } from "../funcs/eventProductsPutV3EventsEventIdProductsProductId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetV3EventsEventIdProductsAcceptEnum } from "../funcs/eventProductsGetV3EventsEventIdProducts.js";

export class EventProducts extends ClientSDK {
  async getV3EventsEventIdProducts(
    request: operations.GetV3EventsEventIdProductsRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetV3EventsEventIdProductsAcceptEnum;
    },
  ): Promise<operations.GetV3EventsEventIdProductsResponse> {
    return unwrapAsync(eventProductsGetV3EventsEventIdProducts(
      this,
      request,
      options,
    ));
  }

  async postV3EventsEventIdProducts(
    request: operations.PostV3EventsEventIdProductsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventProductsPostV3EventsEventIdProducts(
      this,
      request,
      options,
    ));
  }

  async putV3EventsEventIdProductsProductId(
    request: operations.PutV3EventsEventIdProductsProductIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventProductsPutV3EventsEventIdProductsProductId(
      this,
      request,
      options,
    ));
  }

  async deleteV3EventsEventIdProductsProductId(
    request: operations.DeleteV3EventsEventIdProductsProductIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(eventProductsDeleteV3EventsEventIdProductsProductId(
      this,
      request,
      options,
    ));
  }
}

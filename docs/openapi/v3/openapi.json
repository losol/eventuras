{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "contact@email.com",
      "name" : "Contact Name",
      "url" : "http://losol.github.io/eventuras/openapi/v3/eventuras-api.v3.yaml"
    },
    "description" : "Event Management API.",
    "license" : {
      "name" : "GPL"
    },
    "title" : "Eventuras API",
    "version" : "3.0.1"
  },
  "externalDocs" : {
    "description" : "Generated API HTML",
    "url" : "http://losol.github.io/eventuras/openapi/v3/"
  },
  "servers" : [ {
    "url" : "https://full.path.to/v3/"
  } ],
  "security" : [ {
    "bearer" : [ ]
  } ],
  "paths" : {
    "/registrations" : {
      "get" : {
        "operationId" : "getRegistrationsList",
        "parameters" : [ {
          "description" : "Page number.",
          "in" : "query",
          "name" : "page",
          "required" : false,
          "schema" : {
            "default" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Page size.",
          "in" : "query",
          "name" : "count",
          "required" : false,
          "schema" : {
            "default" : 100,
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationPagedList"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get registrations list.",
        "tags" : [ "registrations" ]
      },
      "post" : {
        "operationId" : "createNewRegistration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewRegistrationDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Create new registration.",
        "tags" : [ "registrations" ]
      }
    },
    "/registrations/me/{eventId}" : {
      "post" : {
        "description" : "Alias for POST /registrations.",
        "operationId" : "selfRegistration",
        "parameters" : [ {
          "description" : "Automatically create order containing all the mandatory products.\n",
          "in" : "query",
          "name" : "createOrder",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Self registration.",
        "tags" : [ "registrations" ]
      }
    },
    "/registrations/{id}" : {
      "delete" : {
        "operationId" : "cancelRegistration",
        "parameters" : [ {
          "description" : "Registration ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Registration cancelled."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Cancel registration.",
        "tags" : [ "registrations" ]
      },
      "put" : {
        "operationId" : "updateRegistration",
        "parameters" : [ {
          "description" : "Registration ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistrationFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationDto"
                }
              }
            },
            "description" : "Registration updated."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Update registration.",
        "tags" : [ "registrations" ]
      }
    },
    "/registrations/{id}/orders" : {
      "get" : {
        "operationId" : "getRegistrationOrdersList",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationOrderDto"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get registration orders list.",
        "tags" : [ "registrations" ]
      },
      "post" : {
        "operationId" : "addOrderToRegistration",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewRegistrationOrderDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationOrderDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Add order to registration.",
        "tags" : [ "registrations" ]
      }
    },
    "/notifications/email" : {
      "post" : {
        "description" : "Create and send new email notification using either event registration filter\nor explicit email addresses.\n",
        "operationId" : "createNewEmailNotification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailNotificationFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NotificationResponseDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Create new email notification.",
        "tags" : [ "notifications" ]
      }
    },
    "/users" : {
      "get" : {
        "operationId" : "getUsers",
        "parameters" : [ {
          "description" : "Page number.",
          "in" : "query",
          "name" : "page",
          "required" : false,
          "schema" : {
            "default" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Page size.",
          "in" : "query",
          "name" : "count",
          "required" : false,
          "schema" : {
            "default" : 100,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Search users by name, email, or phone.\n",
          "in" : "query",
          "name" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "`name`, `email` or `phone`. Default is `name`.\n",
          "in" : "query",
          "name" : "order",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Whether to apply descending sort.\nApplicable to `order` param only.\nDefault is `false`.\n",
          "in" : "query",
          "name" : "descending",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/UsersPagedList"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get accessible users list.",
        "tags" : [ "users" ]
      },
      "post" : {
        "description" : "Accessible to admins only.\nOrg admin can only create members of the own org.\n",
        "operationId" : "createNewUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewUserDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Create new user.",
        "tags" : [ "users" ]
      }
    },
    "/users/me" : {
      "get" : {
        "operationId" : "getOwnProfile",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get own profile.",
        "tags" : [ "users" ]
      }
    },
    "/users/{id}" : {
      "get" : {
        "operationId" : "getUserById",
        "parameters" : [ {
          "description" : "User ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get user by id.",
        "tags" : [ "users" ]
      },
      "put" : {
        "operationId" : "updateUser",
        "parameters" : [ {
          "description" : "User ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserDto"
                }
              }
            },
            "description" : "User updated."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Update user profile.",
        "tags" : [ "users" ]
      }
    },
    "/events" : {
      "get" : {
        "operationId" : "getEvents",
        "parameters" : [ {
          "description" : "Page number.",
          "in" : "query",
          "name" : "page",
          "required" : false,
          "schema" : {
            "default" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Page size.",
          "in" : "query",
          "name" : "count",
          "required" : false,
          "schema" : {
            "default" : 100,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Event type.",
          "in" : "query",
          "name" : "type",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventType"
          }
        }, {
          "description" : "Event start date (inclusive).",
          "in" : "query",
          "name" : "start",
          "required" : false,
          "schema" : {
            "format" : "date",
            "type" : "string"
          }
        }, {
          "description" : "Event end date (inclusive).",
          "in" : "query",
          "name" : "end",
          "required" : false,
          "schema" : {
            "format" : "date",
            "type" : "string"
          }
        }, {
          "description" : "Event period matching kind.\nApplies to `start` and `end` filter params.\nUse `match` (default) for exact match, `intersect` for partial event dates intersection, and `contain` for the whole event period inclusion check.\n",
          "in" : "query",
          "name" : "period",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Organization id.\n",
          "in" : "query",
          "name" : "organizationId",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/EventsPagedList"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "List events.",
        "tags" : [ "events" ]
      },
      "post" : {
        "description" : "Available for admins only.",
        "operationId" : "createNewEvent",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Data conflict."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Create new event.",
        "tags" : [ "events" ]
      }
    },
    "/events/{id}" : {
      "delete" : {
        "operationId" : "deleteEvent",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event deleted."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Delete event.",
        "tags" : [ "events" ]
      },
      "get" : {
        "operationId" : "getEventById",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDto"
                }
              }
            }
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get event by id.",
        "tags" : [ "events" ]
      },
      "put" : {
        "operationId" : "updateEvent",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventDto"
                }
              }
            },
            "description" : "Event updated."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Data conflict."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Update event.",
        "tags" : [ "events" ]
      }
    },
    "/events/{id}/products" : {
      "get" : {
        "operationId" : "getEventProductsList",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ProductDto"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get event products list.",
        "tags" : [ "events", "products" ]
      },
      "post" : {
        "operationId" : "addProductToEvent",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewProductDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Add product to event.",
        "tags" : [ "events", "products" ]
      }
    },
    "/events/{id}/products/{productId}" : {
      "delete" : {
        "operationId" : "archiveProduct",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Product ID.",
          "in" : "path",
          "name" : "productId",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Product archived."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Archive product.",
        "tags" : [ "events", "products" ]
      }
    },
    "/events/{id}/products/{productId}/variants" : {
      "get" : {
        "operationId" : "getProductVariantsList",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Product ID.",
          "in" : "path",
          "name" : "productId",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/ProductVariantDto"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get product variants list.",
        "tags" : [ "events", "products" ]
      },
      "post" : {
        "operationId" : "addVariantToProduct",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Product ID.",
          "in" : "path",
          "name" : "productId",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewProductVariantDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductVariantDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Add variant to product.",
        "tags" : [ "events", "products" ]
      }
    },
    "/events/{id}/products/{productId}/variants/{variantId}" : {
      "delete" : {
        "operationId" : "archiveProductVariant",
        "parameters" : [ {
          "description" : "Event ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Product ID.",
          "in" : "path",
          "name" : "productId",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Product variant ID.",
          "in" : "path",
          "name" : "variantId",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Product variant archived."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Archive product variant.",
        "tags" : [ "events", "products" ]
      }
    },
    "/orders" : {
      "get" : {
        "operationId" : "getOrders",
        "parameters" : [ {
          "description" : "Page number.",
          "in" : "query",
          "name" : "page",
          "required" : false,
          "schema" : {
            "default" : 1,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Page size.",
          "in" : "query",
          "name" : "count",
          "required" : false,
          "schema" : {
            "default" : 100,
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Search orders by userId.\n",
          "in" : "query",
          "name" : "userId",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "description" : "Search orders by registrationId.\n",
          "in" : "query",
          "name" : "registrationId",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Search orders by eventId.\n",
          "in" : "query",
          "name" : "eventId",
          "required" : false,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "in" : "query",
          "name" : "status",
          "required" : false,
          "schema" : {
            "$ref" : "#/components/schemas/OrderStatus"
          }
        }, {
          "description" : "Whether to include user information into the response.\n",
          "in" : "query",
          "name" : "includeUser",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to include registration information into the response.\n",
          "in" : "query",
          "name" : "includeRegistration",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/OrdersPagedList"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get accessible orders list.",
        "tags" : [ "orders" ]
      }
    },
    "/orders/{id}" : {
      "delete" : {
        "operationId" : "cancelOrder",
        "parameters" : [ {
          "description" : "Order ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Order cancelled"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Cancel order.",
        "tags" : [ "orders" ]
      },
      "get" : {
        "operationId" : "getOrderById",
        "parameters" : [ {
          "description" : "Order ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        }, {
          "description" : "Whether to include user information into the response.\n",
          "in" : "query",
          "name" : "includeUser",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        }, {
          "description" : "Whether to include registration information into the response.\n",
          "in" : "query",
          "name" : "includeRegistration",
          "required" : false,
          "schema" : {
            "default" : false,
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderDto"
                }
              }
            }
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get order by id.",
        "tags" : [ "orders" ]
      }
    },
    "/organizations" : {
      "get" : {
        "operationId" : "getOrganizationsList",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/OrganizationDto"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get organizations list (system admin only).",
        "tags" : [ "organizations" ]
      },
      "post" : {
        "operationId" : "createNewOrganization",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrganizationFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationDto"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Create new organization (system admin only).",
        "tags" : [ "organizations" ]
      }
    },
    "/organizations/{id}" : {
      "delete" : {
        "operationId" : "deleteOrganization",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Organization deleted."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Delete organization (system admin only).",
        "tags" : [ "organizations" ]
      },
      "put" : {
        "operationId" : "updateOrganization",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrganizationFormDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationDto"
                }
              }
            },
            "description" : "Registration updated."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Update organization (system admin only).",
        "tags" : [ "organizations" ]
      }
    },
    "/organizations/{id}/members" : {
      "delete" : {
        "operationId" : "removeMemberFromOrganization",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Remove member from organization.",
        "tags" : [ "organizations" ]
      },
      "put" : {
        "operationId" : "addMemberToOrganization",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Add member to organization.",
        "tags" : [ "organizations" ]
      }
    },
    "/organizations/{id}/members/{memberId}/roles" : {
      "delete" : {
        "operationId" : "removeMemberFromOrganization",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationMemberRoleList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Remove org member role.",
        "tags" : [ "organizations" ]
      },
      "get" : {
        "operationId" : "getOrganizationMemberRoles",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationMemberRoleList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "List org member roles.",
        "tags" : [ "organizations" ]
      },
      "post" : {
        "operationId" : "addOrganizationMemberRole",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/inline_object",
          "content" : {
            "application/json" : {
              "schema" : {
                "properties" : {
                  "role" : {
                    "type" : "string"
                  }
                },
                "type" : "object"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrganizationMemberRoleList"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Add org member role.",
        "tags" : [ "organizations" ]
      }
    },
    "/organizations/{id}/settings" : {
      "get" : {
        "operationId" : "getOrganizationSettingsList",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/OrganizationSettingDto"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "OK"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Get organization settings list.",
        "tags" : [ "organizations", "settings" ]
      },
      "put" : {
        "operationId" : "updateOrganizationSettings",
        "parameters" : [ {
          "description" : "Organization ID.",
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "format" : "int32",
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OrganizationSettingValueDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Missing or invalid request parameters."
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access token is missing or invalid."
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "The requested resource not found."
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Access forbidden."
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unexpected server error."
          }
        },
        "summary" : "Update organization settings.",
        "tags" : [ "organizations", "settings" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "pageNumber" : {
        "description" : "Page number.",
        "explode" : true,
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : {
          "default" : 1,
          "format" : "int32",
          "type" : "integer"
        },
        "style" : "form"
      },
      "pageSize" : {
        "description" : "Page size.",
        "explode" : true,
        "in" : "query",
        "name" : "count",
        "required" : false,
        "schema" : {
          "default" : 100,
          "format" : "int32",
          "type" : "integer"
        },
        "style" : "form"
      }
    },
    "requestBodies" : {
      "inline_object" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        },
        "required" : true
      }
    },
    "responses" : {
      "NotFound" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "The requested resource not found."
      },
      "InvalidRequestError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Missing or invalid request parameters."
      },
      "UnauthorizedError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Access token is missing or invalid."
      },
      "ForbiddenError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Access forbidden."
      },
      "Conflict" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Data conflict."
      },
      "InternalServerError" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        },
        "description" : "Unexpected server error."
      }
    },
    "schemas" : {
      "Error" : {
        "example" : {
          "message" : "Phone and password don't match",
          "code" : "password-mismatch",
          "fields" : {
            "password" : [ "Invalid password" ]
          }
        },
        "properties" : {
          "message" : {
            "description" : "User-friendly error message.",
            "type" : "string"
          },
          "code" : {
            "description" : "Machine-friendly error code.",
            "type" : "string"
          },
          "fields" : {
            "items" : {
              "additionalProperties" : {
                "items" : {
                  "type" : "string"
                },
                "type" : "array"
              },
              "type" : "object"
            },
            "type" : "array"
          }
        },
        "required" : [ "message" ],
        "title" : "Common error response structure.",
        "type" : "object"
      },
      "RegistrationPagedList" : {
        "example" : {
          "page" : 1,
          "size" : 10,
          "total" : 2,
          "pages" : 1,
          "data" : [ {
            "registrationId" : 1099,
            "eventId" : 45,
            "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
            "status" : "verified",
            "type" : "participant",
            "notes" : "Test"
          }, {
            "registrationId" : 1346,
            "eventId" : 674,
            "userId" : "69056ce6-5fc4-11eb-b474-448a5b42a569",
            "status" : "verified",
            "type" : "lecturer",
            "notes" : "Another test"
          } ]
        },
        "properties" : {
          "page" : {
            "description" : "Page number.",
            "format" : "int32",
            "type" : "integer"
          },
          "count" : {
            "description" : "Page size.",
            "format" : "int32",
            "type" : "integer"
          },
          "total" : {
            "description" : "Total items.",
            "format" : "int32",
            "type" : "integer"
          },
          "pages" : {
            "description" : "Total pages.",
            "format" : "int32",
            "type" : "integer"
          },
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/RegistrationDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "count", "data", "page", "pages", "total" ],
        "title" : "Registration list with paging.",
        "type" : "object"
      },
      "NewRegistrationDto" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/RegistrationFormDto"
        }, {
          "$ref" : "#/components/schemas/New_registration_specific_properties"
        } ],
        "example" : {
          "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
          "eventId" : 643,
          "customer" : {
            "name" : "John Doe",
            "email" : "test@email.com",
            "vatNumber" : 1010,
            "invoiceReference" : 200,
            "zip" : 1234,
            "city" : "Oslo",
            "country" : "Norway"
          },
          "status" : "verified",
          "type" : "participant",
          "notes" : "Testing"
        },
        "title" : "New registration info"
      },
      "RegistrationDto" : {
        "example" : {
          "registrationId" : 1099,
          "eventId" : 45,
          "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
          "status" : "verified",
          "type" : "participant",
          "notes" : "Test"
        },
        "properties" : {
          "registrationId" : {
            "description" : "Registration ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "eventId" : {
            "description" : "Event ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "userId" : {
            "description" : "Registered user ID.",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/RegistrationStatus"
          },
          "type" : {
            "$ref" : "#/components/schemas/./schemas/registrations/RegistrationType.yaml"
          },
          "notes" : {
            "type" : "string"
          }
        },
        "required" : [ "eventId", "registrationId", "status", "type", "userId" ],
        "title" : "Registration information.",
        "type" : "object"
      },
      "RegistrationFormDto" : {
        "description" : "`customer`, `status`, `type` and `notes` can be set by admin only.\n",
        "example" : {
          "customer" : {
            "name" : "John Doe",
            "email" : "test@email.com",
            "vatNumber" : 1010,
            "invoiceReference" : 200,
            "zip" : 1234,
            "city" : "Oslo",
            "country" : "Norway"
          },
          "status" : "verified",
          "type" : "participant",
          "notes" : "Testing"
        },
        "properties" : {
          "customer" : {
            "$ref" : "#/components/schemas/RegistrationCustomerInfoDto"
          },
          "status" : {
            "$ref" : "#/components/schemas/RegistrationStatus"
          },
          "type" : {
            "$ref" : "#/components/schemas/./schemas/registrations/RegistrationType.yaml"
          },
          "notes" : {
            "description" : "Additional notes. Can be managed by admin only.",
            "type" : "string"
          }
        },
        "title" : "Registration data.",
        "type" : "object"
      },
      "RegistrationOrderDto" : {
        "example" : {
          "orderId" : 10001,
          "items" : [ {
            "product" : {
              "productId" : 1001,
              "name" : "Test Product",
              "description" : "Test",
              "more" : "More on this product...",
              "price" : 19.99,
              "vatPercent" : 17
            },
            "productVariant" : {
              "productVariantId" : 34,
              "name" : "Red Coloured Test Product",
              "description" : "Some variant description...",
              "price" : 21.99
            },
            "quantity" : 1
          }, {
            "product" : {
              "productId" : 2001,
              "name" : "Test Product 2",
              "description" : "Test 2",
              "more" : "More on this product...",
              "price" : 29.99,
              "vatPercent" : 17
            },
            "quantity" : 3
          } ]
        },
        "properties" : {
          "orderId" : {
            "description" : "Order ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/RegistrationOrderLineDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "items", "orderId" ],
        "title" : "Order information.",
        "type" : "object"
      },
      "NewRegistrationOrderDto" : {
        "example" : {
          "items" : [ {
            "productId" : 1001,
            "productVariantId" : 34,
            "quantity" : 1
          }, {
            "productId" : 3244,
            "quantity" : 3
          } ]
        },
        "properties" : {
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/NewRegistrationOrderItemDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "items" ],
        "title" : "New order data.",
        "type" : "object"
      },
      "EmailNotificationFormDto" : {
        "properties" : {
          "subject" : {
            "description" : "Email subject.",
            "type" : "string"
          },
          "bodyMarkdown" : {
            "description" : "Email body (will be transformed to HTML before send).",
            "type" : "string"
          },
          "recipients" : {
            "description" : "List of email addresses.",
            "items" : {
              "description" : "Email address.",
              "type" : "string"
            },
            "type" : "array"
          },
          "filter" : {
            "$ref" : "#/components/schemas/NotificationRecipientsFilterDto"
          }
        },
        "required" : [ "bodyMarkdown", "subject" ],
        "title" : "New email notification info",
        "type" : "object"
      },
      "NotificationResponseDto" : {
        "properties" : {
          "totalRecipients" : {
            "description" : "Notification recipients total.",
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "totalRecipients" ],
        "title" : "Notification response",
        "type" : "object"
      },
      "UsersPagedList" : {
        "example" : {
          "page" : 1,
          "size" : 10,
          "total" : 2,
          "pages" : 1,
          "data" : [ {
            "id" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
            "email" : "test@email.com",
            "name" : "Test User",
            "phoneNumber" : "+11111111111"
          }, {
            "id" : "69056ce6-5fc4-11eb-b474-448a5b42a569",
            "email" : "test2@email.com",
            "name" : "Test User 2"
          } ]
        },
        "properties" : {
          "page" : {
            "description" : "Page number.",
            "format" : "int32",
            "type" : "integer"
          },
          "count" : {
            "description" : "Page size.",
            "format" : "int32",
            "type" : "integer"
          },
          "total" : {
            "description" : "Total items.",
            "format" : "int32",
            "type" : "integer"
          },
          "pages" : {
            "description" : "Total pages.",
            "format" : "int32",
            "type" : "integer"
          },
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/UserDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "count", "data", "page", "pages", "total" ],
        "title" : "User list with paging.",
        "type" : "object"
      },
      "NewUserDto" : {
        "example" : {
          "email" : "test@email.com",
          "name" : "John Doe",
          "phoneNumber" : "+11111111111"
        },
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "name" ],
        "title" : "New user form.",
        "type" : "object"
      },
      "UserDto" : {
        "example" : {
          "id" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
          "email" : "test@email.com",
          "name" : "John Doe",
          "phoneNumber" : "+11111111111"
        },
        "properties" : {
          "id" : {
            "description" : "User ID.",
            "type" : "string"
          },
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "id", "name" ],
        "title" : "User info.",
        "type" : "object"
      },
      "UserFormDto" : {
        "example" : {
          "email" : "test@email.com",
          "name" : "John Doe",
          "phoneNumber" : "+11111111111"
        },
        "properties" : {
          "email" : {
            "format" : "email",
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "name" ],
        "title" : "Update user form.",
        "type" : "object"
      },
      "EventType" : {
        "description" : "Course = 0,\nConference = 1,\nOnlineCourse = 2,\nSocial = 3,\nOther = 9\n",
        "title" : "Event type enum.",
        "type" : "integer"
      },
      "EventsPagedList" : {
        "example" : {
          "page" : 1,
          "size" : 10,
          "total" : 2,
          "pages" : 1,
          "data" : [ {
            "id" : 10001,
            "slug" : "evt1",
            "name" : "Demo Event #1"
          }, {
            "id" : 10002,
            "slug" : "evt2",
            "name" : "Demo Event #2"
          } ]
        },
        "properties" : {
          "page" : {
            "description" : "Page number.",
            "format" : "int32",
            "type" : "integer"
          },
          "count" : {
            "description" : "Page size.",
            "format" : "int32",
            "type" : "integer"
          },
          "total" : {
            "description" : "Total items.",
            "format" : "int32",
            "type" : "integer"
          },
          "pages" : {
            "description" : "Total pages.",
            "format" : "int32",
            "type" : "integer"
          },
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/EventDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "count", "data", "page", "pages", "total" ],
        "title" : "Event list with paging.",
        "type" : "object"
      },
      "EventFormDto" : {
        "example" : {
          "type" : 3,
          "name" : "Demo event",
          "slug" : "demo",
          "category" : "Some category",
          "description" : "Some demo event",
          "featured" : false,
          "program" : "Some program",
          "practicalInformation" : "Some info",
          "onDemand" : true,
          "location" : [ {
            "name" : "Some demo locaiton",
            "address" : {
              "addressLocality" : "Oslo"
            }
          } ],
          "startDate" : "2021-01-01",
          "endDate" : "2021-01-10",
          "manageRegistrations" : true
        },
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/EventType"
          },
          "name" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "featured" : {
            "type" : "boolean"
          },
          "program" : {
            "type" : "string"
          },
          "practicalInformation" : {
            "type" : "string"
          },
          "onDemand" : {
            "type" : "boolean"
          },
          "location" : {
            "$ref" : "#/components/schemas/LocationDto"
          },
          "startDate" : {
            "format" : "date",
            "type" : "string"
          },
          "endDate" : {
            "format" : "date",
            "type" : "string"
          },
          "manageRegistrations" : {
            "type" : "boolean"
          }
        },
        "required" : [ "slug" ],
        "title" : "Event form data.",
        "type" : "object"
      },
      "EventDto" : {
        "example" : {
          "id" : 10001,
          "type" : 3,
          "name" : "Demo event",
          "slug" : "demo",
          "category" : "Some category",
          "description" : "Some demo event",
          "featured" : false,
          "program" : "Some program",
          "practicalInformation" : "Some info",
          "onDemand" : true,
          "location" : {
            "name" : "Some demo locaiton",
            "address" : {
              "addressLocality" : "Oslo"
            }
          },
          "startDate" : "2021-01-01",
          "endDate" : "2021-01-10",
          "lastRegistrationDate" : "2020-11-12"
        },
        "properties" : {
          "id" : {
            "description" : "Event ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "type" : {
            "$ref" : "#/components/schemas/EventType"
          },
          "name" : {
            "type" : "string"
          },
          "slug" : {
            "type" : "string"
          },
          "category" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "featured" : {
            "type" : "boolean"
          },
          "program" : {
            "type" : "string"
          },
          "practicalInformation" : {
            "type" : "string"
          },
          "onDemand" : {
            "type" : "boolean"
          },
          "location" : {
            "$ref" : "#/components/schemas/LocationDto"
          },
          "startDate" : {
            "format" : "date",
            "type" : "string"
          },
          "endDate" : {
            "format" : "date",
            "type" : "string"
          },
          "lastRegistrationDate" : {
            "format" : "date",
            "type" : "string"
          }
        },
        "required" : [ "id", "slug", "type" ],
        "title" : "Event information.",
        "type" : "object"
      },
      "ProductDto" : {
        "example" : {
          "productId" : 1001,
          "name" : "Test Product",
          "description" : "Test",
          "more" : "More on this product...",
          "price" : 19.99,
          "vatPercent" : 17,
          "variants" : [ {
            "productVariantId" : 34,
            "name" : "Red Coloured Test Product",
            "description" : "Some variant description...",
            "price" : 21.99
          }, {
            "productVariantId" : 35,
            "name" : "Green Coloured Test Product",
            "description" : "Some variant description...",
            "price" : 22.99
          } ]
        },
        "properties" : {
          "productId" : {
            "format" : "int32",
            "type" : "integer"
          },
          "name" : {
            "description" : "Product name.",
            "type" : "string"
          },
          "description" : {
            "description" : "Product description.",
            "type" : "string"
          },
          "more" : {
            "description" : "More information about the product.",
            "type" : "string"
          },
          "price" : {
            "format" : "float",
            "type" : "number"
          },
          "vatPercent" : {
            "format" : "float",
            "type" : "number"
          },
          "variants" : {
            "items" : {
              "$ref" : "#/components/schemas/ProductVariantDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "description", "name", "price", "productId", "variants" ],
        "title" : "Product data.",
        "type" : "object"
      },
      "NewProductDto" : {
        "example" : {
          "name" : "Test Product",
          "description" : "Test",
          "more" : "More on this product...",
          "price" : 19.99,
          "vatPercent" : 17
        },
        "properties" : {
          "name" : {
            "description" : "Product name.",
            "type" : "string"
          },
          "description" : {
            "description" : "Product description.",
            "type" : "string"
          },
          "more" : {
            "description" : "More information about the product.",
            "type" : "string"
          },
          "price" : {
            "format" : "float",
            "type" : "number"
          },
          "vatPercent" : {
            "format" : "float",
            "type" : "number"
          }
        },
        "required" : [ "name" ],
        "title" : "New product form.",
        "type" : "object"
      },
      "ProductVariantDto" : {
        "example" : {
          "productVariantId" : 34,
          "name" : "Red Coloured Test Product",
          "description" : "Some variant description...",
          "price" : 21.99
        },
        "properties" : {
          "productVariantId" : {
            "format" : "int32",
            "type" : "integer"
          },
          "name" : {
            "description" : "Product variant name.",
            "type" : "string"
          },
          "description" : {
            "description" : "Product variant description.",
            "type" : "string"
          },
          "price" : {
            "format" : "float",
            "type" : "number"
          },
          "vatPercent" : {
            "format" : "int32",
            "type" : "number"
          }
        },
        "required" : [ "description", "name", "price", "productVariantId" ],
        "title" : "Product variant data.",
        "type" : "object"
      },
      "NewProductVariantDto" : {
        "example" : {
          "name" : "Red Coloured Test Product",
          "description" : "Some variant description...",
          "price" : 21.99
        },
        "properties" : {
          "name" : {
            "description" : "Product variant name.",
            "type" : "string"
          },
          "description" : {
            "description" : "Product variant description.",
            "type" : "string"
          },
          "price" : {
            "format" : "float",
            "type" : "number"
          },
          "vatPercent" : {
            "format" : "int32",
            "type" : "number"
          }
        },
        "title" : "New product variant form.",
        "type" : "object"
      },
      "OrderStatus" : {
        "description" : "Search orders by status.\nCan be either `draft`, `verified`, `invoiced`, `cancelled`, or `refunded`.\n",
        "enum" : [ "draft", "verified", "invoiced", "cancelled", "refunded" ],
        "title" : "Order status enum.",
        "type" : "string"
      },
      "OrdersPagedList" : {
        "example" : {
          "page" : 1,
          "size" : 10,
          "total" : 2,
          "pages" : 1,
          "data" : [ {
            "orderId" : 10001,
            "status" : "verified",
            "time" : "2017-07-21T17:32:28Z",
            "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
            "registrationId" : 1099,
            "user" : {
              "id" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
              "email" : "test@email.com",
              "name" : "John Doe",
              "phoneNumber" : "+11111111111"
            },
            "registration" : {
              "registrationId" : 1099,
              "eventId" : 45,
              "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
              "status" : "verified",
              "type" : "participant",
              "notes" : "Test"
            },
            "items" : [ {
              "orderLineId" : 103030,
              "product" : {
                "productId" : 1001,
                "name" : "Test Product",
                "description" : "Test",
                "more" : "More on this product...",
                "price" : 19.99,
                "vatPercent" : 17
              },
              "productVariant" : {
                "productVariantId" : 34,
                "name" : "Red Coloured Test Product",
                "description" : "Some variant description...",
                "price" : 21.99
              },
              "quantity" : 1
            }, {
              "orderLineId" : 103030,
              "product" : {
                "productId" : 2001,
                "name" : "Test Product 2",
                "description" : "Test 2",
                "more" : "More on this product...",
                "price" : 29.99,
                "vatPercent" : 17
              },
              "quantity" : 3
            } ]
          } ]
        },
        "properties" : {
          "page" : {
            "description" : "Page number.",
            "format" : "int32",
            "type" : "integer"
          },
          "count" : {
            "description" : "Page size.",
            "format" : "int32",
            "type" : "integer"
          },
          "total" : {
            "description" : "Total items.",
            "format" : "int32",
            "type" : "integer"
          },
          "pages" : {
            "description" : "Total pages.",
            "format" : "int32",
            "type" : "integer"
          },
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/OrderDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "count", "data", "page", "pages", "total" ],
        "title" : "User list with paging.",
        "type" : "object"
      },
      "OrderDto" : {
        "example" : {
          "orderId" : 10001,
          "status" : "verified",
          "time" : "2017-07-21T17:32:28Z",
          "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
          "registrationId" : 1099,
          "user" : {
            "id" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
            "email" : "test@email.com",
            "name" : "John Doe",
            "phoneNumber" : "+11111111111"
          },
          "registration" : {
            "registrationId" : 1099,
            "eventId" : 45,
            "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
            "status" : "verified",
            "type" : "participant",
            "notes" : "Test"
          },
          "items" : [ {
            "orderLineId" : 103030,
            "product" : {
              "productId" : 1001,
              "name" : "Test Product",
              "description" : "Test",
              "more" : "More on this product...",
              "price" : 19.99,
              "vatPercent" : 17
            },
            "productVariant" : {
              "productVariantId" : 34,
              "name" : "Red Coloured Test Product",
              "description" : "Some variant description...",
              "price" : 21.99
            },
            "quantity" : 1
          }, {
            "orderLineId" : 103030,
            "product" : {
              "productId" : 2001,
              "name" : "Test Product 2",
              "description" : "Test 2",
              "more" : "More on this product...",
              "price" : 29.99,
              "vatPercent" : 17
            },
            "quantity" : 3
          } ]
        },
        "properties" : {
          "orderId" : {
            "description" : "Order ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "status" : {
            "$ref" : "#/components/schemas/OrderStatus"
          },
          "time" : {
            "format" : "date-time",
            "type" : "string"
          },
          "userId" : {
            "description" : "User ID.",
            "type" : "string"
          },
          "registrationId" : {
            "description" : "Registration ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "user" : {
            "$ref" : "#/components/schemas/UserDto"
          },
          "registration" : {
            "$ref" : "#/components/schemas/OrderRegistrationDto"
          },
          "items" : {
            "items" : {
              "$ref" : "#/components/schemas/OrderLineDto"
            },
            "type" : "array"
          }
        },
        "required" : [ "items", "orderId", "registrationId", "status", "time", "userId" ],
        "title" : "Order information.",
        "type" : "object"
      },
      "OrganizationDto" : {
        "example" : {
          "name" : "Test org"
        },
        "properties" : {
          "organizationId" : {
            "description" : "Organization ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "logoUrl" : {
            "type" : "string"
          },
          "løogoBase64" : {
            "type" : "string"
          }
        },
        "required" : [ "name" ],
        "title" : "Organization properties.",
        "type" : "object"
      },
      "OrganizationFormDto" : {
        "example" : {
          "name" : "Test org"
        },
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "url" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "logoUrl" : {
            "type" : "string"
          },
          "løogoBase64" : {
            "type" : "string"
          }
        },
        "required" : [ "name" ],
        "title" : "Organization data.",
        "type" : "object"
      },
      "OrganizationMemberRoleList" : {
        "items" : {
          "type" : "string"
        },
        "type" : "array"
      },
      "OrganizationSettingDto" : {
        "example" : {
          "name" : "ZOOM_API_KEY",
          "value" : "12345"
        },
        "properties" : {
          "name" : {
            "description" : "Unique setting key.",
            "type" : "string"
          },
          "section" : {
            "description" : "Human-friendly section name, used to group settings together.",
            "type" : "string"
          },
          "description" : {
            "description" : "Human-friendly setting name.",
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/OrganizationSettingType"
          },
          "value" : {
            "description" : "Current setting value, if set.",
            "type" : "string"
          }
        },
        "required" : [ "description", "name", "section", "type" ],
        "title" : "Organization setting properties.",
        "type" : "object"
      },
      "OrganizationSettingValueDto" : {
        "example" : {
          "name" : "ZOOM_API_KEY",
          "value" : "12345"
        },
        "properties" : {
          "name" : {
            "description" : "Unique setting key.",
            "type" : "string"
          },
          "value" : {
            "description" : "If empty, the setting value will be removed.",
            "type" : "string"
          }
        },
        "required" : [ "name", "value" ],
        "title" : "Org setting key value pair.",
        "type" : "object"
      },
      "RegistrationStatus" : {
        "enum" : [ "draft", "cancelled", "verified", "notattended", "attended", "finished" ],
        "title" : "Registration status enum.",
        "type" : "string"
      },
      "RegistrationCustomerInfoDto" : {
        "example" : {
          "surname" : "Doe",
          "bday" : "2010-01-01",
          "relation" : "Son"
        },
        "properties" : {
          "vatNumber" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "zip" : {
            "type" : "string"
          },
          "city" : {
            "type" : "string"
          },
          "country" : {
            "type" : "string"
          },
          "invoiceReference" : {
            "type" : "string"
          }
        },
        "title" : "Registration customer data.",
        "type" : "object"
      },
      "RegistrationOrderLineDto" : {
        "example" : {
          "product" : {
            "productId" : 1001,
            "name" : "Test Product",
            "description" : "Test",
            "more" : "More on this product...",
            "price" : 19.99,
            "vatPercent" : 17
          },
          "productVariant" : {
            "productVariantId" : 34,
            "name" : "Red Coloured Test Product",
            "description" : "Some variant description...",
            "price" : 21.99
          },
          "quantity" : 1
        },
        "properties" : {
          "product" : {
            "$ref" : "#/components/schemas/ProductDto"
          },
          "productVariant" : {
            "$ref" : "#/components/schemas/ProductVariantDto"
          },
          "quantity" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "product", "quantity" ],
        "title" : "Order line data.",
        "type" : "object"
      },
      "NewRegistrationOrderItemDto" : {
        "example" : {
          "productId" : 1001,
          "productVariantId" : 34,
          "quantity" : 1
        },
        "properties" : {
          "productId" : {
            "format" : "int32",
            "type" : "integer"
          },
          "productVariantId" : {
            "format" : "int32",
            "type" : "integer"
          },
          "quantity" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "productId", "quantity" ],
        "title" : "Order line data.",
        "type" : "object"
      },
      "NotificationRecipientsFilterDto" : {
        "description" : "Used to filter out notification recipients.\nAll properties are optional.\n",
        "properties" : {
          "eventId" : {
            "format" : "int32",
            "type" : "integer"
          },
          "registrationStatuses" : {
            "items" : {
              "$ref" : "#/components/schemas/RegistrationStatus"
            },
            "type" : "array"
          },
          "registrationTypes" : {
            "items" : {
              "$ref" : "#/components/schemas/./schemas/registrations/RegistrationType.yaml"
            },
            "type" : "array"
          }
        },
        "title" : "Notification recipients filter",
        "type" : "object"
      },
      "LocationDto" : {
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "address" : {
            "$ref" : "#/components/schemas/AddressDto"
          }
        },
        "required" : [ "name" ],
        "title" : "Location info.",
        "type" : "object"
      },
      "OrderRegistrationDto" : {
        "example" : {
          "registrationId" : 1099,
          "eventId" : 45,
          "userId" : "3fa94776-5fc1-11eb-b353-448a5b42a569",
          "status" : "verified",
          "type" : "participant",
          "notes" : "Test"
        },
        "properties" : {
          "registrationId" : {
            "description" : "Registration ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "eventId" : {
            "description" : "Event ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "userId" : {
            "description" : "Registered user ID.",
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/RegistrationStatus"
          },
          "type" : {
            "$ref" : "#/components/schemas/./schemas/registrations/RegistrationType.yaml"
          },
          "certificateId" : {
            "description" : "Registration certificate ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "notes" : {
            "type" : "string"
          }
        },
        "required" : [ "eventId", "registrationId", "status", "type", "userId" ],
        "title" : "Order registration information.",
        "type" : "object"
      },
      "OrderLineDto" : {
        "example" : {
          "orderLineId" : 100001,
          "product" : {
            "productId" : 1001,
            "name" : "Test Product",
            "description" : "Test",
            "more" : "More on this product...",
            "price" : 19.99,
            "vatPercent" : 17
          },
          "productVariant" : {
            "productVariantId" : 34,
            "name" : "Red Coloured Test Product",
            "description" : "Some variant description...",
            "price" : 21.99
          },
          "quantity" : 1
        },
        "properties" : {
          "orderLineId" : {
            "description" : "Order line ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "product" : {
            "$ref" : "#/components/schemas/ProductDto"
          },
          "productVariant" : {
            "$ref" : "#/components/schemas/ProductVariantDto"
          },
          "quantity" : {
            "format" : "int32",
            "type" : "integer"
          }
        },
        "required" : [ "orderLineId", "product", "quantity" ],
        "title" : "Order line data.",
        "type" : "object"
      },
      "OrganizationSettingType" : {
        "description" : "String = 1,\nNumber = 2,\nUrl = 3,\nEmail = 4\n",
        "title" : "Organization setting type enum.",
        "type" : "integer"
      },
      "AddressDto" : {
        "properties" : {
          "streetAddress" : {
            "type" : "string"
          },
          "addressLocality" : {
            "type" : "string"
          },
          "postalCode" : {
            "type" : "string"
          },
          "addressRegion" : {
            "type" : "string"
          },
          "addressCountry" : {
            "type" : "string"
          }
        },
        "title" : "Address info.",
        "type" : "object"
      },
      "inline_object" : {
        "properties" : {
          "role" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "New_registration_specific_properties" : {
        "properties" : {
          "userId" : {
            "description" : "User ID.",
            "type" : "string"
          },
          "eventId" : {
            "description" : "Event ID.",
            "format" : "int32",
            "type" : "integer"
          },
          "createOrder" : {
            "default" : false,
            "description" : "Automatically create order containing all the mandatory products.",
            "type" : "boolean"
          }
        },
        "required" : [ "eventId", "userId" ],
        "title" : "New registration specific properties",
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "bearer" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}
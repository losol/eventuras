name: Api project CI

on:
  push:
    branches:
      - main
    paths:
      - "apps/api/**"
  pull_request:
    branches:
      - main
    types: [opened, synchronize]
    paths:
      - "apps/api/**"
  workflow_call:
    inputs:
      dotnet-version:
        required: false
        default: "8"
        type: string

jobs:
  format:
    name: dotnet format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api/
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format
      - name: Format code
        run: dotnet format --verify-no-changes

  build:
    name: Build project
    needs: format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api/
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Build with dotnet
        run: dotnet build --configuration Release --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./apps/api/
    strategy:
      matrix:
        test_set:
          - name: "Unit Tests"
            path: "./tests/Eventuras.UnitTests/Eventuras.UnitTests.csproj"
          - name: "Web API Integration Tests"
            path: "./tests/Eventuras.WebApi.Tests/Eventuras.WebApi.Tests.csproj"
          - name: "Services Integration Tests"
            path: "./tests/Eventuras.Services.Tests/Eventuras.Services.Tests.csproj"
    name: ${{ matrix.test_set.name }}
    steps:
      - uses: actions/checkout@v4
        name: Setup dotnet
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      - run: dotnet test ${{ matrix.test_set.path }}

  docker:
    name: Docker build
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api/
    outputs:
      docker_tag: ${{ env.DOCKER_TAG }}

    steps:
      - uses: actions/checkout@v4

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

      - name: Set Docker Tag
        if: github.ref == 'refs/heads/main'
        run: echo "DOCKER_TAG=${{ env.ORGANIZATION_NAME }}/${{ env.IMAGE_NAME }}:$(date +'%Y%m%d-%H%M%S')-${{ github.run_id }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api/
          push: true
          tags: ${{ env.DOCKER_TAG }}

      - name: Output Docker tag
        if: github.ref == 'refs/heads/main'
        run: echo "Docker tag is ${{ env.DOCKER_TAG }}"

  deploy-app:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test

    defaults:
      run:
        working-directory: ./apps/api/

    environment:
      name: api-staging-app
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: "Production"
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

  deploy-docker:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: docker
    environment: api-staging

    steps:
      - name: Deploy to Azure
        id: deploy-to-azure
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ needs.docker.outputs.docker_tag }}

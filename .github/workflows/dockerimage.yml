name: Docker Image CI

on:
  push:
    branches:
      - master
      - "feature/*"
  pull_request:
    branches:
      - master

env:
  ORGANIZATION_NAME: losolio
  IMAGE_NAME: eventuras

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  feature:
    name: Build image and push feature image to Docker Hub.
    if: contains(github.ref, 'feature')
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          echo "RUN_NUMBER=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%H%M%S')" >> $GITHUB_ENV

      - name: Docker meta (feature)
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.ORGANIZATION_NAME }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            suffix=-${{ env.BUILD_DATE }}.${{ env.RUN_NUMBER }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    name: Build image and push latest release to Docker Hub.
    if: github.ref == 'refs/heads/master'
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          echo "RUN_NUMBER=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%H%M%S')" >> $GITHUB_ENV

      - name: Docker meta (master)
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.ORGANIZATION_NAME }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
            prefix="classic-"
            suffix=-${{ env.BUILD_DATE }}.${{ env.RUN_NUMBER }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  classic:
    name: Build image and push classic release to Docker Hub.
    if: github.ref == 'refs/heads/master'
    needs: test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
          echo "RUN_NUMBER=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%H%M%S')" >> $GITHUB_ENV

      - name: Docker meta (classic)
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.ORGANIZATION_NAME }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=classic-
            suffix=-${{ env.BUILD_DATE }}.${{ env.RUN_NUMBER }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: "Dockerfile.classic"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

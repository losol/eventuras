name: Vercel deployment

# Example usage:
# jobs:
#   docs-deploy:
#     name: Deploy Docsite
#     uses: ./.github/workflows/util-vercel-deploy.yml
#     with:
#       environment: docsite
#     secrets:
#       VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
#       VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#       VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#
# The environment needs to provide `VERCEL_TOKEN`, `VERCEL_ORG_ID` and `VERCEL_PROJECT_ID` secrets.

on:
  workflow_call:
    inputs:
      environment:
        description: "Github environment"
        required: true
        type: string
      vercel_environment:
        description: "Vercel environment (production|preview|staging)"
        required: false
        type: string
        default: "production"
      promote:
        description: "Toggle to promote the deployment to production."
        required: false
        type: boolean
        default: false
      url:
        description: "Optional custom URL for aliasing the deployment."
        required: false
        type: string
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true
      TURBO_TOKEN:
        required: false
      TURBO_TEAM:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_REMOTE_ONLY: true
      DO_NOT_TRACK: 1
      NEXT_TELEMETRY_DISABLED: 1
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Npm CI
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ inputs.vercel_environment }} --token=${{ secrets.vercel_token }}

      - name: Build Project Artifacts (Dev)
        if: ${{ inputs.vercel_environment != 'production' }}
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts (Production)
        if: ${{ inputs.vercel_environment == 'production' }}
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel (Dev)
        if: ${{ inputs.vercel_environment != 'production' }}
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.vercel_token }} | grep "https://" | xargs)
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Deploy Project Artifacts to Vercel (Production)
        if: ${{ inputs.vercel_environment == 'production' }}
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.vercel_token }} | grep "https://" | xargs)
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Set Custom URL
        if: ${{ inputs.custom_url }}
        run: vercel alias --token=${{ secrets.vercel_token }} set "$url" ${{ inputs.url }}

      - name: Promote
        if: ${{ inputs.promote }}
        run: vercel promote --token=${{ secrets.vercel_token }} --scope=${{ secrets.VERCEL_ORG_ID }} --yes $DEPLOY_URL
